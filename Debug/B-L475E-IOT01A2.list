
B-L475E-IOT01A2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .AI_RAM       00003430  20000000  20000000  00016000  2**5
                  CONTENTS, ALLOC, LOAD, DATA
  1 .AI_RAM2      00000000  10000000  10000000  00019430  2**0
                  CONTENTS
  2 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .text         0000b738  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       00006f0c  0800b8e0  0800b8e0  0000c8e0  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .ARM.extab    00000000  080127ec  080127ec  00019430  2**0
                  CONTENTS
  6 .ARM          00000008  080127ec  080127ec  000137ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .preinit_array 00000000  080127f4  080127f4  00019430  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  8 .init_array   00000004  080127f4  080127f4  000137f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .fini_array   00000004  080127f8  080127f8  000137f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 10 .data         00000d2c  20003430  080127fc  00014430  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000408  20004160  08013528  00015160  2**3
                  ALLOC
 12 ._user_heap_stack 00001000  20004568  08013528  00015568  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  00019430  2**0
                  CONTENTS, READONLY
 14 .debug_info   000165a4  00000000  00000000  00019460  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003b96  00000000  00000000  0002fa04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_loclists 00006b94  00000000  00000000  0003359a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00000bd0  00000000  00000000  0003a130  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00000c51  00000000  00000000  0003ad00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0002aff3  00000000  00000000  0003b951  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   000155e9  00000000  00000000  00066944  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    000f8eb5  00000000  00000000  0007bf2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .comment      00000086  00000000  00000000  00174de2  2**0
                  CONTENTS, READONLY
 23 .debug_frame  00003048  00000000  00000000  00174e68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_line_str 0000006c  00000000  00000000  00177eb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20004160 	.word	0x20004160
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b8b0 	.word	0x0800b8b0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20004164 	.word	0x20004164
 80001cc:	0800b8b0 	.word	0x0800b8b0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b988 	b.w	8000ed0 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f824 	bl	8000c14 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__aeabi_d2ulz>:
 8000bd8:	b5d0      	push	{r4, r6, r7, lr}
 8000bda:	4b0c      	ldr	r3, [pc, #48]	@ (8000c0c <__aeabi_d2ulz+0x34>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	4606      	mov	r6, r0
 8000be0:	460f      	mov	r7, r1
 8000be2:	f7ff fd09 	bl	80005f8 <__aeabi_dmul>
 8000be6:	f000 f975 	bl	8000ed4 <__aeabi_d2uiz>
 8000bea:	4604      	mov	r4, r0
 8000bec:	f7ff fc8a 	bl	8000504 <__aeabi_ui2d>
 8000bf0:	4b07      	ldr	r3, [pc, #28]	@ (8000c10 <__aeabi_d2ulz+0x38>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	f7ff fd00 	bl	80005f8 <__aeabi_dmul>
 8000bf8:	4602      	mov	r2, r0
 8000bfa:	460b      	mov	r3, r1
 8000bfc:	4630      	mov	r0, r6
 8000bfe:	4639      	mov	r1, r7
 8000c00:	f7ff fb42 	bl	8000288 <__aeabi_dsub>
 8000c04:	f000 f966 	bl	8000ed4 <__aeabi_d2uiz>
 8000c08:	4621      	mov	r1, r4
 8000c0a:	bdd0      	pop	{r4, r6, r7, pc}
 8000c0c:	3df00000 	.word	0x3df00000
 8000c10:	41f00000 	.word	0x41f00000

08000c14 <__udivmoddi4>:
 8000c14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c18:	9d08      	ldr	r5, [sp, #32]
 8000c1a:	460c      	mov	r4, r1
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d14e      	bne.n	8000cbe <__udivmoddi4+0xaa>
 8000c20:	4694      	mov	ip, r2
 8000c22:	458c      	cmp	ip, r1
 8000c24:	4686      	mov	lr, r0
 8000c26:	fab2 f282 	clz	r2, r2
 8000c2a:	d962      	bls.n	8000cf2 <__udivmoddi4+0xde>
 8000c2c:	b14a      	cbz	r2, 8000c42 <__udivmoddi4+0x2e>
 8000c2e:	f1c2 0320 	rsb	r3, r2, #32
 8000c32:	4091      	lsls	r1, r2
 8000c34:	fa20 f303 	lsr.w	r3, r0, r3
 8000c38:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c3c:	4319      	orrs	r1, r3
 8000c3e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c42:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c46:	fa1f f68c 	uxth.w	r6, ip
 8000c4a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c4e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c52:	fb07 1114 	mls	r1, r7, r4, r1
 8000c56:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c5a:	fb04 f106 	mul.w	r1, r4, r6
 8000c5e:	4299      	cmp	r1, r3
 8000c60:	d90a      	bls.n	8000c78 <__udivmoddi4+0x64>
 8000c62:	eb1c 0303 	adds.w	r3, ip, r3
 8000c66:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c6a:	f080 8112 	bcs.w	8000e92 <__udivmoddi4+0x27e>
 8000c6e:	4299      	cmp	r1, r3
 8000c70:	f240 810f 	bls.w	8000e92 <__udivmoddi4+0x27e>
 8000c74:	3c02      	subs	r4, #2
 8000c76:	4463      	add	r3, ip
 8000c78:	1a59      	subs	r1, r3, r1
 8000c7a:	fa1f f38e 	uxth.w	r3, lr
 8000c7e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c82:	fb07 1110 	mls	r1, r7, r0, r1
 8000c86:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c8a:	fb00 f606 	mul.w	r6, r0, r6
 8000c8e:	429e      	cmp	r6, r3
 8000c90:	d90a      	bls.n	8000ca8 <__udivmoddi4+0x94>
 8000c92:	eb1c 0303 	adds.w	r3, ip, r3
 8000c96:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c9a:	f080 80fc 	bcs.w	8000e96 <__udivmoddi4+0x282>
 8000c9e:	429e      	cmp	r6, r3
 8000ca0:	f240 80f9 	bls.w	8000e96 <__udivmoddi4+0x282>
 8000ca4:	4463      	add	r3, ip
 8000ca6:	3802      	subs	r0, #2
 8000ca8:	1b9b      	subs	r3, r3, r6
 8000caa:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000cae:	2100      	movs	r1, #0
 8000cb0:	b11d      	cbz	r5, 8000cba <__udivmoddi4+0xa6>
 8000cb2:	40d3      	lsrs	r3, r2
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	e9c5 3200 	strd	r3, r2, [r5]
 8000cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cbe:	428b      	cmp	r3, r1
 8000cc0:	d905      	bls.n	8000cce <__udivmoddi4+0xba>
 8000cc2:	b10d      	cbz	r5, 8000cc8 <__udivmoddi4+0xb4>
 8000cc4:	e9c5 0100 	strd	r0, r1, [r5]
 8000cc8:	2100      	movs	r1, #0
 8000cca:	4608      	mov	r0, r1
 8000ccc:	e7f5      	b.n	8000cba <__udivmoddi4+0xa6>
 8000cce:	fab3 f183 	clz	r1, r3
 8000cd2:	2900      	cmp	r1, #0
 8000cd4:	d146      	bne.n	8000d64 <__udivmoddi4+0x150>
 8000cd6:	42a3      	cmp	r3, r4
 8000cd8:	d302      	bcc.n	8000ce0 <__udivmoddi4+0xcc>
 8000cda:	4290      	cmp	r0, r2
 8000cdc:	f0c0 80f0 	bcc.w	8000ec0 <__udivmoddi4+0x2ac>
 8000ce0:	1a86      	subs	r6, r0, r2
 8000ce2:	eb64 0303 	sbc.w	r3, r4, r3
 8000ce6:	2001      	movs	r0, #1
 8000ce8:	2d00      	cmp	r5, #0
 8000cea:	d0e6      	beq.n	8000cba <__udivmoddi4+0xa6>
 8000cec:	e9c5 6300 	strd	r6, r3, [r5]
 8000cf0:	e7e3      	b.n	8000cba <__udivmoddi4+0xa6>
 8000cf2:	2a00      	cmp	r2, #0
 8000cf4:	f040 8090 	bne.w	8000e18 <__udivmoddi4+0x204>
 8000cf8:	eba1 040c 	sub.w	r4, r1, ip
 8000cfc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d00:	fa1f f78c 	uxth.w	r7, ip
 8000d04:	2101      	movs	r1, #1
 8000d06:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d0a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d0e:	fb08 4416 	mls	r4, r8, r6, r4
 8000d12:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d16:	fb07 f006 	mul.w	r0, r7, r6
 8000d1a:	4298      	cmp	r0, r3
 8000d1c:	d908      	bls.n	8000d30 <__udivmoddi4+0x11c>
 8000d1e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d22:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d26:	d202      	bcs.n	8000d2e <__udivmoddi4+0x11a>
 8000d28:	4298      	cmp	r0, r3
 8000d2a:	f200 80cd 	bhi.w	8000ec8 <__udivmoddi4+0x2b4>
 8000d2e:	4626      	mov	r6, r4
 8000d30:	1a1c      	subs	r4, r3, r0
 8000d32:	fa1f f38e 	uxth.w	r3, lr
 8000d36:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d3a:	fb08 4410 	mls	r4, r8, r0, r4
 8000d3e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d42:	fb00 f707 	mul.w	r7, r0, r7
 8000d46:	429f      	cmp	r7, r3
 8000d48:	d908      	bls.n	8000d5c <__udivmoddi4+0x148>
 8000d4a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d4e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d52:	d202      	bcs.n	8000d5a <__udivmoddi4+0x146>
 8000d54:	429f      	cmp	r7, r3
 8000d56:	f200 80b0 	bhi.w	8000eba <__udivmoddi4+0x2a6>
 8000d5a:	4620      	mov	r0, r4
 8000d5c:	1bdb      	subs	r3, r3, r7
 8000d5e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d62:	e7a5      	b.n	8000cb0 <__udivmoddi4+0x9c>
 8000d64:	f1c1 0620 	rsb	r6, r1, #32
 8000d68:	408b      	lsls	r3, r1
 8000d6a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d6e:	431f      	orrs	r7, r3
 8000d70:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d74:	fa04 f301 	lsl.w	r3, r4, r1
 8000d78:	ea43 030c 	orr.w	r3, r3, ip
 8000d7c:	40f4      	lsrs	r4, r6
 8000d7e:	fa00 f801 	lsl.w	r8, r0, r1
 8000d82:	0c38      	lsrs	r0, r7, #16
 8000d84:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d88:	fbb4 fef0 	udiv	lr, r4, r0
 8000d8c:	fa1f fc87 	uxth.w	ip, r7
 8000d90:	fb00 441e 	mls	r4, r0, lr, r4
 8000d94:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d98:	fb0e f90c 	mul.w	r9, lr, ip
 8000d9c:	45a1      	cmp	r9, r4
 8000d9e:	fa02 f201 	lsl.w	r2, r2, r1
 8000da2:	d90a      	bls.n	8000dba <__udivmoddi4+0x1a6>
 8000da4:	193c      	adds	r4, r7, r4
 8000da6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000daa:	f080 8084 	bcs.w	8000eb6 <__udivmoddi4+0x2a2>
 8000dae:	45a1      	cmp	r9, r4
 8000db0:	f240 8081 	bls.w	8000eb6 <__udivmoddi4+0x2a2>
 8000db4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000db8:	443c      	add	r4, r7
 8000dba:	eba4 0409 	sub.w	r4, r4, r9
 8000dbe:	fa1f f983 	uxth.w	r9, r3
 8000dc2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dc6:	fb00 4413 	mls	r4, r0, r3, r4
 8000dca:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dce:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dd2:	45a4      	cmp	ip, r4
 8000dd4:	d907      	bls.n	8000de6 <__udivmoddi4+0x1d2>
 8000dd6:	193c      	adds	r4, r7, r4
 8000dd8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000ddc:	d267      	bcs.n	8000eae <__udivmoddi4+0x29a>
 8000dde:	45a4      	cmp	ip, r4
 8000de0:	d965      	bls.n	8000eae <__udivmoddi4+0x29a>
 8000de2:	3b02      	subs	r3, #2
 8000de4:	443c      	add	r4, r7
 8000de6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dea:	fba0 9302 	umull	r9, r3, r0, r2
 8000dee:	eba4 040c 	sub.w	r4, r4, ip
 8000df2:	429c      	cmp	r4, r3
 8000df4:	46ce      	mov	lr, r9
 8000df6:	469c      	mov	ip, r3
 8000df8:	d351      	bcc.n	8000e9e <__udivmoddi4+0x28a>
 8000dfa:	d04e      	beq.n	8000e9a <__udivmoddi4+0x286>
 8000dfc:	b155      	cbz	r5, 8000e14 <__udivmoddi4+0x200>
 8000dfe:	ebb8 030e 	subs.w	r3, r8, lr
 8000e02:	eb64 040c 	sbc.w	r4, r4, ip
 8000e06:	fa04 f606 	lsl.w	r6, r4, r6
 8000e0a:	40cb      	lsrs	r3, r1
 8000e0c:	431e      	orrs	r6, r3
 8000e0e:	40cc      	lsrs	r4, r1
 8000e10:	e9c5 6400 	strd	r6, r4, [r5]
 8000e14:	2100      	movs	r1, #0
 8000e16:	e750      	b.n	8000cba <__udivmoddi4+0xa6>
 8000e18:	f1c2 0320 	rsb	r3, r2, #32
 8000e1c:	fa20 f103 	lsr.w	r1, r0, r3
 8000e20:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e24:	fa24 f303 	lsr.w	r3, r4, r3
 8000e28:	4094      	lsls	r4, r2
 8000e2a:	430c      	orrs	r4, r1
 8000e2c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e30:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e34:	fa1f f78c 	uxth.w	r7, ip
 8000e38:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e3c:	fb08 3110 	mls	r1, r8, r0, r3
 8000e40:	0c23      	lsrs	r3, r4, #16
 8000e42:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e46:	fb00 f107 	mul.w	r1, r0, r7
 8000e4a:	4299      	cmp	r1, r3
 8000e4c:	d908      	bls.n	8000e60 <__udivmoddi4+0x24c>
 8000e4e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e52:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e56:	d22c      	bcs.n	8000eb2 <__udivmoddi4+0x29e>
 8000e58:	4299      	cmp	r1, r3
 8000e5a:	d92a      	bls.n	8000eb2 <__udivmoddi4+0x29e>
 8000e5c:	3802      	subs	r0, #2
 8000e5e:	4463      	add	r3, ip
 8000e60:	1a5b      	subs	r3, r3, r1
 8000e62:	b2a4      	uxth	r4, r4
 8000e64:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e68:	fb08 3311 	mls	r3, r8, r1, r3
 8000e6c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e70:	fb01 f307 	mul.w	r3, r1, r7
 8000e74:	42a3      	cmp	r3, r4
 8000e76:	d908      	bls.n	8000e8a <__udivmoddi4+0x276>
 8000e78:	eb1c 0404 	adds.w	r4, ip, r4
 8000e7c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e80:	d213      	bcs.n	8000eaa <__udivmoddi4+0x296>
 8000e82:	42a3      	cmp	r3, r4
 8000e84:	d911      	bls.n	8000eaa <__udivmoddi4+0x296>
 8000e86:	3902      	subs	r1, #2
 8000e88:	4464      	add	r4, ip
 8000e8a:	1ae4      	subs	r4, r4, r3
 8000e8c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e90:	e739      	b.n	8000d06 <__udivmoddi4+0xf2>
 8000e92:	4604      	mov	r4, r0
 8000e94:	e6f0      	b.n	8000c78 <__udivmoddi4+0x64>
 8000e96:	4608      	mov	r0, r1
 8000e98:	e706      	b.n	8000ca8 <__udivmoddi4+0x94>
 8000e9a:	45c8      	cmp	r8, r9
 8000e9c:	d2ae      	bcs.n	8000dfc <__udivmoddi4+0x1e8>
 8000e9e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ea2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000ea6:	3801      	subs	r0, #1
 8000ea8:	e7a8      	b.n	8000dfc <__udivmoddi4+0x1e8>
 8000eaa:	4631      	mov	r1, r6
 8000eac:	e7ed      	b.n	8000e8a <__udivmoddi4+0x276>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	e799      	b.n	8000de6 <__udivmoddi4+0x1d2>
 8000eb2:	4630      	mov	r0, r6
 8000eb4:	e7d4      	b.n	8000e60 <__udivmoddi4+0x24c>
 8000eb6:	46d6      	mov	lr, sl
 8000eb8:	e77f      	b.n	8000dba <__udivmoddi4+0x1a6>
 8000eba:	4463      	add	r3, ip
 8000ebc:	3802      	subs	r0, #2
 8000ebe:	e74d      	b.n	8000d5c <__udivmoddi4+0x148>
 8000ec0:	4606      	mov	r6, r0
 8000ec2:	4623      	mov	r3, r4
 8000ec4:	4608      	mov	r0, r1
 8000ec6:	e70f      	b.n	8000ce8 <__udivmoddi4+0xd4>
 8000ec8:	3e02      	subs	r6, #2
 8000eca:	4463      	add	r3, ip
 8000ecc:	e730      	b.n	8000d30 <__udivmoddi4+0x11c>
 8000ece:	bf00      	nop

08000ed0 <__aeabi_idiv0>:
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop

08000ed4 <__aeabi_d2uiz>:
 8000ed4:	004a      	lsls	r2, r1, #1
 8000ed6:	d211      	bcs.n	8000efc <__aeabi_d2uiz+0x28>
 8000ed8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000edc:	d211      	bcs.n	8000f02 <__aeabi_d2uiz+0x2e>
 8000ede:	d50d      	bpl.n	8000efc <__aeabi_d2uiz+0x28>
 8000ee0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ee4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ee8:	d40e      	bmi.n	8000f08 <__aeabi_d2uiz+0x34>
 8000eea:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000eee:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ef2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ef6:	fa23 f002 	lsr.w	r0, r3, r2
 8000efa:	4770      	bx	lr
 8000efc:	f04f 0000 	mov.w	r0, #0
 8000f00:	4770      	bx	lr
 8000f02:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000f06:	d102      	bne.n	8000f0e <__aeabi_d2uiz+0x3a>
 8000f08:	f04f 30ff 	mov.w	r0, #4294967295
 8000f0c:	4770      	bx	lr
 8000f0e:	f04f 0000 	mov.w	r0, #0
 8000f12:	4770      	bx	lr

08000f14 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f14:	b500      	push	{lr}
 8000f16:	b097      	sub	sp, #92	@ 0x5c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f18:	2244      	movs	r2, #68	@ 0x44
 8000f1a:	2100      	movs	r1, #0
 8000f1c:	a805      	add	r0, sp, #20
 8000f1e:	f008 fbca 	bl	80096b6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f22:	2214      	movs	r2, #20
 8000f24:	2100      	movs	r1, #0
 8000f26:	4668      	mov	r0, sp
 8000f28:	f008 fbc5 	bl	80096b6 <memset>

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000f2c:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000f30:	f000 fb60 	bl	80015f4 <HAL_PWREx_ControlVoltageScaling>
 8000f34:	b108      	cbz	r0, 8000f3a <SystemClock_Config+0x26>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f36:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f38:	e7fe      	b.n	8000f38 <SystemClock_Config+0x24>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000f3a:	2310      	movs	r3, #16
 8000f3c:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000f3e:	2360      	movs	r3, #96	@ 0x60
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000f40:	2201      	movs	r2, #1
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000f42:	930d      	str	r3, [sp, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f44:	2302      	movs	r3, #2
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000f46:	e9cd 200b 	strd	r2, r0, [sp, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000f4a:	e9cd 320f 	strd	r3, r2, [sp, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000f4e:	2028      	movs	r0, #40	@ 0x28
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000f50:	9211      	str	r2, [sp, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000f52:	2207      	movs	r2, #7
 8000f54:	e9cd 0212 	strd	r0, r2, [sp, #72]	@ 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f58:	a805      	add	r0, sp, #20
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000f5a:	e9cd 3314 	strd	r3, r3, [sp, #80]	@ 0x50
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f5e:	f000 fc0f 	bl	8001780 <HAL_RCC_OscConfig>
 8000f62:	b108      	cbz	r0, 8000f68 <SystemClock_Config+0x54>
 8000f64:	b672      	cpsid	i
  while (1)
 8000f66:	e7fe      	b.n	8000f66 <SystemClock_Config+0x52>
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f68:	e9cd 0002 	strd	r0, r0, [sp, #8]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f6c:	220f      	movs	r2, #15
 8000f6e:	2303      	movs	r3, #3
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f70:	9004      	str	r0, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000f72:	2104      	movs	r1, #4
 8000f74:	4668      	mov	r0, sp
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f76:	e9cd 2300 	strd	r2, r3, [sp]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000f7a:	f000 fe7f 	bl	8001c7c <HAL_RCC_ClockConfig>
 8000f7e:	b108      	cbz	r0, 8000f84 <SystemClock_Config+0x70>
 8000f80:	b672      	cpsid	i
  while (1)
 8000f82:	e7fe      	b.n	8000f82 <SystemClock_Config+0x6e>
}
 8000f84:	b017      	add	sp, #92	@ 0x5c
 8000f86:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08000f8c <MX_USART1_UART_Init>:
  huart1.Instance = USART1;
 8000f8c:	480b      	ldr	r0, [pc, #44]	@ (8000fbc <MX_USART1_UART_Init+0x30>)
  huart1.Init.BaudRate = 115200;
 8000f8e:	4a0c      	ldr	r2, [pc, #48]	@ (8000fc0 <MX_USART1_UART_Init+0x34>)
{
 8000f90:	b508      	push	{r3, lr}
  huart1.Init.BaudRate = 115200;
 8000f92:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8000f96:	e9c0 2300 	strd	r2, r3, [r0]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000f9a:	2300      	movs	r3, #0
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000f9c:	220c      	movs	r2, #12
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000f9e:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fa2:	e9c0 2305 	strd	r2, r3, [r0, #20]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000fa6:	e9c0 3307 	strd	r3, r3, [r0, #28]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000faa:	6103      	str	r3, [r0, #16]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000fac:	6243      	str	r3, [r0, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000fae:	f001 fd21 	bl	80029f4 <HAL_UART_Init>
 8000fb2:	b108      	cbz	r0, 8000fb8 <MX_USART1_UART_Init+0x2c>
 8000fb4:	b672      	cpsid	i
  while (1)
 8000fb6:	e7fe      	b.n	8000fb6 <MX_USART1_UART_Init+0x2a>
}
 8000fb8:	bd08      	pop	{r3, pc}
 8000fba:	bf00      	nop
 8000fbc:	2000417c 	.word	0x2000417c
 8000fc0:	40013800 	.word	0x40013800

08000fc4 <main>:
{
 8000fc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000fc8:	b0b4      	sub	sp, #208	@ 0xd0
  HAL_Init();
 8000fca:	f000 f983 	bl	80012d4 <HAL_Init>
  MX_USART1_UART_Init();
 8000fce:	f7ff ffdd 	bl	8000f8c <MX_USART1_UART_Init>
  SystemClock_Config();
 8000fd2:	f7ff ff9f 	bl	8000f14 <SystemClock_Config>
  MX_X_CUBE_AI_Init();
 8000fd6:	f002 ff59 	bl	8003e8c <MX_X_CUBE_AI_Init>
    HAL_UART_Receive(&huart1, rxBuffer, sizeof(rxBuffer), HAL_MAX_DELAY);
 8000fda:	4f1b      	ldr	r7, [pc, #108]	@ (8001048 <main+0x84>)
    LC_PRINT("\r\n");
 8000fdc:	f8df 8074 	ldr.w	r8, [pc, #116]	@ 8001054 <main+0x90>
    char *token = strtok((char *)rxBuffer, ",");
 8000fe0:	4e1a      	ldr	r6, [pc, #104]	@ (800104c <main+0x88>)
    int16_t *values = (int16_t*)malloc(41 * sizeof(int16_t));  // Dynamically allocate memory for parsed values
 8000fe2:	2052      	movs	r0, #82	@ 0x52
 8000fe4:	f002 fd88 	bl	8003af8 <__wrap_malloc>
    if (values == NULL) {
 8000fe8:	4605      	mov	r5, r0
 8000fea:	b948      	cbnz	r0, 8001000 <main+0x3c>
        LC_PRINT("Memory allocation failed.\r\n");
 8000fec:	4818      	ldr	r0, [pc, #96]	@ (8001050 <main+0x8c>)
 8000fee:	f002 fd71 	bl	8003ad4 <lc_print>
	  MX_X_CUBE_AI_Process(receivedData);
 8000ff2:	4628      	mov	r0, r5
 8000ff4:	f002 ff51 	bl	8003e9a <MX_X_CUBE_AI_Process>
    free(data);  // Free the dynamically allocated memory
 8000ff8:	4628      	mov	r0, r5
 8000ffa:	f002 fda5 	bl	8003b48 <__wrap_free>
 8000ffe:	e7f0      	b.n	8000fe2 <main+0x1e>
    HAL_UART_Receive(&huart1, rxBuffer, sizeof(rxBuffer), HAL_MAX_DELAY);
 8001000:	4669      	mov	r1, sp
 8001002:	f04f 33ff 	mov.w	r3, #4294967295
 8001006:	22cd      	movs	r2, #205	@ 0xcd
 8001008:	4638      	mov	r0, r7
 800100a:	f001 fc2e 	bl	800286a <HAL_UART_Receive>
    rxBuffer[204] = '\0';  // Ensure null-terminated string (205th byte is the last byte in rxBuffer)
 800100e:	2400      	movs	r4, #0
    LC_PRINT("\r\n");
 8001010:	4640      	mov	r0, r8
 8001012:	f002 fd5f 	bl	8003ad4 <lc_print>
    rxBuffer[204] = '\0';  // Ensure null-terminated string (205th byte is the last byte in rxBuffer)
 8001016:	f88d 40cc 	strb.w	r4, [sp, #204]	@ 0xcc
    char *token = strtok((char *)rxBuffer, ",");
 800101a:	4631      	mov	r1, r6
 800101c:	4668      	mov	r0, sp
        token = strtok(NULL, ",");
 800101e:	f008 fb65 	bl	80096ec <strtok>
    while (token != NULL) {
 8001022:	2800      	cmp	r0, #0
 8001024:	d0e5      	beq.n	8000ff2 <main+0x2e>
        int16_t value = (int16_t)strtol(token, NULL, 10);  // Convert string to int16_t (decimal)
 8001026:	220a      	movs	r2, #10
 8001028:	2100      	movs	r1, #0
 800102a:	f007 fd1d 	bl	8008a68 <strtol>
 800102e:	b200      	sxth	r0, r0
        if (value == 0xFF) {
 8001030:	28ff      	cmp	r0, #255	@ 0xff
 8001032:	d0de      	beq.n	8000ff2 <main+0x2e>
        if (numValues < 41) {
 8001034:	2c28      	cmp	r4, #40	@ 0x28
            values[numValues++] = value;  // Store value in the array
 8001036:	bfd8      	it	le
 8001038:	f825 0014 	strhle.w	r0, [r5, r4, lsl #1]
        token = strtok(NULL, ",");
 800103c:	4631      	mov	r1, r6
            values[numValues++] = value;  // Store value in the array
 800103e:	bfd8      	it	le
 8001040:	3401      	addle	r4, #1
        token = strtok(NULL, ",");
 8001042:	2000      	movs	r0, #0
 8001044:	e7eb      	b.n	800101e <main+0x5a>
 8001046:	bf00      	nop
 8001048:	2000417c 	.word	0x2000417c
 800104c:	0800c578 	.word	0x0800c578
 8001050:	0800c55c 	.word	0x0800c55c
 8001054:	0800c575 	.word	0x0800c575

08001058 <Error_Handler>:
 8001058:	b672      	cpsid	i
  while (1)
 800105a:	e7fe      	b.n	800105a <Error_Handler+0x2>

0800105c <HAL_MspInit>:

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800105c:	4b0a      	ldr	r3, [pc, #40]	@ (8001088 <HAL_MspInit+0x2c>)
 800105e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001060:	f042 0201 	orr.w	r2, r2, #1
 8001064:	661a      	str	r2, [r3, #96]	@ 0x60
 8001066:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
{
 8001068:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800106a:	f002 0201 	and.w	r2, r2, #1
 800106e:	9200      	str	r2, [sp, #0]
 8001070:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001072:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001074:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8001078:	659a      	str	r2, [r3, #88]	@ 0x58
 800107a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800107c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001080:	9301      	str	r3, [sp, #4]
 8001082:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001084:	b002      	add	sp, #8
 8001086:	4770      	bx	lr
 8001088:	40021000 	.word	0x40021000

0800108c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800108c:	b570      	push	{r4, r5, r6, lr}
 800108e:	b0aa      	sub	sp, #168	@ 0xa8
 8001090:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001092:	2214      	movs	r2, #20
 8001094:	2100      	movs	r1, #0
 8001096:	a803      	add	r0, sp, #12
 8001098:	f008 fb0d 	bl	80096b6 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800109c:	2288      	movs	r2, #136	@ 0x88
 800109e:	2100      	movs	r1, #0
 80010a0:	a808      	add	r0, sp, #32
 80010a2:	f008 fb08 	bl	80096b6 <memset>
  if(huart->Instance==USART1)
 80010a6:	6822      	ldr	r2, [r4, #0]
 80010a8:	4b1c      	ldr	r3, [pc, #112]	@ (800111c <HAL_UART_MspInit+0x90>)
 80010aa:	429a      	cmp	r2, r3
 80010ac:	d133      	bne.n	8001116 <HAL_UART_MspInit+0x8a>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80010ae:	2301      	movs	r3, #1
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010b0:	a808      	add	r0, sp, #32
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80010b2:	9308      	str	r3, [sp, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010b4:	f000 ffb6 	bl	8002024 <HAL_RCCEx_PeriphCLKConfig>
 80010b8:	b108      	cbz	r0, 80010be <HAL_UART_MspInit+0x32>
    {
      Error_Handler();
 80010ba:	f7ff ffcd 	bl	8001058 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80010be:	4b18      	ldr	r3, [pc, #96]	@ (8001120 <HAL_UART_MspInit+0x94>)
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
    HAL_GPIO_Init(ST_LINK_UART1_TX_GPIO_Port, &GPIO_InitStruct);
 80010c0:	4818      	ldr	r0, [pc, #96]	@ (8001124 <HAL_UART_MspInit+0x98>)
    __HAL_RCC_USART1_CLK_ENABLE();
 80010c2:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80010c4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80010c8:	661a      	str	r2, [r3, #96]	@ 0x60
 80010ca:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80010cc:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 80010d0:	9201      	str	r2, [sp, #4]
 80010d2:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010d4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80010d6:	f042 0202 	orr.w	r2, r2, #2
 80010da:	64da      	str	r2, [r3, #76]	@ 0x4c
 80010dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010de:	f003 0302 	and.w	r3, r3, #2
 80010e2:	9302      	str	r3, [sp, #8]
 80010e4:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010e6:	2602      	movs	r6, #2
 80010e8:	2340      	movs	r3, #64	@ 0x40
 80010ea:	e9cd 3603 	strd	r3, r6, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010ee:	2503      	movs	r5, #3
 80010f0:	2300      	movs	r3, #0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80010f2:	2407      	movs	r4, #7
    HAL_GPIO_Init(ST_LINK_UART1_TX_GPIO_Port, &GPIO_InitStruct);
 80010f4:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010f6:	e9cd 3505 	strd	r3, r5, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80010fa:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(ST_LINK_UART1_TX_GPIO_Port, &GPIO_InitStruct);
 80010fc:	f000 f98a 	bl	8001414 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ST_LINK_UART1_RX_Pin;
 8001100:	2380      	movs	r3, #128	@ 0x80
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001102:	e9cd 3603 	strd	r3, r6, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
    HAL_GPIO_Init(ST_LINK_UART1_RX_GPIO_Port, &GPIO_InitStruct);
 8001106:	4807      	ldr	r0, [pc, #28]	@ (8001124 <HAL_UART_MspInit+0x98>)
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001108:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800110a:	2301      	movs	r3, #1
    HAL_GPIO_Init(ST_LINK_UART1_RX_GPIO_Port, &GPIO_InitStruct);
 800110c:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800110e:	e9cd 3505 	strd	r3, r5, [sp, #20]
    HAL_GPIO_Init(ST_LINK_UART1_RX_GPIO_Port, &GPIO_InitStruct);
 8001112:	f000 f97f 	bl	8001414 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001116:	b02a      	add	sp, #168	@ 0xa8
 8001118:	bd70      	pop	{r4, r5, r6, pc}
 800111a:	bf00      	nop
 800111c:	40013800 	.word	0x40013800
 8001120:	40021000 	.word	0x40021000
 8001124:	48000400 	.word	0x48000400

08001128 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001128:	e7fe      	b.n	8001128 <NMI_Handler>

0800112a <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800112a:	e7fe      	b.n	800112a <HardFault_Handler>

0800112c <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800112c:	e7fe      	b.n	800112c <MemManage_Handler>

0800112e <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800112e:	e7fe      	b.n	800112e <BusFault_Handler>

08001130 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001130:	e7fe      	b.n	8001130 <UsageFault_Handler>

08001132 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001132:	4770      	bx	lr

08001134 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
 8001134:	4770      	bx	lr

08001136 <PendSV_Handler>:
}

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
 8001136:	4770      	bx	lr

08001138 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001138:	f000 b8dc 	b.w	80012f4 <HAL_IncTick>

0800113c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800113c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 800113e:	2020      	movs	r0, #32
 8001140:	f000 fa44 	bl	80015cc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 8001144:	2040      	movs	r0, #64	@ 0x40
 8001146:	f000 fa41 	bl	80015cc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 800114a:	2080      	movs	r0, #128	@ 0x80
 800114c:	f000 fa3e 	bl	80015cc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001150:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 8001154:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8001158:	f000 ba38 	b.w	80015cc <HAL_GPIO_EXTI_IRQHandler>

0800115c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800115c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI0_Pin);
 800115e:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8001162:	f000 fa33 	bl	80015cc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 8001166:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800116a:	f000 fa2f 	bl	80015cc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_EXTI13_Pin);
 800116e:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001172:	f000 fa2b 	bl	80015cc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 8001176:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800117a:	f000 fa27 	bl	80015cc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800117e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 8001182:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8001186:	f000 ba21 	b.w	80015cc <HAL_GPIO_EXTI_IRQHandler>

0800118a <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 800118a:	2001      	movs	r0, #1
 800118c:	4770      	bx	lr

0800118e <_kill>:

int _kill(int pid, int sig)
{
 800118e:	b508      	push	{r3, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001190:	f008 fb62 	bl	8009858 <__errno>
 8001194:	2316      	movs	r3, #22
 8001196:	6003      	str	r3, [r0, #0]
  return -1;
}
 8001198:	f04f 30ff 	mov.w	r0, #4294967295
 800119c:	bd08      	pop	{r3, pc}

0800119e <_exit>:

void _exit (int status)
{
 800119e:	b508      	push	{r3, lr}
  errno = EINVAL;
 80011a0:	f008 fb5a 	bl	8009858 <__errno>
 80011a4:	2316      	movs	r3, #22
 80011a6:	6003      	str	r3, [r0, #0]
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
 80011a8:	e7fe      	b.n	80011a8 <_exit+0xa>

080011aa <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80011aa:	b570      	push	{r4, r5, r6, lr}
 80011ac:	460d      	mov	r5, r1
 80011ae:	4614      	mov	r4, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011b0:	460e      	mov	r6, r1
 80011b2:	1b73      	subs	r3, r6, r5
 80011b4:	429c      	cmp	r4, r3
 80011b6:	dc01      	bgt.n	80011bc <_read+0x12>
  {
    *ptr++ = __io_getchar();
  }

  return len;
}
 80011b8:	4620      	mov	r0, r4
 80011ba:	bd70      	pop	{r4, r5, r6, pc}
    *ptr++ = __io_getchar();
 80011bc:	f3af 8000 	nop.w
 80011c0:	f806 0b01 	strb.w	r0, [r6], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011c4:	e7f5      	b.n	80011b2 <_read+0x8>

080011c6 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 80011c6:	f04f 30ff 	mov.w	r0, #4294967295
 80011ca:	4770      	bx	lr

080011cc <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 80011cc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80011d0:	604b      	str	r3, [r1, #4]
  return 0;
}
 80011d2:	2000      	movs	r0, #0
 80011d4:	4770      	bx	lr

080011d6 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 80011d6:	2001      	movs	r0, #1
 80011d8:	4770      	bx	lr

080011da <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 80011da:	2000      	movs	r0, #0
 80011dc:	4770      	bx	lr
	...

080011e0 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011e0:	4a0b      	ldr	r2, [pc, #44]	@ (8001210 <_sbrk+0x30>)
 80011e2:	6811      	ldr	r1, [r2, #0]
{
 80011e4:	b510      	push	{r4, lr}
 80011e6:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 80011e8:	b909      	cbnz	r1, 80011ee <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 80011ea:	490a      	ldr	r1, [pc, #40]	@ (8001214 <_sbrk+0x34>)
 80011ec:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011ee:	6810      	ldr	r0, [r2, #0]
 80011f0:	4909      	ldr	r1, [pc, #36]	@ (8001218 <_sbrk+0x38>)
 80011f2:	4c0a      	ldr	r4, [pc, #40]	@ (800121c <_sbrk+0x3c>)
 80011f4:	4403      	add	r3, r0
 80011f6:	1b09      	subs	r1, r1, r4
 80011f8:	428b      	cmp	r3, r1
 80011fa:	d906      	bls.n	800120a <_sbrk+0x2a>
  {
    errno = ENOMEM;
 80011fc:	f008 fb2c 	bl	8009858 <__errno>
 8001200:	230c      	movs	r3, #12
 8001202:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8001204:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8001208:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 800120a:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 800120c:	e7fc      	b.n	8001208 <_sbrk+0x28>
 800120e:	bf00      	nop
 8001210:	20004204 	.word	0x20004204
 8001214:	20004568 	.word	0x20004568
 8001218:	20018000 	.word	0x20018000
 800121c:	00000800 	.word	0x00000800

08001220 <SystemInit>:
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001220:	4a03      	ldr	r2, [pc, #12]	@ (8001230 <SystemInit+0x10>)
 8001222:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8001226:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800122a:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 800122e:	4770      	bx	lr
 8001230:	e000ed00 	.word	0xe000ed00

08001234 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001234:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800126c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001238:	f7ff fff2 	bl	8001220 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800123c:	480c      	ldr	r0, [pc, #48]	@ (8001270 <LoopForever+0x6>)
  ldr r1, =_edata
 800123e:	490d      	ldr	r1, [pc, #52]	@ (8001274 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001240:	4a0d      	ldr	r2, [pc, #52]	@ (8001278 <LoopForever+0xe>)
  movs r3, #0
 8001242:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001244:	e002      	b.n	800124c <LoopCopyDataInit>

08001246 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001246:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001248:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800124a:	3304      	adds	r3, #4

0800124c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800124c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800124e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001250:	d3f9      	bcc.n	8001246 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001252:	4a0a      	ldr	r2, [pc, #40]	@ (800127c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001254:	4c0a      	ldr	r4, [pc, #40]	@ (8001280 <LoopForever+0x16>)
  movs r3, #0
 8001256:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001258:	e001      	b.n	800125e <LoopFillZerobss>

0800125a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800125a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800125c:	3204      	adds	r2, #4

0800125e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800125e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001260:	d3fb      	bcc.n	800125a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001262:	f008 faff 	bl	8009864 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001266:	f7ff fead 	bl	8000fc4 <main>

0800126a <LoopForever>:

LoopForever:
    b LoopForever
 800126a:	e7fe      	b.n	800126a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800126c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001270:	20003430 	.word	0x20003430
  ldr r1, =_edata
 8001274:	2000415c 	.word	0x2000415c
  ldr r2, =_sidata
 8001278:	080127fc 	.word	0x080127fc
  ldr r2, =_sbss
 800127c:	20004160 	.word	0x20004160
  ldr r4, =_ebss
 8001280:	20004568 	.word	0x20004568

08001284 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001284:	e7fe      	b.n	8001284 <ADC1_2_IRQHandler>
	...

08001288 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001288:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800128a:	4b0f      	ldr	r3, [pc, #60]	@ (80012c8 <HAL_InitTick+0x40>)
 800128c:	781a      	ldrb	r2, [r3, #0]
{
 800128e:	4605      	mov	r5, r0
  if ((uint32_t)uwTickFreq != 0U)
 8001290:	b90a      	cbnz	r2, 8001296 <HAL_InitTick+0xe>
        status = HAL_ERROR;
      }
    }
    else
    {
      status = HAL_ERROR;
 8001292:	2001      	movs	r0, #1
    status = HAL_ERROR;
  }

  /* Return function status */
  return status;
}
 8001294:	bd38      	pop	{r3, r4, r5, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001296:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800129a:	fbb3 f3f2 	udiv	r3, r3, r2
 800129e:	4a0b      	ldr	r2, [pc, #44]	@ (80012cc <HAL_InitTick+0x44>)
 80012a0:	6810      	ldr	r0, [r2, #0]
 80012a2:	fbb0 f0f3 	udiv	r0, r0, r3
 80012a6:	f000 f8a1 	bl	80013ec <HAL_SYSTICK_Config>
 80012aa:	4604      	mov	r4, r0
 80012ac:	2800      	cmp	r0, #0
 80012ae:	d1f0      	bne.n	8001292 <HAL_InitTick+0xa>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012b0:	2d0f      	cmp	r5, #15
 80012b2:	d8ee      	bhi.n	8001292 <HAL_InitTick+0xa>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012b4:	4602      	mov	r2, r0
 80012b6:	4629      	mov	r1, r5
 80012b8:	f04f 30ff 	mov.w	r0, #4294967295
 80012bc:	f000 f864 	bl	8001388 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80012c0:	4b03      	ldr	r3, [pc, #12]	@ (80012d0 <HAL_InitTick+0x48>)
 80012c2:	4620      	mov	r0, r4
 80012c4:	601d      	str	r5, [r3, #0]
  return status;
 80012c6:	e7e5      	b.n	8001294 <HAL_InitTick+0xc>
 80012c8:	20003434 	.word	0x20003434
 80012cc:	20003430 	.word	0x20003430
 80012d0:	20003438 	.word	0x20003438

080012d4 <HAL_Init>:
{
 80012d4:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012d6:	2003      	movs	r0, #3
 80012d8:	f000 f844 	bl	8001364 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80012dc:	2000      	movs	r0, #0
 80012de:	f7ff ffd3 	bl	8001288 <HAL_InitTick>
 80012e2:	4604      	mov	r4, r0
 80012e4:	b918      	cbnz	r0, 80012ee <HAL_Init+0x1a>
    HAL_MspInit();
 80012e6:	f7ff feb9 	bl	800105c <HAL_MspInit>
}
 80012ea:	4620      	mov	r0, r4
 80012ec:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 80012ee:	2401      	movs	r4, #1
 80012f0:	e7fb      	b.n	80012ea <HAL_Init+0x16>
	...

080012f4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 80012f4:	4a03      	ldr	r2, [pc, #12]	@ (8001304 <HAL_IncTick+0x10>)
 80012f6:	4b04      	ldr	r3, [pc, #16]	@ (8001308 <HAL_IncTick+0x14>)
 80012f8:	6811      	ldr	r1, [r2, #0]
 80012fa:	781b      	ldrb	r3, [r3, #0]
 80012fc:	440b      	add	r3, r1
 80012fe:	6013      	str	r3, [r2, #0]
}
 8001300:	4770      	bx	lr
 8001302:	bf00      	nop
 8001304:	20004208 	.word	0x20004208
 8001308:	20003434 	.word	0x20003434

0800130c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800130c:	4b01      	ldr	r3, [pc, #4]	@ (8001314 <HAL_GetTick+0x8>)
 800130e:	6818      	ldr	r0, [r3, #0]
}
 8001310:	4770      	bx	lr
 8001312:	bf00      	nop
 8001314:	20004208 	.word	0x20004208

08001318 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001318:	b538      	push	{r3, r4, r5, lr}
 800131a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800131c:	f7ff fff6 	bl	800130c <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001320:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)uwTickFreq;
 8001322:	bf1c      	itt	ne
 8001324:	4b05      	ldrne	r3, [pc, #20]	@ (800133c <HAL_Delay+0x24>)
 8001326:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8001328:	4605      	mov	r5, r0
    wait += (uint32_t)uwTickFreq;
 800132a:	bf18      	it	ne
 800132c:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800132e:	f7ff ffed 	bl	800130c <HAL_GetTick>
 8001332:	1b43      	subs	r3, r0, r5
 8001334:	42a3      	cmp	r3, r4
 8001336:	d3fa      	bcc.n	800132e <HAL_Delay+0x16>
  {
  }
}
 8001338:	bd38      	pop	{r3, r4, r5, pc}
 800133a:	bf00      	nop
 800133c:	20003434 	.word	0x20003434

08001340 <HAL_GetHalVersion>:
  * @retval version : 0xXYZR (8bits for each decimal, R for RC)
  */
uint32_t HAL_GetHalVersion(void)
{
  return STM32L4XX_HAL_VERSION;
}
 8001340:	4800      	ldr	r0, [pc, #0]	@ (8001344 <HAL_GetHalVersion+0x4>)
 8001342:	4770      	bx	lr
 8001344:	010d0400 	.word	0x010d0400

08001348 <HAL_GetREVID>:
  * @brief  Return the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
  return((DBGMCU->IDCODE & DBGMCU_IDCODE_REV_ID) >> 16);
 8001348:	4b01      	ldr	r3, [pc, #4]	@ (8001350 <HAL_GetREVID+0x8>)
 800134a:	6818      	ldr	r0, [r3, #0]
}
 800134c:	0c00      	lsrs	r0, r0, #16
 800134e:	4770      	bx	lr
 8001350:	e0042000 	.word	0xe0042000

08001354 <HAL_GetDEVID>:
  * @brief  Return the device identifier.
  * @retval Device identifier
  */
uint32_t HAL_GetDEVID(void)
{
  return(DBGMCU->IDCODE & DBGMCU_IDCODE_DEV_ID);
 8001354:	4b02      	ldr	r3, [pc, #8]	@ (8001360 <HAL_GetDEVID+0xc>)
 8001356:	6818      	ldr	r0, [r3, #0]
}
 8001358:	f3c0 000b 	ubfx	r0, r0, #0, #12
 800135c:	4770      	bx	lr
 800135e:	bf00      	nop
 8001360:	e0042000 	.word	0xe0042000

08001364 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001364:	4907      	ldr	r1, [pc, #28]	@ (8001384 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8001366:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001368:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800136c:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800136e:	0412      	lsls	r2, r2, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001370:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001374:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001376:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001378:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800137c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8001380:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001382:	4770      	bx	lr
 8001384:	e000ed00 	.word	0xe000ed00

08001388 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001388:	4b16      	ldr	r3, [pc, #88]	@ (80013e4 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800138a:	b530      	push	{r4, r5, lr}
 800138c:	68dc      	ldr	r4, [r3, #12]
 800138e:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001392:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001396:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001398:	2b04      	cmp	r3, #4
 800139a:	bf28      	it	cs
 800139c:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800139e:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013a0:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013a4:	bf8c      	ite	hi
 80013a6:	3c03      	subhi	r4, #3
 80013a8:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013aa:	fa05 f303 	lsl.w	r3, r5, r3
 80013ae:	ea21 0303 	bic.w	r3, r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013b2:	40a5      	lsls	r5, r4
 80013b4:	ea22 0205 	bic.w	r2, r2, r5
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013b8:	40a3      	lsls	r3, r4
  if ((int32_t)(IRQn) >= 0)
 80013ba:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013bc:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013c0:	bfac      	ite	ge
 80013c2:	f100 4060 	addge.w	r0, r0, #3758096384	@ 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013c6:	4a08      	ldrlt	r2, [pc, #32]	@ (80013e8 <HAL_NVIC_SetPriority+0x60>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013c8:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013cc:	bfb8      	it	lt
 80013ce:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013d2:	b2db      	uxtb	r3, r3
 80013d4:	bfaa      	itet	ge
 80013d6:	f500 4061 	addge.w	r0, r0, #57600	@ 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013da:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013dc:	f880 3300 	strbge.w	r3, [r0, #768]	@ 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80013e0:	bd30      	pop	{r4, r5, pc}
 80013e2:	bf00      	nop
 80013e4:	e000ed00 	.word	0xe000ed00
 80013e8:	e000ed14 	.word	0xe000ed14

080013ec <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013ec:	3801      	subs	r0, #1
 80013ee:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80013f2:	d20b      	bcs.n	800140c <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013f4:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013f8:	4a05      	ldr	r2, [pc, #20]	@ (8001410 <HAL_SYSTICK_Config+0x24>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013fa:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013fc:	21f0      	movs	r1, #240	@ 0xf0
 80013fe:	f882 1023 	strb.w	r1, [r2, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001402:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001404:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001406:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001408:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800140a:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800140c:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800140e:	4770      	bx	lr
 8001410:	e000ed00 	.word	0xe000ed00

08001414 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001414:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001418:	f8df 91a8 	ldr.w	r9, [pc, #424]	@ 80015c4 <HAL_GPIO_Init+0x1b0>
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800141c:	4c67      	ldr	r4, [pc, #412]	@ (80015bc <HAL_GPIO_Init+0x1a8>)
  uint32_t position = 0x00u;
 800141e:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001420:	680a      	ldr	r2, [r1, #0]
 8001422:	fa32 f503 	lsrs.w	r5, r2, r3
 8001426:	d102      	bne.n	800142e <HAL_GPIO_Init+0x1a>
      }
    }

    position++;
  }
}
 8001428:	b003      	add	sp, #12
 800142a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800142e:	2501      	movs	r5, #1
 8001430:	fa05 f803 	lsl.w	r8, r5, r3
    if (iocurrent != 0x00u)
 8001434:	ea18 0202 	ands.w	r2, r8, r2
 8001438:	f000 80b1 	beq.w	800159e <HAL_GPIO_Init+0x18a>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800143c:	684d      	ldr	r5, [r1, #4]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800143e:	2703      	movs	r7, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001440:	f005 0603 	and.w	r6, r5, #3
 8001444:	ea4f 0e43 	mov.w	lr, r3, lsl #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001448:	fa07 fc0e 	lsl.w	ip, r7, lr
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800144c:	1e77      	subs	r7, r6, #1
 800144e:	2f01      	cmp	r7, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001450:	ea6f 0c0c 	mvn.w	ip, ip
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001454:	d834      	bhi.n	80014c0 <HAL_GPIO_Init+0xac>
        temp = GPIOx->OSPEEDR;
 8001456:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001458:	ea07 0a0c 	and.w	sl, r7, ip
        temp |= (GPIO_Init->Speed << (position * 2u));
 800145c:	68cf      	ldr	r7, [r1, #12]
 800145e:	fa07 f70e 	lsl.w	r7, r7, lr
 8001462:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 8001466:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8001468:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800146a:	ea27 0808 	bic.w	r8, r7, r8
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800146e:	f3c5 1700 	ubfx	r7, r5, #4, #1
 8001472:	409f      	lsls	r7, r3
 8001474:	ea47 0708 	orr.w	r7, r7, r8
        GPIOx->OTYPER = temp;
 8001478:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 800147a:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800147c:	ea07 080c 	and.w	r8, r7, ip
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001480:	688f      	ldr	r7, [r1, #8]
 8001482:	fa07 f70e 	lsl.w	r7, r7, lr
 8001486:	ea47 0708 	orr.w	r7, r7, r8
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800148a:	2e02      	cmp	r6, #2
        GPIOx->PUPDR = temp;
 800148c:	60c7      	str	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800148e:	d122      	bne.n	80014d6 <HAL_GPIO_Init+0xc2>
        temp = GPIOx->AFR[position >> 3u];
 8001490:	ea4f 08d3 	mov.w	r8, r3, lsr #3
 8001494:	eb00 0888 	add.w	r8, r0, r8, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001498:	f003 0a07 	and.w	sl, r3, #7
        temp = GPIOx->AFR[position >> 3u];
 800149c:	f8d8 7020 	ldr.w	r7, [r8, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80014a0:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 80014a4:	f04f 0b0f 	mov.w	fp, #15
 80014a8:	fa0b fb0a 	lsl.w	fp, fp, sl
 80014ac:	ea27 0b0b 	bic.w	fp, r7, fp
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80014b0:	690f      	ldr	r7, [r1, #16]
 80014b2:	fa07 f70a 	lsl.w	r7, r7, sl
 80014b6:	ea47 070b 	orr.w	r7, r7, fp
        GPIOx->AFR[position >> 3u] = temp;
 80014ba:	f8c8 7020 	str.w	r7, [r8, #32]
 80014be:	e00a      	b.n	80014d6 <HAL_GPIO_Init+0xc2>
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80014c0:	2e03      	cmp	r6, #3
 80014c2:	d1da      	bne.n	800147a <HAL_GPIO_Init+0x66>
        temp = GPIOx->ASCR;
 80014c4:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80014c6:	ea27 0808 	bic.w	r8, r7, r8
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80014ca:	f3c5 07c0 	ubfx	r7, r5, #3, #1
 80014ce:	409f      	lsls	r7, r3
 80014d0:	ea47 0708 	orr.w	r7, r7, r8
        GPIOx->ASCR = temp;
 80014d4:	62c7      	str	r7, [r0, #44]	@ 0x2c
      temp = GPIOx->MODER;
 80014d6:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80014d8:	fa06 f60e 	lsl.w	r6, r6, lr
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80014dc:	ea07 070c 	and.w	r7, r7, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80014e0:	433e      	orrs	r6, r7
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80014e2:	f415 3f40 	tst.w	r5, #196608	@ 0x30000
      GPIOx->MODER = temp;
 80014e6:	6006      	str	r6, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80014e8:	d059      	beq.n	800159e <HAL_GPIO_Init+0x18a>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014ea:	f8d9 6060 	ldr.w	r6, [r9, #96]	@ 0x60
 80014ee:	f046 0601 	orr.w	r6, r6, #1
 80014f2:	f8c9 6060 	str.w	r6, [r9, #96]	@ 0x60
 80014f6:	f8d9 6060 	ldr.w	r6, [r9, #96]	@ 0x60
 80014fa:	f023 0703 	bic.w	r7, r3, #3
 80014fe:	f107 4780 	add.w	r7, r7, #1073741824	@ 0x40000000
 8001502:	f006 0601 	and.w	r6, r6, #1
 8001506:	f507 3780 	add.w	r7, r7, #65536	@ 0x10000
 800150a:	9601      	str	r6, [sp, #4]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800150c:	f003 0c03 	and.w	ip, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001510:	9e01      	ldr	r6, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2u];
 8001512:	68be      	ldr	r6, [r7, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001514:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8001518:	f04f 0e0f 	mov.w	lr, #15
 800151c:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001520:	f1b0 4f90 	cmp.w	r0, #1207959552	@ 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001524:	ea26 0e0e 	bic.w	lr, r6, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001528:	d03b      	beq.n	80015a2 <HAL_GPIO_Init+0x18e>
 800152a:	4e25      	ldr	r6, [pc, #148]	@ (80015c0 <HAL_GPIO_Init+0x1ac>)
 800152c:	42b0      	cmp	r0, r6
 800152e:	d03a      	beq.n	80015a6 <HAL_GPIO_Init+0x192>
 8001530:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8001534:	42b0      	cmp	r0, r6
 8001536:	d038      	beq.n	80015aa <HAL_GPIO_Init+0x196>
 8001538:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 800153c:	42b0      	cmp	r0, r6
 800153e:	d036      	beq.n	80015ae <HAL_GPIO_Init+0x19a>
 8001540:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8001544:	42b0      	cmp	r0, r6
 8001546:	d034      	beq.n	80015b2 <HAL_GPIO_Init+0x19e>
 8001548:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 800154c:	42b0      	cmp	r0, r6
 800154e:	d032      	beq.n	80015b6 <HAL_GPIO_Init+0x1a2>
 8001550:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8001554:	42b0      	cmp	r0, r6
 8001556:	bf14      	ite	ne
 8001558:	2607      	movne	r6, #7
 800155a:	2606      	moveq	r6, #6
 800155c:	fa06 f60c 	lsl.w	r6, r6, ip
 8001560:	ea46 060e 	orr.w	r6, r6, lr
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001564:	60be      	str	r6, [r7, #8]
        temp = EXTI->RTSR1;
 8001566:	68a6      	ldr	r6, [r4, #8]
        temp &= ~(iocurrent);
 8001568:	43d7      	mvns	r7, r2
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800156a:	f415 1f80 	tst.w	r5, #1048576	@ 0x100000
        temp &= ~(iocurrent);
 800156e:	bf0c      	ite	eq
 8001570:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8001572:	4316      	orrne	r6, r2
        EXTI->RTSR1 = temp;
 8001574:	60a6      	str	r6, [r4, #8]
        temp = EXTI->FTSR1;
 8001576:	68e6      	ldr	r6, [r4, #12]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001578:	f415 1f00 	tst.w	r5, #2097152	@ 0x200000
        temp &= ~(iocurrent);
 800157c:	bf0c      	ite	eq
 800157e:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8001580:	4316      	orrne	r6, r2
        EXTI->FTSR1 = temp;
 8001582:	60e6      	str	r6, [r4, #12]
        temp = EXTI->EMR1;
 8001584:	6866      	ldr	r6, [r4, #4]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001586:	f415 3f00 	tst.w	r5, #131072	@ 0x20000
        temp &= ~(iocurrent);
 800158a:	bf0c      	ite	eq
 800158c:	403e      	andeq	r6, r7
          temp |= iocurrent;
 800158e:	4316      	orrne	r6, r2
        EXTI->EMR1 = temp;
 8001590:	6066      	str	r6, [r4, #4]
        temp = EXTI->IMR1;
 8001592:	6826      	ldr	r6, [r4, #0]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001594:	03ed      	lsls	r5, r5, #15
        temp &= ~(iocurrent);
 8001596:	bf54      	ite	pl
 8001598:	403e      	andpl	r6, r7
          temp |= iocurrent;
 800159a:	4316      	orrmi	r6, r2
        EXTI->IMR1 = temp;
 800159c:	6026      	str	r6, [r4, #0]
    position++;
 800159e:	3301      	adds	r3, #1
 80015a0:	e73e      	b.n	8001420 <HAL_GPIO_Init+0xc>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80015a2:	2600      	movs	r6, #0
 80015a4:	e7da      	b.n	800155c <HAL_GPIO_Init+0x148>
 80015a6:	2601      	movs	r6, #1
 80015a8:	e7d8      	b.n	800155c <HAL_GPIO_Init+0x148>
 80015aa:	2602      	movs	r6, #2
 80015ac:	e7d6      	b.n	800155c <HAL_GPIO_Init+0x148>
 80015ae:	2603      	movs	r6, #3
 80015b0:	e7d4      	b.n	800155c <HAL_GPIO_Init+0x148>
 80015b2:	2604      	movs	r6, #4
 80015b4:	e7d2      	b.n	800155c <HAL_GPIO_Init+0x148>
 80015b6:	2605      	movs	r6, #5
 80015b8:	e7d0      	b.n	800155c <HAL_GPIO_Init+0x148>
 80015ba:	bf00      	nop
 80015bc:	40010400 	.word	0x40010400
 80015c0:	48000400 	.word	0x48000400
 80015c4:	40021000 	.word	0x40021000

080015c8 <HAL_GPIO_EXTI_Callback>:
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80015c8:	4770      	bx	lr
	...

080015cc <HAL_GPIO_EXTI_IRQHandler>:
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80015cc:	4a04      	ldr	r2, [pc, #16]	@ (80015e0 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 80015ce:	6951      	ldr	r1, [r2, #20]
 80015d0:	4201      	tst	r1, r0
{
 80015d2:	b508      	push	{r3, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80015d4:	d002      	beq.n	80015dc <HAL_GPIO_EXTI_IRQHandler+0x10>
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80015d6:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80015d8:	f7ff fff6 	bl	80015c8 <HAL_GPIO_EXTI_Callback>
}
 80015dc:	bd08      	pop	{r3, pc}
 80015de:	bf00      	nop
 80015e0:	40010400 	.word	0x40010400

080015e4 <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80015e4:	4b02      	ldr	r3, [pc, #8]	@ (80015f0 <HAL_PWREx_GetVoltageRange+0xc>)
 80015e6:	6818      	ldr	r0, [r3, #0]
#endif
}
 80015e8:	f400 60c0 	and.w	r0, r0, #1536	@ 0x600
 80015ec:	4770      	bx	lr
 80015ee:	bf00      	nop
 80015f0:	40007000 	.word	0x40007000

080015f4 <HAL_PWREx_ControlVoltageScaling>:
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80015f4:	4a17      	ldr	r2, [pc, #92]	@ (8001654 <HAL_PWREx_ControlVoltageScaling+0x60>)
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80015f6:	6813      	ldr	r3, [r2, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80015f8:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80015fc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001600:	d11b      	bne.n	800163a <HAL_PWREx_ControlVoltageScaling+0x46>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001602:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001606:	d01b      	beq.n	8001640 <HAL_PWREx_ControlVoltageScaling+0x4c>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001608:	6813      	ldr	r3, [r2, #0]
 800160a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800160e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001612:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001614:	4b10      	ldr	r3, [pc, #64]	@ (8001658 <HAL_PWREx_ControlVoltageScaling+0x64>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	2132      	movs	r1, #50	@ 0x32
 800161a:	434b      	muls	r3, r1
 800161c:	490f      	ldr	r1, [pc, #60]	@ (800165c <HAL_PWREx_ControlVoltageScaling+0x68>)
 800161e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001622:	3301      	adds	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001624:	6951      	ldr	r1, [r2, #20]
 8001626:	0549      	lsls	r1, r1, #21
 8001628:	d500      	bpl.n	800162c <HAL_PWREx_ControlVoltageScaling+0x38>
 800162a:	b923      	cbnz	r3, 8001636 <HAL_PWREx_ControlVoltageScaling+0x42>
      {
        wait_loop_index--;
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800162c:	6953      	ldr	r3, [r2, #20]
 800162e:	055b      	lsls	r3, r3, #21
 8001630:	d506      	bpl.n	8001640 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        return HAL_TIMEOUT;
 8001632:	2003      	movs	r0, #3
    }
  }
#endif

  return HAL_OK;
}
 8001634:	4770      	bx	lr
        wait_loop_index--;
 8001636:	3b01      	subs	r3, #1
 8001638:	e7f4      	b.n	8001624 <HAL_PWREx_ControlVoltageScaling+0x30>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800163a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800163e:	d101      	bne.n	8001644 <HAL_PWREx_ControlVoltageScaling+0x50>
  return HAL_OK;
 8001640:	2000      	movs	r0, #0
 8001642:	4770      	bx	lr
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001644:	6813      	ldr	r3, [r2, #0]
 8001646:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800164a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800164e:	6013      	str	r3, [r2, #0]
 8001650:	e7f6      	b.n	8001640 <HAL_PWREx_ControlVoltageScaling+0x4c>
 8001652:	bf00      	nop
 8001654:	40007000 	.word	0x40007000
 8001658:	20003430 	.word	0x20003430
 800165c:	000f4240 	.word	0x000f4240

08001660 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001660:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001662:	4d1e      	ldr	r5, [pc, #120]	@ (80016dc <RCC_SetFlashLatencyFromMSIRange+0x7c>)
 8001664:	6dab      	ldr	r3, [r5, #88]	@ 0x58
 8001666:	00da      	lsls	r2, r3, #3
{
 8001668:	4604      	mov	r4, r0
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800166a:	d518      	bpl.n	800169e <RCC_SetFlashLatencyFromMSIRange+0x3e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800166c:	f7ff ffba 	bl	80015e4 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001670:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 8001674:	d123      	bne.n	80016be <RCC_SetFlashLatencyFromMSIRange+0x5e>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001676:	2c80      	cmp	r4, #128	@ 0x80
 8001678:	d929      	bls.n	80016ce <RCC_SetFlashLatencyFromMSIRange+0x6e>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800167a:	2ca1      	cmp	r4, #161	@ 0xa1
 800167c:	bf34      	ite	cc
 800167e:	2401      	movcc	r4, #1
 8001680:	2402      	movcs	r4, #2
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001682:	4917      	ldr	r1, [pc, #92]	@ (80016e0 <RCC_SetFlashLatencyFromMSIRange+0x80>)
 8001684:	680a      	ldr	r2, [r1, #0]
 8001686:	f022 0207 	bic.w	r2, r2, #7
 800168a:	4322      	orrs	r2, r4
 800168c:	600a      	str	r2, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800168e:	6808      	ldr	r0, [r1, #0]
 8001690:	f000 0007 	and.w	r0, r0, #7
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 8001694:	1b00      	subs	r0, r0, r4
 8001696:	bf18      	it	ne
 8001698:	2001      	movne	r0, #1
 800169a:	b003      	add	sp, #12
 800169c:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 800169e:	6dab      	ldr	r3, [r5, #88]	@ 0x58
 80016a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80016a4:	65ab      	str	r3, [r5, #88]	@ 0x58
 80016a6:	6dab      	ldr	r3, [r5, #88]	@ 0x58
 80016a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016ac:	9301      	str	r3, [sp, #4]
 80016ae:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 80016b0:	f7ff ff98 	bl	80015e4 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 80016b4:	6dab      	ldr	r3, [r5, #88]	@ 0x58
 80016b6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80016ba:	65ab      	str	r3, [r5, #88]	@ 0x58
 80016bc:	e7d8      	b.n	8001670 <RCC_SetFlashLatencyFromMSIRange+0x10>
    if(msirange > RCC_MSIRANGE_8)
 80016be:	2c80      	cmp	r4, #128	@ 0x80
 80016c0:	d807      	bhi.n	80016d2 <RCC_SetFlashLatencyFromMSIRange+0x72>
      if(msirange == RCC_MSIRANGE_8)
 80016c2:	d008      	beq.n	80016d6 <RCC_SetFlashLatencyFromMSIRange+0x76>
      else if(msirange == RCC_MSIRANGE_7)
 80016c4:	f1a4 0370 	sub.w	r3, r4, #112	@ 0x70
 80016c8:	425c      	negs	r4, r3
 80016ca:	415c      	adcs	r4, r3
 80016cc:	e7d9      	b.n	8001682 <RCC_SetFlashLatencyFromMSIRange+0x22>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80016ce:	2400      	movs	r4, #0
 80016d0:	e7d7      	b.n	8001682 <RCC_SetFlashLatencyFromMSIRange+0x22>
      latency = FLASH_LATENCY_3; /* 3WS */
 80016d2:	2403      	movs	r4, #3
 80016d4:	e7d5      	b.n	8001682 <RCC_SetFlashLatencyFromMSIRange+0x22>
        latency = FLASH_LATENCY_2; /* 2WS */
 80016d6:	2402      	movs	r4, #2
 80016d8:	e7d3      	b.n	8001682 <RCC_SetFlashLatencyFromMSIRange+0x22>
 80016da:	bf00      	nop
 80016dc:	40021000 	.word	0x40021000
 80016e0:	40022000 	.word	0x40022000

080016e4 <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80016e4:	4b22      	ldr	r3, [pc, #136]	@ (8001770 <HAL_RCC_GetSysClockFreq+0x8c>)
 80016e6:	689a      	ldr	r2, [r3, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80016e8:	68d9      	ldr	r1, [r3, #12]
  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80016ea:	f012 020c 	ands.w	r2, r2, #12
 80016ee:	d005      	beq.n	80016fc <HAL_RCC_GetSysClockFreq+0x18>
 80016f0:	2a0c      	cmp	r2, #12
 80016f2:	d115      	bne.n	8001720 <HAL_RCC_GetSysClockFreq+0x3c>
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80016f4:	f001 0103 	and.w	r1, r1, #3
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80016f8:	2901      	cmp	r1, #1
 80016fa:	d118      	bne.n	800172e <HAL_RCC_GetSysClockFreq+0x4a>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80016fc:	6819      	ldr	r1, [r3, #0]
    msirange = MSIRangeTable[msirange];
 80016fe:	481d      	ldr	r0, [pc, #116]	@ (8001774 <HAL_RCC_GetSysClockFreq+0x90>)
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001700:	0709      	lsls	r1, r1, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001702:	bf55      	itete	pl
 8001704:	f8d3 1094 	ldrpl.w	r1, [r3, #148]	@ 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001708:	6819      	ldrmi	r1, [r3, #0]
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800170a:	f3c1 2103 	ubfxpl	r1, r1, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800170e:	f3c1 1103 	ubfxmi	r1, r1, #4, #4
    msirange = MSIRangeTable[msirange];
 8001712:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001716:	b34a      	cbz	r2, 800176c <HAL_RCC_GetSysClockFreq+0x88>
  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001718:	2a0c      	cmp	r2, #12
 800171a:	d009      	beq.n	8001730 <HAL_RCC_GetSysClockFreq+0x4c>
 800171c:	2000      	movs	r0, #0
  return sysclockfreq;
 800171e:	4770      	bx	lr
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001720:	2a04      	cmp	r2, #4
 8001722:	d022      	beq.n	800176a <HAL_RCC_GetSysClockFreq+0x86>
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001724:	2a08      	cmp	r2, #8
 8001726:	4814      	ldr	r0, [pc, #80]	@ (8001778 <HAL_RCC_GetSysClockFreq+0x94>)
 8001728:	bf18      	it	ne
 800172a:	2000      	movne	r0, #0
 800172c:	4770      	bx	lr
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800172e:	2000      	movs	r0, #0
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001730:	68da      	ldr	r2, [r3, #12]
 8001732:	f002 0203 	and.w	r2, r2, #3
    switch (pllsource)
 8001736:	2a02      	cmp	r2, #2
 8001738:	d015      	beq.n	8001766 <HAL_RCC_GetSysClockFreq+0x82>
 800173a:	490f      	ldr	r1, [pc, #60]	@ (8001778 <HAL_RCC_GetSysClockFreq+0x94>)
 800173c:	2a03      	cmp	r2, #3
 800173e:	bf08      	it	eq
 8001740:	4608      	moveq	r0, r1
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001742:	68d9      	ldr	r1, [r3, #12]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001744:	68da      	ldr	r2, [r3, #12]
 8001746:	f3c2 2206 	ubfx	r2, r2, #8, #7
 800174a:	4342      	muls	r2, r0
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800174c:	68d8      	ldr	r0, [r3, #12]
 800174e:	f3c0 6041 	ubfx	r0, r0, #25, #2
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001752:	f3c1 1102 	ubfx	r1, r1, #4, #3
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001756:	3001      	adds	r0, #1
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001758:	3101      	adds	r1, #1
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800175a:	0040      	lsls	r0, r0, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800175c:	fbb2 f2f1 	udiv	r2, r2, r1
    sysclockfreq = pllvco / pllr;
 8001760:	fbb2 f0f0 	udiv	r0, r2, r0
 8001764:	4770      	bx	lr
      pllvco = HSI_VALUE;
 8001766:	4805      	ldr	r0, [pc, #20]	@ (800177c <HAL_RCC_GetSysClockFreq+0x98>)
 8001768:	e7eb      	b.n	8001742 <HAL_RCC_GetSysClockFreq+0x5e>
    sysclockfreq = HSI_VALUE;
 800176a:	4804      	ldr	r0, [pc, #16]	@ (800177c <HAL_RCC_GetSysClockFreq+0x98>)
}
 800176c:	4770      	bx	lr
 800176e:	bf00      	nop
 8001770:	40021000 	.word	0x40021000
 8001774:	0800c57c 	.word	0x0800c57c
 8001778:	007a1200 	.word	0x007a1200
 800177c:	00f42400 	.word	0x00f42400

08001780 <HAL_RCC_OscConfig>:
{
 8001780:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(RCC_OscInitStruct == NULL)
 8001784:	4605      	mov	r5, r0
 8001786:	b918      	cbnz	r0, 8001790 <HAL_RCC_OscConfig+0x10>
    return HAL_ERROR;
 8001788:	2001      	movs	r0, #1
}
 800178a:	b003      	add	sp, #12
 800178c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001790:	4c92      	ldr	r4, [pc, #584]	@ (80019dc <HAL_RCC_OscConfig+0x25c>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001792:	6803      	ldr	r3, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001794:	68a6      	ldr	r6, [r4, #8]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001796:	68e7      	ldr	r7, [r4, #12]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001798:	06d8      	lsls	r0, r3, #27
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800179a:	f006 060c 	and.w	r6, r6, #12
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800179e:	f007 0703 	and.w	r7, r7, #3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80017a2:	d53d      	bpl.n	8001820 <HAL_RCC_OscConfig+0xa0>
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80017a4:	b11e      	cbz	r6, 80017ae <HAL_RCC_OscConfig+0x2e>
 80017a6:	2e0c      	cmp	r6, #12
 80017a8:	d166      	bne.n	8001878 <HAL_RCC_OscConfig+0xf8>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80017aa:	2f01      	cmp	r7, #1
 80017ac:	d164      	bne.n	8001878 <HAL_RCC_OscConfig+0xf8>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80017ae:	6823      	ldr	r3, [r4, #0]
 80017b0:	0799      	lsls	r1, r3, #30
 80017b2:	d502      	bpl.n	80017ba <HAL_RCC_OscConfig+0x3a>
 80017b4:	69ab      	ldr	r3, [r5, #24]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d0e6      	beq.n	8001788 <HAL_RCC_OscConfig+0x8>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80017ba:	6823      	ldr	r3, [r4, #0]
 80017bc:	6a28      	ldr	r0, [r5, #32]
 80017be:	071a      	lsls	r2, r3, #28
 80017c0:	bf56      	itet	pl
 80017c2:	f8d4 3094 	ldrpl.w	r3, [r4, #148]	@ 0x94
 80017c6:	6823      	ldrmi	r3, [r4, #0]
 80017c8:	091b      	lsrpl	r3, r3, #4
 80017ca:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80017ce:	4298      	cmp	r0, r3
 80017d0:	d93b      	bls.n	800184a <HAL_RCC_OscConfig+0xca>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80017d2:	f7ff ff45 	bl	8001660 <RCC_SetFlashLatencyFromMSIRange>
 80017d6:	2800      	cmp	r0, #0
 80017d8:	d1d6      	bne.n	8001788 <HAL_RCC_OscConfig+0x8>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80017da:	6823      	ldr	r3, [r4, #0]
 80017dc:	f043 0308 	orr.w	r3, r3, #8
 80017e0:	6023      	str	r3, [r4, #0]
 80017e2:	6823      	ldr	r3, [r4, #0]
 80017e4:	6a2a      	ldr	r2, [r5, #32]
 80017e6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80017ea:	4313      	orrs	r3, r2
 80017ec:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80017ee:	6863      	ldr	r3, [r4, #4]
 80017f0:	69ea      	ldr	r2, [r5, #28]
 80017f2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80017f6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80017fa:	6063      	str	r3, [r4, #4]
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80017fc:	f7ff ff72 	bl	80016e4 <HAL_RCC_GetSysClockFreq>
 8001800:	68a3      	ldr	r3, [r4, #8]
 8001802:	4a77      	ldr	r2, [pc, #476]	@ (80019e0 <HAL_RCC_OscConfig+0x260>)
 8001804:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001808:	5cd3      	ldrb	r3, [r2, r3]
 800180a:	f003 031f 	and.w	r3, r3, #31
 800180e:	40d8      	lsrs	r0, r3
 8001810:	4b74      	ldr	r3, [pc, #464]	@ (80019e4 <HAL_RCC_OscConfig+0x264>)
 8001812:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick(uwTickPrio);
 8001814:	4b74      	ldr	r3, [pc, #464]	@ (80019e8 <HAL_RCC_OscConfig+0x268>)
 8001816:	6818      	ldr	r0, [r3, #0]
 8001818:	f7ff fd36 	bl	8001288 <HAL_InitTick>
        if(status != HAL_OK)
 800181c:	2800      	cmp	r0, #0
 800181e:	d1b4      	bne.n	800178a <HAL_RCC_OscConfig+0xa>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001820:	682b      	ldr	r3, [r5, #0]
 8001822:	07d9      	lsls	r1, r3, #31
 8001824:	d45f      	bmi.n	80018e6 <HAL_RCC_OscConfig+0x166>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001826:	682b      	ldr	r3, [r5, #0]
 8001828:	079a      	lsls	r2, r3, #30
 800182a:	f100 809e 	bmi.w	800196a <HAL_RCC_OscConfig+0x1ea>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800182e:	682b      	ldr	r3, [r5, #0]
 8001830:	0719      	lsls	r1, r3, #28
 8001832:	f100 80db 	bmi.w	80019ec <HAL_RCC_OscConfig+0x26c>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001836:	682b      	ldr	r3, [r5, #0]
 8001838:	075a      	lsls	r2, r3, #29
 800183a:	f100 8101 	bmi.w	8001a40 <HAL_RCC_OscConfig+0x2c0>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800183e:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 8001840:	2b00      	cmp	r3, #0
 8001842:	f040 816a 	bne.w	8001b1a <HAL_RCC_OscConfig+0x39a>
  return HAL_OK;
 8001846:	2000      	movs	r0, #0
 8001848:	e79f      	b.n	800178a <HAL_RCC_OscConfig+0xa>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800184a:	6823      	ldr	r3, [r4, #0]
 800184c:	f043 0308 	orr.w	r3, r3, #8
 8001850:	6023      	str	r3, [r4, #0]
 8001852:	6823      	ldr	r3, [r4, #0]
 8001854:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001858:	4303      	orrs	r3, r0
 800185a:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800185c:	6863      	ldr	r3, [r4, #4]
 800185e:	69ea      	ldr	r2, [r5, #28]
 8001860:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8001864:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001868:	6063      	str	r3, [r4, #4]
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800186a:	2e00      	cmp	r6, #0
 800186c:	d1c6      	bne.n	80017fc <HAL_RCC_OscConfig+0x7c>
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800186e:	f7ff fef7 	bl	8001660 <RCC_SetFlashLatencyFromMSIRange>
 8001872:	2800      	cmp	r0, #0
 8001874:	d0c2      	beq.n	80017fc <HAL_RCC_OscConfig+0x7c>
 8001876:	e787      	b.n	8001788 <HAL_RCC_OscConfig+0x8>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001878:	69ab      	ldr	r3, [r5, #24]
 800187a:	b31b      	cbz	r3, 80018c4 <HAL_RCC_OscConfig+0x144>
        __HAL_RCC_MSI_ENABLE();
 800187c:	6823      	ldr	r3, [r4, #0]
 800187e:	f043 0301 	orr.w	r3, r3, #1
 8001882:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001884:	f7ff fd42 	bl	800130c <HAL_GetTick>
 8001888:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800188a:	6823      	ldr	r3, [r4, #0]
 800188c:	079b      	lsls	r3, r3, #30
 800188e:	d511      	bpl.n	80018b4 <HAL_RCC_OscConfig+0x134>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001890:	6823      	ldr	r3, [r4, #0]
 8001892:	f043 0308 	orr.w	r3, r3, #8
 8001896:	6023      	str	r3, [r4, #0]
 8001898:	6823      	ldr	r3, [r4, #0]
 800189a:	6a2a      	ldr	r2, [r5, #32]
 800189c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80018a0:	4313      	orrs	r3, r2
 80018a2:	6023      	str	r3, [r4, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80018a4:	6863      	ldr	r3, [r4, #4]
 80018a6:	69ea      	ldr	r2, [r5, #28]
 80018a8:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80018ac:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80018b0:	6063      	str	r3, [r4, #4]
 80018b2:	e7b5      	b.n	8001820 <HAL_RCC_OscConfig+0xa0>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80018b4:	f7ff fd2a 	bl	800130c <HAL_GetTick>
 80018b8:	eba0 0008 	sub.w	r0, r0, r8
 80018bc:	2802      	cmp	r0, #2
 80018be:	d9e4      	bls.n	800188a <HAL_RCC_OscConfig+0x10a>
            return HAL_TIMEOUT;
 80018c0:	2003      	movs	r0, #3
 80018c2:	e762      	b.n	800178a <HAL_RCC_OscConfig+0xa>
        __HAL_RCC_MSI_DISABLE();
 80018c4:	6823      	ldr	r3, [r4, #0]
 80018c6:	f023 0301 	bic.w	r3, r3, #1
 80018ca:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80018cc:	f7ff fd1e 	bl	800130c <HAL_GetTick>
 80018d0:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80018d2:	6823      	ldr	r3, [r4, #0]
 80018d4:	0798      	lsls	r0, r3, #30
 80018d6:	d5a3      	bpl.n	8001820 <HAL_RCC_OscConfig+0xa0>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80018d8:	f7ff fd18 	bl	800130c <HAL_GetTick>
 80018dc:	eba0 0008 	sub.w	r0, r0, r8
 80018e0:	2802      	cmp	r0, #2
 80018e2:	d9f6      	bls.n	80018d2 <HAL_RCC_OscConfig+0x152>
 80018e4:	e7ec      	b.n	80018c0 <HAL_RCC_OscConfig+0x140>
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80018e6:	2e08      	cmp	r6, #8
 80018e8:	d003      	beq.n	80018f2 <HAL_RCC_OscConfig+0x172>
 80018ea:	2e0c      	cmp	r6, #12
 80018ec:	d108      	bne.n	8001900 <HAL_RCC_OscConfig+0x180>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80018ee:	2f03      	cmp	r7, #3
 80018f0:	d106      	bne.n	8001900 <HAL_RCC_OscConfig+0x180>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018f2:	6823      	ldr	r3, [r4, #0]
 80018f4:	039b      	lsls	r3, r3, #14
 80018f6:	d596      	bpl.n	8001826 <HAL_RCC_OscConfig+0xa6>
 80018f8:	686b      	ldr	r3, [r5, #4]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d193      	bne.n	8001826 <HAL_RCC_OscConfig+0xa6>
 80018fe:	e743      	b.n	8001788 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001900:	686b      	ldr	r3, [r5, #4]
 8001902:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001906:	d110      	bne.n	800192a <HAL_RCC_OscConfig+0x1aa>
 8001908:	6823      	ldr	r3, [r4, #0]
 800190a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800190e:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001910:	f7ff fcfc 	bl	800130c <HAL_GetTick>
 8001914:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001916:	6823      	ldr	r3, [r4, #0]
 8001918:	0398      	lsls	r0, r3, #14
 800191a:	d484      	bmi.n	8001826 <HAL_RCC_OscConfig+0xa6>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800191c:	f7ff fcf6 	bl	800130c <HAL_GetTick>
 8001920:	eba0 0008 	sub.w	r0, r0, r8
 8001924:	2864      	cmp	r0, #100	@ 0x64
 8001926:	d9f6      	bls.n	8001916 <HAL_RCC_OscConfig+0x196>
 8001928:	e7ca      	b.n	80018c0 <HAL_RCC_OscConfig+0x140>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800192a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800192e:	d104      	bne.n	800193a <HAL_RCC_OscConfig+0x1ba>
 8001930:	6823      	ldr	r3, [r4, #0]
 8001932:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001936:	6023      	str	r3, [r4, #0]
 8001938:	e7e6      	b.n	8001908 <HAL_RCC_OscConfig+0x188>
 800193a:	6822      	ldr	r2, [r4, #0]
 800193c:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8001940:	6022      	str	r2, [r4, #0]
 8001942:	6822      	ldr	r2, [r4, #0]
 8001944:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8001948:	6022      	str	r2, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800194a:	2b00      	cmp	r3, #0
 800194c:	d1e0      	bne.n	8001910 <HAL_RCC_OscConfig+0x190>
        tickstart = HAL_GetTick();
 800194e:	f7ff fcdd 	bl	800130c <HAL_GetTick>
 8001952:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001954:	6823      	ldr	r3, [r4, #0]
 8001956:	0399      	lsls	r1, r3, #14
 8001958:	f57f af65 	bpl.w	8001826 <HAL_RCC_OscConfig+0xa6>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800195c:	f7ff fcd6 	bl	800130c <HAL_GetTick>
 8001960:	eba0 0008 	sub.w	r0, r0, r8
 8001964:	2864      	cmp	r0, #100	@ 0x64
 8001966:	d9f5      	bls.n	8001954 <HAL_RCC_OscConfig+0x1d4>
 8001968:	e7aa      	b.n	80018c0 <HAL_RCC_OscConfig+0x140>
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800196a:	2e04      	cmp	r6, #4
 800196c:	d003      	beq.n	8001976 <HAL_RCC_OscConfig+0x1f6>
 800196e:	2e0c      	cmp	r6, #12
 8001970:	d110      	bne.n	8001994 <HAL_RCC_OscConfig+0x214>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001972:	2f02      	cmp	r7, #2
 8001974:	d10e      	bne.n	8001994 <HAL_RCC_OscConfig+0x214>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001976:	6823      	ldr	r3, [r4, #0]
 8001978:	055a      	lsls	r2, r3, #21
 800197a:	d503      	bpl.n	8001984 <HAL_RCC_OscConfig+0x204>
 800197c:	68eb      	ldr	r3, [r5, #12]
 800197e:	2b00      	cmp	r3, #0
 8001980:	f43f af02 	beq.w	8001788 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001984:	6863      	ldr	r3, [r4, #4]
 8001986:	692a      	ldr	r2, [r5, #16]
 8001988:	f023 53f8 	bic.w	r3, r3, #520093696	@ 0x1f000000
 800198c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001990:	6063      	str	r3, [r4, #4]
 8001992:	e74c      	b.n	800182e <HAL_RCC_OscConfig+0xae>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001994:	68eb      	ldr	r3, [r5, #12]
 8001996:	b17b      	cbz	r3, 80019b8 <HAL_RCC_OscConfig+0x238>
        __HAL_RCC_HSI_ENABLE();
 8001998:	6823      	ldr	r3, [r4, #0]
 800199a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800199e:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80019a0:	f7ff fcb4 	bl	800130c <HAL_GetTick>
 80019a4:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80019a6:	6823      	ldr	r3, [r4, #0]
 80019a8:	055b      	lsls	r3, r3, #21
 80019aa:	d4eb      	bmi.n	8001984 <HAL_RCC_OscConfig+0x204>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019ac:	f7ff fcae 	bl	800130c <HAL_GetTick>
 80019b0:	1bc0      	subs	r0, r0, r7
 80019b2:	2802      	cmp	r0, #2
 80019b4:	d9f7      	bls.n	80019a6 <HAL_RCC_OscConfig+0x226>
 80019b6:	e783      	b.n	80018c0 <HAL_RCC_OscConfig+0x140>
        __HAL_RCC_HSI_DISABLE();
 80019b8:	6823      	ldr	r3, [r4, #0]
 80019ba:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80019be:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80019c0:	f7ff fca4 	bl	800130c <HAL_GetTick>
 80019c4:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80019c6:	6823      	ldr	r3, [r4, #0]
 80019c8:	0558      	lsls	r0, r3, #21
 80019ca:	f57f af30 	bpl.w	800182e <HAL_RCC_OscConfig+0xae>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019ce:	f7ff fc9d 	bl	800130c <HAL_GetTick>
 80019d2:	1bc0      	subs	r0, r0, r7
 80019d4:	2802      	cmp	r0, #2
 80019d6:	d9f6      	bls.n	80019c6 <HAL_RCC_OscConfig+0x246>
 80019d8:	e772      	b.n	80018c0 <HAL_RCC_OscConfig+0x140>
 80019da:	bf00      	nop
 80019dc:	40021000 	.word	0x40021000
 80019e0:	0800c5b4 	.word	0x0800c5b4
 80019e4:	20003430 	.word	0x20003430
 80019e8:	20003438 	.word	0x20003438
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80019ec:	696b      	ldr	r3, [r5, #20]
 80019ee:	b19b      	cbz	r3, 8001a18 <HAL_RCC_OscConfig+0x298>
      __HAL_RCC_LSI_ENABLE();
 80019f0:	f8d4 3094 	ldr.w	r3, [r4, #148]	@ 0x94
 80019f4:	f043 0301 	orr.w	r3, r3, #1
 80019f8:	f8c4 3094 	str.w	r3, [r4, #148]	@ 0x94
      tickstart = HAL_GetTick();
 80019fc:	f7ff fc86 	bl	800130c <HAL_GetTick>
 8001a00:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001a02:	f8d4 3094 	ldr.w	r3, [r4, #148]	@ 0x94
 8001a06:	079b      	lsls	r3, r3, #30
 8001a08:	f53f af15 	bmi.w	8001836 <HAL_RCC_OscConfig+0xb6>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a0c:	f7ff fc7e 	bl	800130c <HAL_GetTick>
 8001a10:	1bc0      	subs	r0, r0, r7
 8001a12:	2802      	cmp	r0, #2
 8001a14:	d9f5      	bls.n	8001a02 <HAL_RCC_OscConfig+0x282>
 8001a16:	e753      	b.n	80018c0 <HAL_RCC_OscConfig+0x140>
      __HAL_RCC_LSI_DISABLE();
 8001a18:	f8d4 3094 	ldr.w	r3, [r4, #148]	@ 0x94
 8001a1c:	f023 0301 	bic.w	r3, r3, #1
 8001a20:	f8c4 3094 	str.w	r3, [r4, #148]	@ 0x94
      tickstart = HAL_GetTick();
 8001a24:	f7ff fc72 	bl	800130c <HAL_GetTick>
 8001a28:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001a2a:	f8d4 3094 	ldr.w	r3, [r4, #148]	@ 0x94
 8001a2e:	0798      	lsls	r0, r3, #30
 8001a30:	f57f af01 	bpl.w	8001836 <HAL_RCC_OscConfig+0xb6>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a34:	f7ff fc6a 	bl	800130c <HAL_GetTick>
 8001a38:	1bc0      	subs	r0, r0, r7
 8001a3a:	2802      	cmp	r0, #2
 8001a3c:	d9f5      	bls.n	8001a2a <HAL_RCC_OscConfig+0x2aa>
 8001a3e:	e73f      	b.n	80018c0 <HAL_RCC_OscConfig+0x140>
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001a40:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8001a42:	00d9      	lsls	r1, r3, #3
 8001a44:	d429      	bmi.n	8001a9a <HAL_RCC_OscConfig+0x31a>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a46:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8001a48:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a4c:	65a3      	str	r3, [r4, #88]	@ 0x58
 8001a4e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8001a50:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a54:	9301      	str	r3, [sp, #4]
 8001a56:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001a58:	f04f 0801 	mov.w	r8, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a5c:	4f84      	ldr	r7, [pc, #528]	@ (8001c70 <HAL_RCC_OscConfig+0x4f0>)
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	05da      	lsls	r2, r3, #23
 8001a62:	d51d      	bpl.n	8001aa0 <HAL_RCC_OscConfig+0x320>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a64:	68ab      	ldr	r3, [r5, #8]
 8001a66:	2b01      	cmp	r3, #1
 8001a68:	d12b      	bne.n	8001ac2 <HAL_RCC_OscConfig+0x342>
 8001a6a:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 8001a6e:	f043 0301 	orr.w	r3, r3, #1
 8001a72:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
      tickstart = HAL_GetTick();
 8001a76:	f7ff fc49 	bl	800130c <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a7a:	f241 3988 	movw	r9, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 8001a7e:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a80:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 8001a84:	0798      	lsls	r0, r3, #30
 8001a86:	d542      	bpl.n	8001b0e <HAL_RCC_OscConfig+0x38e>
    if(pwrclkchanged == SET)
 8001a88:	f1b8 0f00 	cmp.w	r8, #0
 8001a8c:	f43f aed7 	beq.w	800183e <HAL_RCC_OscConfig+0xbe>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a90:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8001a92:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001a96:	65a3      	str	r3, [r4, #88]	@ 0x58
 8001a98:	e6d1      	b.n	800183e <HAL_RCC_OscConfig+0xbe>
    FlagStatus       pwrclkchanged = RESET;
 8001a9a:	f04f 0800 	mov.w	r8, #0
 8001a9e:	e7dd      	b.n	8001a5c <HAL_RCC_OscConfig+0x2dc>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001aa6:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8001aa8:	f7ff fc30 	bl	800130c <HAL_GetTick>
 8001aac:	4681      	mov	r9, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	05db      	lsls	r3, r3, #23
 8001ab2:	d4d7      	bmi.n	8001a64 <HAL_RCC_OscConfig+0x2e4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ab4:	f7ff fc2a 	bl	800130c <HAL_GetTick>
 8001ab8:	eba0 0009 	sub.w	r0, r0, r9
 8001abc:	2802      	cmp	r0, #2
 8001abe:	d9f6      	bls.n	8001aae <HAL_RCC_OscConfig+0x32e>
 8001ac0:	e6fe      	b.n	80018c0 <HAL_RCC_OscConfig+0x140>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ac2:	2b05      	cmp	r3, #5
 8001ac4:	d106      	bne.n	8001ad4 <HAL_RCC_OscConfig+0x354>
 8001ac6:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 8001aca:	f043 0304 	orr.w	r3, r3, #4
 8001ace:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
 8001ad2:	e7ca      	b.n	8001a6a <HAL_RCC_OscConfig+0x2ea>
 8001ad4:	f8d4 2090 	ldr.w	r2, [r4, #144]	@ 0x90
 8001ad8:	f022 0201 	bic.w	r2, r2, #1
 8001adc:	f8c4 2090 	str.w	r2, [r4, #144]	@ 0x90
 8001ae0:	f8d4 2090 	ldr.w	r2, [r4, #144]	@ 0x90
 8001ae4:	f022 0204 	bic.w	r2, r2, #4
 8001ae8:	f8c4 2090 	str.w	r2, [r4, #144]	@ 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d1c2      	bne.n	8001a76 <HAL_RCC_OscConfig+0x2f6>
      tickstart = HAL_GetTick();
 8001af0:	f7ff fc0c 	bl	800130c <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001af4:	f241 3988 	movw	r9, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 8001af8:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001afa:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 8001afe:	0799      	lsls	r1, r3, #30
 8001b00:	d5c2      	bpl.n	8001a88 <HAL_RCC_OscConfig+0x308>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b02:	f7ff fc03 	bl	800130c <HAL_GetTick>
 8001b06:	1bc0      	subs	r0, r0, r7
 8001b08:	4548      	cmp	r0, r9
 8001b0a:	d9f6      	bls.n	8001afa <HAL_RCC_OscConfig+0x37a>
 8001b0c:	e6d8      	b.n	80018c0 <HAL_RCC_OscConfig+0x140>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b0e:	f7ff fbfd 	bl	800130c <HAL_GetTick>
 8001b12:	1bc0      	subs	r0, r0, r7
 8001b14:	4548      	cmp	r0, r9
 8001b16:	d9b3      	bls.n	8001a80 <HAL_RCC_OscConfig+0x300>
 8001b18:	e6d2      	b.n	80018c0 <HAL_RCC_OscConfig+0x140>
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001b1a:	2b02      	cmp	r3, #2
 8001b1c:	f040 808f 	bne.w	8001c3e <HAL_RCC_OscConfig+0x4be>
      pll_config = RCC->PLLCFGR;
 8001b20:	68e3      	ldr	r3, [r4, #12]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b22:	6aea      	ldr	r2, [r5, #44]	@ 0x2c
 8001b24:	f003 0103 	and.w	r1, r3, #3
 8001b28:	4291      	cmp	r1, r2
 8001b2a:	d124      	bne.n	8001b76 <HAL_RCC_OscConfig+0x3f6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001b2c:	6b29      	ldr	r1, [r5, #48]	@ 0x30
 8001b2e:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001b32:	3901      	subs	r1, #1
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b34:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 8001b38:	d11d      	bne.n	8001b76 <HAL_RCC_OscConfig+0x3f6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b3a:	6b69      	ldr	r1, [r5, #52]	@ 0x34
 8001b3c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001b40:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 8001b44:	d117      	bne.n	8001b76 <HAL_RCC_OscConfig+0x3f6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001b46:	6baa      	ldr	r2, [r5, #56]	@ 0x38
 8001b48:	3a07      	subs	r2, #7
 8001b4a:	f403 3100 	and.w	r1, r3, #131072	@ 0x20000
 8001b4e:	bf18      	it	ne
 8001b50:	2201      	movne	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b52:	4291      	cmp	r1, r2
 8001b54:	d10f      	bne.n	8001b76 <HAL_RCC_OscConfig+0x3f6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b56:	6bea      	ldr	r2, [r5, #60]	@ 0x3c
 8001b58:	0852      	lsrs	r2, r2, #1
 8001b5a:	f403 01c0 	and.w	r1, r3, #6291456	@ 0x600000
 8001b5e:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001b60:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 8001b64:	d107      	bne.n	8001b76 <HAL_RCC_OscConfig+0x3f6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001b66:	6c2a      	ldr	r2, [r5, #64]	@ 0x40
 8001b68:	0852      	lsrs	r2, r2, #1
 8001b6a:	f003 63c0 	and.w	r3, r3, #100663296	@ 0x6000000
 8001b6e:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b70:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
 8001b74:	d04a      	beq.n	8001c0c <HAL_RCC_OscConfig+0x48c>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001b76:	2e0c      	cmp	r6, #12
 8001b78:	f43f ae06 	beq.w	8001788 <HAL_RCC_OscConfig+0x8>
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001b7c:	6823      	ldr	r3, [r4, #0]
 8001b7e:	015a      	lsls	r2, r3, #5
 8001b80:	f53f ae02 	bmi.w	8001788 <HAL_RCC_OscConfig+0x8>
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001b84:	6823      	ldr	r3, [r4, #0]
 8001b86:	00db      	lsls	r3, r3, #3
 8001b88:	f53f adfe 	bmi.w	8001788 <HAL_RCC_OscConfig+0x8>
            __HAL_RCC_PLL_DISABLE();
 8001b8c:	6823      	ldr	r3, [r4, #0]
 8001b8e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001b92:	6023      	str	r3, [r4, #0]
            tickstart = HAL_GetTick();
 8001b94:	f7ff fbba 	bl	800130c <HAL_GetTick>
 8001b98:	4606      	mov	r6, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b9a:	6823      	ldr	r3, [r4, #0]
 8001b9c:	019f      	lsls	r7, r3, #6
 8001b9e:	d42f      	bmi.n	8001c00 <HAL_RCC_OscConfig+0x480>
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ba0:	68e2      	ldr	r2, [r4, #12]
 8001ba2:	4b34      	ldr	r3, [pc, #208]	@ (8001c74 <HAL_RCC_OscConfig+0x4f4>)
 8001ba4:	4013      	ands	r3, r2
 8001ba6:	6aea      	ldr	r2, [r5, #44]	@ 0x2c
 8001ba8:	4313      	orrs	r3, r2
 8001baa:	6b6a      	ldr	r2, [r5, #52]	@ 0x34
 8001bac:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001bb0:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 8001bb2:	3a01      	subs	r2, #1
 8001bb4:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8001bb8:	6baa      	ldr	r2, [r5, #56]	@ 0x38
 8001bba:	0912      	lsrs	r2, r2, #4
 8001bbc:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 8001bc0:	6bea      	ldr	r2, [r5, #60]	@ 0x3c
 8001bc2:	0852      	lsrs	r2, r2, #1
 8001bc4:	3a01      	subs	r2, #1
 8001bc6:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 8001bca:	6c2a      	ldr	r2, [r5, #64]	@ 0x40
 8001bcc:	0852      	lsrs	r2, r2, #1
 8001bce:	3a01      	subs	r2, #1
 8001bd0:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8001bd4:	60e3      	str	r3, [r4, #12]
            __HAL_RCC_PLL_ENABLE();
 8001bd6:	6823      	ldr	r3, [r4, #0]
 8001bd8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001bdc:	6023      	str	r3, [r4, #0]
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001bde:	68e3      	ldr	r3, [r4, #12]
 8001be0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001be4:	60e3      	str	r3, [r4, #12]
            tickstart = HAL_GetTick();
 8001be6:	f7ff fb91 	bl	800130c <HAL_GetTick>
 8001bea:	4605      	mov	r5, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bec:	6823      	ldr	r3, [r4, #0]
 8001bee:	0198      	lsls	r0, r3, #6
 8001bf0:	f53f ae29 	bmi.w	8001846 <HAL_RCC_OscConfig+0xc6>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bf4:	f7ff fb8a 	bl	800130c <HAL_GetTick>
 8001bf8:	1b40      	subs	r0, r0, r5
 8001bfa:	2802      	cmp	r0, #2
 8001bfc:	d9f6      	bls.n	8001bec <HAL_RCC_OscConfig+0x46c>
 8001bfe:	e65f      	b.n	80018c0 <HAL_RCC_OscConfig+0x140>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c00:	f7ff fb84 	bl	800130c <HAL_GetTick>
 8001c04:	1b80      	subs	r0, r0, r6
 8001c06:	2802      	cmp	r0, #2
 8001c08:	d9c7      	bls.n	8001b9a <HAL_RCC_OscConfig+0x41a>
 8001c0a:	e659      	b.n	80018c0 <HAL_RCC_OscConfig+0x140>
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c0c:	6823      	ldr	r3, [r4, #0]
 8001c0e:	0199      	lsls	r1, r3, #6
 8001c10:	f53f ae19 	bmi.w	8001846 <HAL_RCC_OscConfig+0xc6>
          __HAL_RCC_PLL_ENABLE();
 8001c14:	6823      	ldr	r3, [r4, #0]
 8001c16:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001c1a:	6023      	str	r3, [r4, #0]
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001c1c:	68e3      	ldr	r3, [r4, #12]
 8001c1e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001c22:	60e3      	str	r3, [r4, #12]
          tickstart = HAL_GetTick();
 8001c24:	f7ff fb72 	bl	800130c <HAL_GetTick>
 8001c28:	4605      	mov	r5, r0
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c2a:	6823      	ldr	r3, [r4, #0]
 8001c2c:	019a      	lsls	r2, r3, #6
 8001c2e:	f53f ae0a 	bmi.w	8001846 <HAL_RCC_OscConfig+0xc6>
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c32:	f7ff fb6b 	bl	800130c <HAL_GetTick>
 8001c36:	1b40      	subs	r0, r0, r5
 8001c38:	2802      	cmp	r0, #2
 8001c3a:	d9f6      	bls.n	8001c2a <HAL_RCC_OscConfig+0x4aa>
 8001c3c:	e640      	b.n	80018c0 <HAL_RCC_OscConfig+0x140>
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001c3e:	2e0c      	cmp	r6, #12
 8001c40:	f43f ada2 	beq.w	8001788 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_PLL_DISABLE();
 8001c44:	6823      	ldr	r3, [r4, #0]
 8001c46:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001c4a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001c4c:	f7ff fb5e 	bl	800130c <HAL_GetTick>
 8001c50:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c52:	6823      	ldr	r3, [r4, #0]
 8001c54:	019b      	lsls	r3, r3, #6
 8001c56:	d404      	bmi.n	8001c62 <HAL_RCC_OscConfig+0x4e2>
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001c58:	68e2      	ldr	r2, [r4, #12]
 8001c5a:	4b07      	ldr	r3, [pc, #28]	@ (8001c78 <HAL_RCC_OscConfig+0x4f8>)
 8001c5c:	4013      	ands	r3, r2
 8001c5e:	60e3      	str	r3, [r4, #12]
 8001c60:	e5f1      	b.n	8001846 <HAL_RCC_OscConfig+0xc6>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c62:	f7ff fb53 	bl	800130c <HAL_GetTick>
 8001c66:	1b40      	subs	r0, r0, r5
 8001c68:	2802      	cmp	r0, #2
 8001c6a:	d9f2      	bls.n	8001c52 <HAL_RCC_OscConfig+0x4d2>
 8001c6c:	e628      	b.n	80018c0 <HAL_RCC_OscConfig+0x140>
 8001c6e:	bf00      	nop
 8001c70:	40007000 	.word	0x40007000
 8001c74:	f99d808c 	.word	0xf99d808c
 8001c78:	feeefffc 	.word	0xfeeefffc

08001c7c <HAL_RCC_ClockConfig>:
{
 8001c7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001c80:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8001c82:	4604      	mov	r4, r0
 8001c84:	b910      	cbnz	r0, 8001c8c <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8001c86:	2001      	movs	r0, #1
}
 8001c88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001c8c:	4a4b      	ldr	r2, [pc, #300]	@ (8001dbc <HAL_RCC_ClockConfig+0x140>)
 8001c8e:	6813      	ldr	r3, [r2, #0]
 8001c90:	f003 0307 	and.w	r3, r3, #7
 8001c94:	428b      	cmp	r3, r1
 8001c96:	d32c      	bcc.n	8001cf2 <HAL_RCC_ClockConfig+0x76>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c98:	6821      	ldr	r1, [r4, #0]
 8001c9a:	0788      	lsls	r0, r1, #30
 8001c9c:	d434      	bmi.n	8001d08 <HAL_RCC_ClockConfig+0x8c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c9e:	07c9      	lsls	r1, r1, #31
 8001ca0:	d43f      	bmi.n	8001d22 <HAL_RCC_ClockConfig+0xa6>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ca2:	6821      	ldr	r1, [r4, #0]
 8001ca4:	078a      	lsls	r2, r1, #30
 8001ca6:	d468      	bmi.n	8001d7a <HAL_RCC_ClockConfig+0xfe>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ca8:	4a44      	ldr	r2, [pc, #272]	@ (8001dbc <HAL_RCC_ClockConfig+0x140>)
 8001caa:	6813      	ldr	r3, [r2, #0]
 8001cac:	f003 0307 	and.w	r3, r3, #7
 8001cb0:	42ab      	cmp	r3, r5
 8001cb2:	d86f      	bhi.n	8001d94 <HAL_RCC_ClockConfig+0x118>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cb4:	f011 0f04 	tst.w	r1, #4
 8001cb8:	4d41      	ldr	r5, [pc, #260]	@ (8001dc0 <HAL_RCC_ClockConfig+0x144>)
 8001cba:	d177      	bne.n	8001dac <HAL_RCC_ClockConfig+0x130>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cbc:	070b      	lsls	r3, r1, #28
 8001cbe:	d506      	bpl.n	8001cce <HAL_RCC_ClockConfig+0x52>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001cc0:	68ab      	ldr	r3, [r5, #8]
 8001cc2:	6922      	ldr	r2, [r4, #16]
 8001cc4:	f423 5360 	bic.w	r3, r3, #14336	@ 0x3800
 8001cc8:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001ccc:	60ab      	str	r3, [r5, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001cce:	f7ff fd09 	bl	80016e4 <HAL_RCC_GetSysClockFreq>
 8001cd2:	68ab      	ldr	r3, [r5, #8]
 8001cd4:	4a3b      	ldr	r2, [pc, #236]	@ (8001dc4 <HAL_RCC_ClockConfig+0x148>)
 8001cd6:	f3c3 1303 	ubfx	r3, r3, #4, #4
}
 8001cda:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001cde:	5cd3      	ldrb	r3, [r2, r3]
 8001ce0:	f003 031f 	and.w	r3, r3, #31
 8001ce4:	40d8      	lsrs	r0, r3
 8001ce6:	4b38      	ldr	r3, [pc, #224]	@ (8001dc8 <HAL_RCC_ClockConfig+0x14c>)
 8001ce8:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(uwTickPrio);
 8001cea:	4b38      	ldr	r3, [pc, #224]	@ (8001dcc <HAL_RCC_ClockConfig+0x150>)
 8001cec:	6818      	ldr	r0, [r3, #0]
 8001cee:	f7ff bacb 	b.w	8001288 <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cf2:	6813      	ldr	r3, [r2, #0]
 8001cf4:	f023 0307 	bic.w	r3, r3, #7
 8001cf8:	430b      	orrs	r3, r1
 8001cfa:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cfc:	6813      	ldr	r3, [r2, #0]
 8001cfe:	f003 0307 	and.w	r3, r3, #7
 8001d02:	428b      	cmp	r3, r1
 8001d04:	d1bf      	bne.n	8001c86 <HAL_RCC_ClockConfig+0xa>
 8001d06:	e7c7      	b.n	8001c98 <HAL_RCC_ClockConfig+0x1c>
    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001d08:	4a2d      	ldr	r2, [pc, #180]	@ (8001dc0 <HAL_RCC_ClockConfig+0x144>)
 8001d0a:	68a0      	ldr	r0, [r4, #8]
 8001d0c:	6893      	ldr	r3, [r2, #8]
 8001d0e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001d12:	4298      	cmp	r0, r3
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d14:	bf81      	itttt	hi
 8001d16:	6893      	ldrhi	r3, [r2, #8]
 8001d18:	f023 03f0 	bichi.w	r3, r3, #240	@ 0xf0
 8001d1c:	4303      	orrhi	r3, r0
 8001d1e:	6093      	strhi	r3, [r2, #8]
 8001d20:	e7bd      	b.n	8001c9e <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d22:	6862      	ldr	r2, [r4, #4]
 8001d24:	4e26      	ldr	r6, [pc, #152]	@ (8001dc0 <HAL_RCC_ClockConfig+0x144>)
 8001d26:	2a03      	cmp	r2, #3
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d28:	6833      	ldr	r3, [r6, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d2a:	d11a      	bne.n	8001d62 <HAL_RCC_ClockConfig+0xe6>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d2c:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d30:	d0a9      	beq.n	8001c86 <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001d32:	68b3      	ldr	r3, [r6, #8]
 8001d34:	f023 0303 	bic.w	r3, r3, #3
 8001d38:	4313      	orrs	r3, r2
 8001d3a:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8001d3c:	f7ff fae6 	bl	800130c <HAL_GetTick>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d40:	f241 3888 	movw	r8, #5000	@ 0x1388
    tickstart = HAL_GetTick();
 8001d44:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d46:	68b3      	ldr	r3, [r6, #8]
 8001d48:	6862      	ldr	r2, [r4, #4]
 8001d4a:	f003 030c 	and.w	r3, r3, #12
 8001d4e:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001d52:	d0a6      	beq.n	8001ca2 <HAL_RCC_ClockConfig+0x26>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d54:	f7ff fada 	bl	800130c <HAL_GetTick>
 8001d58:	1bc0      	subs	r0, r0, r7
 8001d5a:	4540      	cmp	r0, r8
 8001d5c:	d9f3      	bls.n	8001d46 <HAL_RCC_ClockConfig+0xca>
        return HAL_TIMEOUT;
 8001d5e:	2003      	movs	r0, #3
 8001d60:	e792      	b.n	8001c88 <HAL_RCC_ClockConfig+0xc>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d62:	2a02      	cmp	r2, #2
 8001d64:	d102      	bne.n	8001d6c <HAL_RCC_ClockConfig+0xf0>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d66:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8001d6a:	e7e1      	b.n	8001d30 <HAL_RCC_ClockConfig+0xb4>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001d6c:	b912      	cbnz	r2, 8001d74 <HAL_RCC_ClockConfig+0xf8>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001d6e:	f013 0f02 	tst.w	r3, #2
 8001d72:	e7dd      	b.n	8001d30 <HAL_RCC_ClockConfig+0xb4>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d74:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 8001d78:	e7da      	b.n	8001d30 <HAL_RCC_ClockConfig+0xb4>
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001d7a:	4a11      	ldr	r2, [pc, #68]	@ (8001dc0 <HAL_RCC_ClockConfig+0x144>)
 8001d7c:	68a0      	ldr	r0, [r4, #8]
 8001d7e:	6893      	ldr	r3, [r2, #8]
 8001d80:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001d84:	4298      	cmp	r0, r3
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d86:	bf3f      	itttt	cc
 8001d88:	6893      	ldrcc	r3, [r2, #8]
 8001d8a:	f023 03f0 	biccc.w	r3, r3, #240	@ 0xf0
 8001d8e:	4303      	orrcc	r3, r0
 8001d90:	6093      	strcc	r3, [r2, #8]
 8001d92:	e789      	b.n	8001ca8 <HAL_RCC_ClockConfig+0x2c>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d94:	6813      	ldr	r3, [r2, #0]
 8001d96:	f023 0307 	bic.w	r3, r3, #7
 8001d9a:	432b      	orrs	r3, r5
 8001d9c:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d9e:	6813      	ldr	r3, [r2, #0]
 8001da0:	f003 0307 	and.w	r3, r3, #7
 8001da4:	42ab      	cmp	r3, r5
 8001da6:	f47f af6e 	bne.w	8001c86 <HAL_RCC_ClockConfig+0xa>
 8001daa:	e783      	b.n	8001cb4 <HAL_RCC_ClockConfig+0x38>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001dac:	68ab      	ldr	r3, [r5, #8]
 8001dae:	68e2      	ldr	r2, [r4, #12]
 8001db0:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001db4:	4313      	orrs	r3, r2
 8001db6:	60ab      	str	r3, [r5, #8]
 8001db8:	e780      	b.n	8001cbc <HAL_RCC_ClockConfig+0x40>
 8001dba:	bf00      	nop
 8001dbc:	40022000 	.word	0x40022000
 8001dc0:	40021000 	.word	0x40021000
 8001dc4:	0800c5b4 	.word	0x0800c5b4
 8001dc8:	20003430 	.word	0x20003430
 8001dcc:	20003438 	.word	0x20003438

08001dd0 <HAL_RCC_GetHCLKFreq>:
}
 8001dd0:	4b01      	ldr	r3, [pc, #4]	@ (8001dd8 <HAL_RCC_GetHCLKFreq+0x8>)
 8001dd2:	6818      	ldr	r0, [r3, #0]
 8001dd4:	4770      	bx	lr
 8001dd6:	bf00      	nop
 8001dd8:	20003430 	.word	0x20003430

08001ddc <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001ddc:	4b05      	ldr	r3, [pc, #20]	@ (8001df4 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001dde:	4a06      	ldr	r2, [pc, #24]	@ (8001df8 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001de0:	689b      	ldr	r3, [r3, #8]
 8001de2:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8001de6:	5cd3      	ldrb	r3, [r2, r3]
 8001de8:	4a04      	ldr	r2, [pc, #16]	@ (8001dfc <HAL_RCC_GetPCLK1Freq+0x20>)
 8001dea:	6810      	ldr	r0, [r2, #0]
 8001dec:	f003 031f 	and.w	r3, r3, #31
}
 8001df0:	40d8      	lsrs	r0, r3
 8001df2:	4770      	bx	lr
 8001df4:	40021000 	.word	0x40021000
 8001df8:	0800c5ac 	.word	0x0800c5ac
 8001dfc:	20003430 	.word	0x20003430

08001e00 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001e00:	4b05      	ldr	r3, [pc, #20]	@ (8001e18 <HAL_RCC_GetPCLK2Freq+0x18>)
 8001e02:	4a06      	ldr	r2, [pc, #24]	@ (8001e1c <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001e04:	689b      	ldr	r3, [r3, #8]
 8001e06:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8001e0a:	5cd3      	ldrb	r3, [r2, r3]
 8001e0c:	4a04      	ldr	r2, [pc, #16]	@ (8001e20 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001e0e:	6810      	ldr	r0, [r2, #0]
 8001e10:	f003 031f 	and.w	r3, r3, #31
}
 8001e14:	40d8      	lsrs	r0, r3
 8001e16:	4770      	bx	lr
 8001e18:	40021000 	.word	0x40021000
 8001e1c:	0800c5ac 	.word	0x0800c5ac
 8001e20:	20003430 	.word	0x20003430

08001e24 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8001e24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8001e26:	4c41      	ldr	r4, [pc, #260]	@ (8001f2c <RCCEx_PLLSAI1_Config+0x108>)
 8001e28:	68e3      	ldr	r3, [r4, #12]
 8001e2a:	079b      	lsls	r3, r3, #30
{
 8001e2c:	4605      	mov	r5, r0
 8001e2e:	460e      	mov	r6, r1
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8001e30:	6800      	ldr	r0, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8001e32:	d028      	beq.n	8001e86 <RCCEx_PLLSAI1_Config+0x62>
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8001e34:	68e3      	ldr	r3, [r4, #12]
 8001e36:	f003 0303 	and.w	r3, r3, #3
 8001e3a:	4283      	cmp	r3, r0
 8001e3c:	d13a      	bne.n	8001eb4 <RCCEx_PLLSAI1_Config+0x90>
       ||
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d038      	beq.n	8001eb4 <RCCEx_PLLSAI1_Config+0x90>
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8001e42:	68e3      	ldr	r3, [r4, #12]
       ||
 8001e44:	686a      	ldr	r2, [r5, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8001e46:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8001e4a:	3301      	adds	r3, #1
       ||
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	d131      	bne.n	8001eb4 <RCCEx_PLLSAI1_Config+0x90>
  }

  if(status == HAL_OK)
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8001e50:	6823      	ldr	r3, [r4, #0]
 8001e52:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8001e56:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001e58:	f7ff fa58 	bl	800130c <HAL_GetTick>
 8001e5c:	4607      	mov	r7, r0

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8001e5e:	6823      	ldr	r3, [r4, #0]
 8001e60:	011a      	lsls	r2, r3, #4
 8001e62:	d430      	bmi.n	8001ec6 <RCCEx_PLLSAI1_Config+0xa2>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8001e64:	68aa      	ldr	r2, [r5, #8]
 8001e66:	0212      	lsls	r2, r2, #8
      if(Divider == DIVIDER_P_UPDATE)
 8001e68:	b3a6      	cbz	r6, 8001ed4 <RCCEx_PLLSAI1_Config+0xb0>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8001e6a:	2e01      	cmp	r6, #1
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8001e6c:	6923      	ldr	r3, [r4, #16]
      else if(Divider == DIVIDER_Q_UPDATE)
 8001e6e:	d14c      	bne.n	8001f0a <RCCEx_PLLSAI1_Config+0xe6>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8001e70:	6929      	ldr	r1, [r5, #16]
 8001e72:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8001e76:	0849      	lsrs	r1, r1, #1
 8001e78:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8001e7c:	3901      	subs	r1, #1
 8001e7e:	4313      	orrs	r3, r2
 8001e80:	ea43 5341 	orr.w	r3, r3, r1, lsl #21
 8001e84:	e030      	b.n	8001ee8 <RCCEx_PLLSAI1_Config+0xc4>
    switch(PllSai1->PLLSAI1Source)
 8001e86:	2802      	cmp	r0, #2
 8001e88:	d010      	beq.n	8001eac <RCCEx_PLLSAI1_Config+0x88>
 8001e8a:	2803      	cmp	r0, #3
 8001e8c:	d014      	beq.n	8001eb8 <RCCEx_PLLSAI1_Config+0x94>
 8001e8e:	2801      	cmp	r0, #1
 8001e90:	d110      	bne.n	8001eb4 <RCCEx_PLLSAI1_Config+0x90>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8001e92:	6823      	ldr	r3, [r4, #0]
 8001e94:	079f      	lsls	r7, r3, #30
 8001e96:	d51c      	bpl.n	8001ed2 <RCCEx_PLLSAI1_Config+0xae>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8001e98:	68e3      	ldr	r3, [r4, #12]
 8001e9a:	686a      	ldr	r2, [r5, #4]
 8001e9c:	f023 0373 	bic.w	r3, r3, #115	@ 0x73
 8001ea0:	3a01      	subs	r2, #1
 8001ea2:	4303      	orrs	r3, r0
 8001ea4:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8001ea8:	60e3      	str	r3, [r4, #12]
  if(status == HAL_OK)
 8001eaa:	e7d1      	b.n	8001e50 <RCCEx_PLLSAI1_Config+0x2c>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8001eac:	6823      	ldr	r3, [r4, #0]
 8001eae:	f413 6f80 	tst.w	r3, #1024	@ 0x400
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8001eb2:	d1f1      	bne.n	8001e98 <RCCEx_PLLSAI1_Config+0x74>
 8001eb4:	2001      	movs	r0, #1
 8001eb6:	e00c      	b.n	8001ed2 <RCCEx_PLLSAI1_Config+0xae>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8001eb8:	6823      	ldr	r3, [r4, #0]
 8001eba:	0399      	lsls	r1, r3, #14
 8001ebc:	d4ec      	bmi.n	8001e98 <RCCEx_PLLSAI1_Config+0x74>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8001ebe:	6823      	ldr	r3, [r4, #0]
 8001ec0:	f413 2f80 	tst.w	r3, #262144	@ 0x40000
 8001ec4:	e7f5      	b.n	8001eb2 <RCCEx_PLLSAI1_Config+0x8e>
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8001ec6:	f7ff fa21 	bl	800130c <HAL_GetTick>
 8001eca:	1bc0      	subs	r0, r0, r7
 8001ecc:	2802      	cmp	r0, #2
 8001ece:	d9c6      	bls.n	8001e5e <RCCEx_PLLSAI1_Config+0x3a>
 8001ed0:	2003      	movs	r0, #3
      }
    }
  }

  return status;
}
 8001ed2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8001ed4:	6923      	ldr	r3, [r4, #16]
 8001ed6:	68e9      	ldr	r1, [r5, #12]
 8001ed8:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8001edc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001ee0:	0909      	lsrs	r1, r1, #4
 8001ee2:	4313      	orrs	r3, r2
 8001ee4:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8001ee8:	6123      	str	r3, [r4, #16]
      __HAL_RCC_PLLSAI1_ENABLE();
 8001eea:	6823      	ldr	r3, [r4, #0]
 8001eec:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001ef0:	6023      	str	r3, [r4, #0]
      tickstart = HAL_GetTick();
 8001ef2:	f7ff fa0b 	bl	800130c <HAL_GetTick>
 8001ef6:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8001ef8:	6823      	ldr	r3, [r4, #0]
 8001efa:	011b      	lsls	r3, r3, #4
 8001efc:	d510      	bpl.n	8001f20 <RCCEx_PLLSAI1_Config+0xfc>
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8001efe:	6923      	ldr	r3, [r4, #16]
 8001f00:	69aa      	ldr	r2, [r5, #24]
 8001f02:	4313      	orrs	r3, r2
 8001f04:	6123      	str	r3, [r4, #16]
 8001f06:	2000      	movs	r0, #0
  return status;
 8001f08:	e7e3      	b.n	8001ed2 <RCCEx_PLLSAI1_Config+0xae>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8001f0a:	6969      	ldr	r1, [r5, #20]
 8001f0c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8001f10:	0849      	lsrs	r1, r1, #1
 8001f12:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8001f16:	3901      	subs	r1, #1
 8001f18:	4313      	orrs	r3, r2
 8001f1a:	ea43 6341 	orr.w	r3, r3, r1, lsl #25
 8001f1e:	e7e3      	b.n	8001ee8 <RCCEx_PLLSAI1_Config+0xc4>
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8001f20:	f7ff f9f4 	bl	800130c <HAL_GetTick>
 8001f24:	1b80      	subs	r0, r0, r6
 8001f26:	2802      	cmp	r0, #2
 8001f28:	d9e6      	bls.n	8001ef8 <RCCEx_PLLSAI1_Config+0xd4>
 8001f2a:	e7d1      	b.n	8001ed0 <RCCEx_PLLSAI1_Config+0xac>
 8001f2c:	40021000 	.word	0x40021000

08001f30 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8001f30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8001f32:	4c3b      	ldr	r4, [pc, #236]	@ (8002020 <RCCEx_PLLSAI2_Config+0xf0>)
 8001f34:	68e3      	ldr	r3, [r4, #12]
 8001f36:	079b      	lsls	r3, r3, #30
{
 8001f38:	4605      	mov	r5, r0
 8001f3a:	460e      	mov	r6, r1
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8001f3c:	6800      	ldr	r0, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8001f3e:	d026      	beq.n	8001f8e <RCCEx_PLLSAI2_Config+0x5e>
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8001f40:	68e3      	ldr	r3, [r4, #12]
 8001f42:	f003 0303 	and.w	r3, r3, #3
 8001f46:	4283      	cmp	r3, r0
 8001f48:	d138      	bne.n	8001fbc <RCCEx_PLLSAI2_Config+0x8c>
       ||
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d036      	beq.n	8001fbc <RCCEx_PLLSAI2_Config+0x8c>
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8001f4e:	68e3      	ldr	r3, [r4, #12]
       ||
 8001f50:	686a      	ldr	r2, [r5, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8001f52:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8001f56:	3301      	adds	r3, #1
       ||
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	d12f      	bne.n	8001fbc <RCCEx_PLLSAI2_Config+0x8c>
  }

  if(status == HAL_OK)
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8001f5c:	6823      	ldr	r3, [r4, #0]
 8001f5e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001f62:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001f64:	f7ff f9d2 	bl	800130c <HAL_GetTick>
 8001f68:	4607      	mov	r7, r0

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8001f6a:	6823      	ldr	r3, [r4, #0]
 8001f6c:	009a      	lsls	r2, r3, #2
 8001f6e:	d42e      	bmi.n	8001fce <RCCEx_PLLSAI2_Config+0x9e>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8001f70:	68a9      	ldr	r1, [r5, #8]
 8001f72:	0209      	lsls	r1, r1, #8
      if(Divider == DIVIDER_P_UPDATE)
 8001f74:	b396      	cbz	r6, 8001fdc <RCCEx_PLLSAI2_Config+0xac>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8001f76:	6963      	ldr	r3, [r4, #20]
 8001f78:	692a      	ldr	r2, [r5, #16]
 8001f7a:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8001f7e:	0852      	lsrs	r2, r2, #1
 8001f80:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8001f84:	3a01      	subs	r2, #1
 8001f86:	430b      	orrs	r3, r1
 8001f88:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8001f8c:	e030      	b.n	8001ff0 <RCCEx_PLLSAI2_Config+0xc0>
    switch(PllSai2->PLLSAI2Source)
 8001f8e:	2802      	cmp	r0, #2
 8001f90:	d010      	beq.n	8001fb4 <RCCEx_PLLSAI2_Config+0x84>
 8001f92:	2803      	cmp	r0, #3
 8001f94:	d014      	beq.n	8001fc0 <RCCEx_PLLSAI2_Config+0x90>
 8001f96:	2801      	cmp	r0, #1
 8001f98:	d110      	bne.n	8001fbc <RCCEx_PLLSAI2_Config+0x8c>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8001f9a:	6823      	ldr	r3, [r4, #0]
 8001f9c:	079f      	lsls	r7, r3, #30
 8001f9e:	d51c      	bpl.n	8001fda <RCCEx_PLLSAI2_Config+0xaa>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8001fa0:	68e3      	ldr	r3, [r4, #12]
 8001fa2:	686a      	ldr	r2, [r5, #4]
 8001fa4:	f023 0373 	bic.w	r3, r3, #115	@ 0x73
 8001fa8:	3a01      	subs	r2, #1
 8001faa:	4303      	orrs	r3, r0
 8001fac:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8001fb0:	60e3      	str	r3, [r4, #12]
  if(status == HAL_OK)
 8001fb2:	e7d3      	b.n	8001f5c <RCCEx_PLLSAI2_Config+0x2c>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8001fb4:	6823      	ldr	r3, [r4, #0]
 8001fb6:	f413 6f80 	tst.w	r3, #1024	@ 0x400
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8001fba:	d1f1      	bne.n	8001fa0 <RCCEx_PLLSAI2_Config+0x70>
 8001fbc:	2001      	movs	r0, #1
 8001fbe:	e00c      	b.n	8001fda <RCCEx_PLLSAI2_Config+0xaa>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8001fc0:	6823      	ldr	r3, [r4, #0]
 8001fc2:	0399      	lsls	r1, r3, #14
 8001fc4:	d4ec      	bmi.n	8001fa0 <RCCEx_PLLSAI2_Config+0x70>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8001fc6:	6823      	ldr	r3, [r4, #0]
 8001fc8:	f413 2f80 	tst.w	r3, #262144	@ 0x40000
 8001fcc:	e7f5      	b.n	8001fba <RCCEx_PLLSAI2_Config+0x8a>
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8001fce:	f7ff f99d 	bl	800130c <HAL_GetTick>
 8001fd2:	1bc0      	subs	r0, r0, r7
 8001fd4:	2802      	cmp	r0, #2
 8001fd6:	d9c8      	bls.n	8001f6a <RCCEx_PLLSAI2_Config+0x3a>
 8001fd8:	2003      	movs	r0, #3
      }
    }
  }

  return status;
}
 8001fda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8001fdc:	6963      	ldr	r3, [r4, #20]
 8001fde:	68ea      	ldr	r2, [r5, #12]
 8001fe0:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8001fe4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001fe8:	0912      	lsrs	r2, r2, #4
 8001fea:	430b      	orrs	r3, r1
 8001fec:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8001ff0:	6163      	str	r3, [r4, #20]
      __HAL_RCC_PLLSAI2_ENABLE();
 8001ff2:	6823      	ldr	r3, [r4, #0]
 8001ff4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ff8:	6023      	str	r3, [r4, #0]
      tickstart = HAL_GetTick();
 8001ffa:	f7ff f987 	bl	800130c <HAL_GetTick>
 8001ffe:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002000:	6823      	ldr	r3, [r4, #0]
 8002002:	009b      	lsls	r3, r3, #2
 8002004:	d505      	bpl.n	8002012 <RCCEx_PLLSAI2_Config+0xe2>
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002006:	6963      	ldr	r3, [r4, #20]
 8002008:	696a      	ldr	r2, [r5, #20]
 800200a:	4313      	orrs	r3, r2
 800200c:	6163      	str	r3, [r4, #20]
 800200e:	2000      	movs	r0, #0
  return status;
 8002010:	e7e3      	b.n	8001fda <RCCEx_PLLSAI2_Config+0xaa>
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002012:	f7ff f97b 	bl	800130c <HAL_GetTick>
 8002016:	1b80      	subs	r0, r0, r6
 8002018:	2802      	cmp	r0, #2
 800201a:	d9f1      	bls.n	8002000 <RCCEx_PLLSAI2_Config+0xd0>
 800201c:	e7dc      	b.n	8001fd8 <RCCEx_PLLSAI2_Config+0xa8>
 800201e:	bf00      	nop
 8002020:	40021000 	.word	0x40021000

08002024 <HAL_RCCEx_PeriphCLKConfig>:
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002024:	6803      	ldr	r3, [r0, #0]
{
 8002026:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800202a:	051d      	lsls	r5, r3, #20
{
 800202c:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800202e:	d528      	bpl.n	8002082 <HAL_RCCEx_PeriphCLKConfig+0x5e>
    switch(PeriphClkInit->Sai1ClockSelection)
 8002030:	6e41      	ldr	r1, [r0, #100]	@ 0x64
 8002032:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8002036:	d026      	beq.n	8002086 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8002038:	d817      	bhi.n	800206a <HAL_RCCEx_PeriphCLKConfig+0x46>
 800203a:	b351      	cbz	r1, 8002092 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 800203c:	f5b1 0f80 	cmp.w	r1, #4194304	@ 0x400000
 8002040:	d02e      	beq.n	80020a0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002042:	2501      	movs	r5, #1
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002044:	6823      	ldr	r3, [r4, #0]
 8002046:	04d8      	lsls	r0, r3, #19
 8002048:	d50d      	bpl.n	8002066 <HAL_RCCEx_PeriphCLKConfig+0x42>
    switch(PeriphClkInit->Sai2ClockSelection)
 800204a:	6ea1      	ldr	r1, [r4, #104]	@ 0x68
 800204c:	f1b1 7f00 	cmp.w	r1, #33554432	@ 0x2000000
 8002050:	f000 8147 	beq.w	80022e2 <HAL_RCCEx_PeriphCLKConfig+0x2be>
 8002054:	d829      	bhi.n	80020aa <HAL_RCCEx_PeriphCLKConfig+0x86>
 8002056:	2900      	cmp	r1, #0
 8002058:	f000 8149 	beq.w	80022ee <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800205c:	f1b1 7f80 	cmp.w	r1, #16777216	@ 0x1000000
 8002060:	f000 814a 	beq.w	80022f8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8002064:	2501      	movs	r5, #1
 8002066:	462f      	mov	r7, r5
 8002068:	e02f      	b.n	80020ca <HAL_RCCEx_PeriphCLKConfig+0xa6>
    switch(PeriphClkInit->Sai1ClockSelection)
 800206a:	f5b1 0f40 	cmp.w	r1, #12582912	@ 0xc00000
 800206e:	d1e8      	bne.n	8002042 <HAL_RCCEx_PeriphCLKConfig+0x1e>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002070:	4aab      	ldr	r2, [pc, #684]	@ (8002320 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8002072:	6e61      	ldr	r1, [r4, #100]	@ 0x64
 8002074:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8002078:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800207c:	430b      	orrs	r3, r1
 800207e:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002082:	2500      	movs	r5, #0
 8002084:	e7de      	b.n	8002044 <HAL_RCCEx_PeriphCLKConfig+0x20>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002086:	4aa6      	ldr	r2, [pc, #664]	@ (8002320 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8002088:	68d3      	ldr	r3, [r2, #12]
 800208a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800208e:	60d3      	str	r3, [r2, #12]
    if(ret == HAL_OK)
 8002090:	e7ee      	b.n	8002070 <HAL_RCCEx_PeriphCLKConfig+0x4c>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002092:	3004      	adds	r0, #4
 8002094:	f7ff fec6 	bl	8001e24 <RCCEx_PLLSAI1_Config>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002098:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800209a:	2800      	cmp	r0, #0
 800209c:	d1d2      	bne.n	8002044 <HAL_RCCEx_PeriphCLKConfig+0x20>
 800209e:	e7e7      	b.n	8002070 <HAL_RCCEx_PeriphCLKConfig+0x4c>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80020a0:	2100      	movs	r1, #0
 80020a2:	3020      	adds	r0, #32
 80020a4:	f7ff ff44 	bl	8001f30 <RCCEx_PLLSAI2_Config>
 80020a8:	e7f6      	b.n	8002098 <HAL_RCCEx_PeriphCLKConfig+0x74>
    switch(PeriphClkInit->Sai2ClockSelection)
 80020aa:	f1b1 7f40 	cmp.w	r1, #50331648	@ 0x3000000
 80020ae:	d1d9      	bne.n	8002064 <HAL_RCCEx_PeriphCLKConfig+0x40>
    switch(PeriphClkInit->Sai1ClockSelection)
 80020b0:	462f      	mov	r7, r5
    if(ret == HAL_OK)
 80020b2:	2f00      	cmp	r7, #0
 80020b4:	f040 8126 	bne.w	8002304 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80020b8:	4a99      	ldr	r2, [pc, #612]	@ (8002320 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80020ba:	6ea1      	ldr	r1, [r4, #104]	@ 0x68
 80020bc:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 80020c0:	f023 7340 	bic.w	r3, r3, #50331648	@ 0x3000000
 80020c4:	430b      	orrs	r3, r1
 80020c6:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80020ca:	6823      	ldr	r3, [r4, #0]
 80020cc:	0399      	lsls	r1, r3, #14
 80020ce:	d53a      	bpl.n	8002146 <HAL_RCCEx_PeriphCLKConfig+0x122>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80020d0:	4e93      	ldr	r6, [pc, #588]	@ (8002320 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80020d2:	6db3      	ldr	r3, [r6, #88]	@ 0x58
 80020d4:	00da      	lsls	r2, r3, #3
 80020d6:	f100 8117 	bmi.w	8002308 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
      __HAL_RCC_PWR_CLK_ENABLE();
 80020da:	6db3      	ldr	r3, [r6, #88]	@ 0x58
 80020dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80020e0:	65b3      	str	r3, [r6, #88]	@ 0x58
 80020e2:	6db3      	ldr	r3, [r6, #88]	@ 0x58
 80020e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020e8:	9301      	str	r3, [sp, #4]
 80020ea:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80020ec:	f04f 0801 	mov.w	r8, #1
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80020f0:	f8df 9230 	ldr.w	r9, [pc, #560]	@ 8002324 <HAL_RCCEx_PeriphCLKConfig+0x300>
 80020f4:	f8d9 3000 	ldr.w	r3, [r9]
 80020f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80020fc:	f8c9 3000 	str.w	r3, [r9]
    tickstart = HAL_GetTick();
 8002100:	f7ff f904 	bl	800130c <HAL_GetTick>
 8002104:	4682      	mov	sl, r0
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002106:	f8d9 3000 	ldr.w	r3, [r9]
 800210a:	05db      	lsls	r3, r3, #23
 800210c:	f140 80ff 	bpl.w	800230e <HAL_RCCEx_PeriphCLKConfig+0x2ea>
    if(ret == HAL_OK)
 8002110:	b98f      	cbnz	r7, 8002136 <HAL_RCCEx_PeriphCLKConfig+0x112>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002112:	f8d6 2090 	ldr.w	r2, [r6, #144]	@ 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002116:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 800211a:	f412 7240 	ands.w	r2, r2, #768	@ 0x300
 800211e:	f040 8103 	bne.w	8002328 <HAL_RCCEx_PeriphCLKConfig+0x304>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002122:	f8d6 3090 	ldr.w	r3, [r6, #144]	@ 0x90
 8002126:	f8d4 2084 	ldr.w	r2, [r4, #132]	@ 0x84
 800212a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800212e:	4313      	orrs	r3, r2
 8002130:	f8c6 3090 	str.w	r3, [r6, #144]	@ 0x90
 8002134:	462f      	mov	r7, r5
    if(pwrclkchanged == SET)
 8002136:	f1b8 0f00 	cmp.w	r8, #0
 800213a:	d003      	beq.n	8002144 <HAL_RCCEx_PeriphCLKConfig+0x120>
      __HAL_RCC_PWR_CLK_DISABLE();
 800213c:	6db3      	ldr	r3, [r6, #88]	@ 0x58
 800213e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002142:	65b3      	str	r3, [r6, #88]	@ 0x58
 8002144:	463d      	mov	r5, r7
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002146:	6823      	ldr	r3, [r4, #0]
 8002148:	07da      	lsls	r2, r3, #31
 800214a:	d508      	bpl.n	800215e <HAL_RCCEx_PeriphCLKConfig+0x13a>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800214c:	4974      	ldr	r1, [pc, #464]	@ (8002320 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 800214e:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8002150:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8002154:	f022 0203 	bic.w	r2, r2, #3
 8002158:	4302      	orrs	r2, r0
 800215a:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800215e:	079f      	lsls	r7, r3, #30
 8002160:	d508      	bpl.n	8002174 <HAL_RCCEx_PeriphCLKConfig+0x150>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002162:	496f      	ldr	r1, [pc, #444]	@ (8002320 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8002164:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8002166:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 800216a:	f022 020c 	bic.w	r2, r2, #12
 800216e:	4302      	orrs	r2, r0
 8002170:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002174:	075e      	lsls	r6, r3, #29
 8002176:	d508      	bpl.n	800218a <HAL_RCCEx_PeriphCLKConfig+0x166>
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002178:	4969      	ldr	r1, [pc, #420]	@ (8002320 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 800217a:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 800217c:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8002180:	f022 0230 	bic.w	r2, r2, #48	@ 0x30
 8002184:	4302      	orrs	r2, r0
 8002186:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800218a:	0718      	lsls	r0, r3, #28
 800218c:	d508      	bpl.n	80021a0 <HAL_RCCEx_PeriphCLKConfig+0x17c>
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800218e:	4964      	ldr	r1, [pc, #400]	@ (8002320 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8002190:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 8002192:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8002196:	f022 02c0 	bic.w	r2, r2, #192	@ 0xc0
 800219a:	4302      	orrs	r2, r0
 800219c:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80021a0:	06d9      	lsls	r1, r3, #27
 80021a2:	d508      	bpl.n	80021b6 <HAL_RCCEx_PeriphCLKConfig+0x192>
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80021a4:	495e      	ldr	r1, [pc, #376]	@ (8002320 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80021a6:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
 80021a8:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 80021ac:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80021b0:	4302      	orrs	r2, r0
 80021b2:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80021b6:	069a      	lsls	r2, r3, #26
 80021b8:	d508      	bpl.n	80021cc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80021ba:	4959      	ldr	r1, [pc, #356]	@ (8002320 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80021bc:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 80021be:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 80021c2:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80021c6:	4302      	orrs	r2, r0
 80021c8:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80021cc:	059f      	lsls	r7, r3, #22
 80021ce:	d508      	bpl.n	80021e2 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80021d0:	4953      	ldr	r1, [pc, #332]	@ (8002320 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80021d2:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 80021d4:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 80021d8:	f422 2240 	bic.w	r2, r2, #786432	@ 0xc0000
 80021dc:	4302      	orrs	r2, r0
 80021de:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80021e2:	055e      	lsls	r6, r3, #21
 80021e4:	d508      	bpl.n	80021f8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80021e6:	494e      	ldr	r1, [pc, #312]	@ (8002320 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80021e8:	6e20      	ldr	r0, [r4, #96]	@ 0x60
 80021ea:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 80021ee:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
 80021f2:	4302      	orrs	r2, r0
 80021f4:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80021f8:	0658      	lsls	r0, r3, #25
 80021fa:	d508      	bpl.n	800220e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80021fc:	4948      	ldr	r1, [pc, #288]	@ (8002320 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80021fe:	6d20      	ldr	r0, [r4, #80]	@ 0x50
 8002200:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8002204:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 8002208:	4302      	orrs	r2, r0
 800220a:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800220e:	0619      	lsls	r1, r3, #24
 8002210:	d508      	bpl.n	8002224 <HAL_RCCEx_PeriphCLKConfig+0x200>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002212:	4943      	ldr	r1, [pc, #268]	@ (8002320 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8002214:	6d60      	ldr	r0, [r4, #84]	@ 0x54
 8002216:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 800221a:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800221e:	4302      	orrs	r2, r0
 8002220:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002224:	05da      	lsls	r2, r3, #23
 8002226:	d508      	bpl.n	800223a <HAL_RCCEx_PeriphCLKConfig+0x216>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002228:	493d      	ldr	r1, [pc, #244]	@ (8002320 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 800222a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800222c:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8002230:	f422 3240 	bic.w	r2, r2, #196608	@ 0x30000
 8002234:	4302      	orrs	r2, r0
 8002236:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800223a:	049f      	lsls	r7, r3, #18
 800223c:	d510      	bpl.n	8002260 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800223e:	4a38      	ldr	r2, [pc, #224]	@ (8002320 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8002240:	6ee1      	ldr	r1, [r4, #108]	@ 0x6c
 8002242:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8002246:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 800224a:	430b      	orrs	r3, r1
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800224c:	f1b1 6f00 	cmp.w	r1, #134217728	@ 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002250:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002254:	f040 808f 	bne.w	8002376 <HAL_RCCEx_PeriphCLKConfig+0x352>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002258:	68d3      	ldr	r3, [r2, #12]
 800225a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800225e:	60d3      	str	r3, [r2, #12]
 8002260:	462f      	mov	r7, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002262:	6823      	ldr	r3, [r4, #0]
 8002264:	031e      	lsls	r6, r3, #12
 8002266:	d510      	bpl.n	800228a <HAL_RCCEx_PeriphCLKConfig+0x266>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002268:	4a2d      	ldr	r2, [pc, #180]	@ (8002320 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 800226a:	6f21      	ldr	r1, [r4, #112]	@ 0x70
 800226c:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8002270:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 8002274:	430b      	orrs	r3, r1
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002276:	f1b1 6f00 	cmp.w	r1, #134217728	@ 0x8000000
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800227a:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800227e:	f040 8087 	bne.w	8002390 <HAL_RCCEx_PeriphCLKConfig+0x36c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002282:	68d3      	ldr	r3, [r2, #12]
 8002284:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002288:	60d3      	str	r3, [r2, #12]
 800228a:	463e      	mov	r6, r7
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800228c:	6823      	ldr	r3, [r4, #0]
 800228e:	035d      	lsls	r5, r3, #13
 8002290:	d50f      	bpl.n	80022b2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002292:	4a23      	ldr	r2, [pc, #140]	@ (8002320 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8002294:	6f61      	ldr	r1, [r4, #116]	@ 0x74
 8002296:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 800229a:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 800229e:	430b      	orrs	r3, r1
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80022a0:	f1b1 6f00 	cmp.w	r1, #134217728	@ 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80022a4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80022a8:	d17f      	bne.n	80023aa <HAL_RCCEx_PeriphCLKConfig+0x386>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80022aa:	68d3      	ldr	r3, [r2, #12]
 80022ac:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80022b0:	60d3      	str	r3, [r2, #12]
 80022b2:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80022b4:	6823      	ldr	r3, [r4, #0]
 80022b6:	0458      	lsls	r0, r3, #17
 80022b8:	f140 8086 	bpl.w	80023c8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80022bc:	4918      	ldr	r1, [pc, #96]	@ (8002320 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80022be:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 80022c0:	f8d1 3088 	ldr.w	r3, [r1, #136]	@ 0x88
 80022c4:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 80022c8:	4313      	orrs	r3, r2
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80022ca:	f1b2 5f80 	cmp.w	r2, #268435456	@ 0x10000000
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80022ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80022d2:	d176      	bne.n	80023c2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80022d4:	2102      	movs	r1, #2
 80022d6:	1d20      	adds	r0, r4, #4
 80022d8:	f7ff fda4 	bl	8001e24 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 80022dc:	2800      	cmp	r0, #0
 80022de:	d073      	beq.n	80023c8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 80022e0:	e073      	b.n	80023ca <HAL_RCCEx_PeriphCLKConfig+0x3a6>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80022e2:	4a0f      	ldr	r2, [pc, #60]	@ (8002320 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80022e4:	68d3      	ldr	r3, [r2, #12]
 80022e6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80022ea:	60d3      	str	r3, [r2, #12]
      break;
 80022ec:	e6e0      	b.n	80020b0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80022ee:	1d20      	adds	r0, r4, #4
 80022f0:	f7ff fd98 	bl	8001e24 <RCCEx_PLLSAI1_Config>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80022f4:	4607      	mov	r7, r0
      break;
 80022f6:	e6dc      	b.n	80020b2 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80022f8:	2100      	movs	r1, #0
 80022fa:	f104 0020 	add.w	r0, r4, #32
 80022fe:	f7ff fe17 	bl	8001f30 <RCCEx_PLLSAI2_Config>
 8002302:	e7f7      	b.n	80022f4 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8002304:	463d      	mov	r5, r7
 8002306:	e6e0      	b.n	80020ca <HAL_RCCEx_PeriphCLKConfig+0xa6>
    FlagStatus       pwrclkchanged = RESET;
 8002308:	f04f 0800 	mov.w	r8, #0
 800230c:	e6f0      	b.n	80020f0 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800230e:	f7fe fffd 	bl	800130c <HAL_GetTick>
 8002312:	eba0 000a 	sub.w	r0, r0, sl
 8002316:	2802      	cmp	r0, #2
 8002318:	f67f aef5 	bls.w	8002106 <HAL_RCCEx_PeriphCLKConfig+0xe2>
        ret = HAL_TIMEOUT;
 800231c:	2703      	movs	r7, #3
 800231e:	e70a      	b.n	8002136 <HAL_RCCEx_PeriphCLKConfig+0x112>
 8002320:	40021000 	.word	0x40021000
 8002324:	40007000 	.word	0x40007000
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002328:	429a      	cmp	r2, r3
 800232a:	d011      	beq.n	8002350 <HAL_RCCEx_PeriphCLKConfig+0x32c>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800232c:	f8d6 3090 	ldr.w	r3, [r6, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_FORCE();
 8002330:	f8d6 2090 	ldr.w	r2, [r6, #144]	@ 0x90
 8002334:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8002338:	f8c6 2090 	str.w	r2, [r6, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800233c:	f8d6 2090 	ldr.w	r2, [r6, #144]	@ 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002340:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002344:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8002348:	f8c6 2090 	str.w	r2, [r6, #144]	@ 0x90
        RCC->BDCR = tmpregister;
 800234c:	f8c6 3090 	str.w	r3, [r6, #144]	@ 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002350:	07d8      	lsls	r0, r3, #31
 8002352:	f57f aee6 	bpl.w	8002122 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        tickstart = HAL_GetTick();
 8002356:	f7fe ffd9 	bl	800130c <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800235a:	f241 3988 	movw	r9, #5000	@ 0x1388
        tickstart = HAL_GetTick();
 800235e:	4607      	mov	r7, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002360:	f8d6 3090 	ldr.w	r3, [r6, #144]	@ 0x90
 8002364:	0799      	lsls	r1, r3, #30
 8002366:	f53f aedc 	bmi.w	8002122 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800236a:	f7fe ffcf 	bl	800130c <HAL_GetTick>
 800236e:	1bc0      	subs	r0, r0, r7
 8002370:	4548      	cmp	r0, r9
 8002372:	d9f5      	bls.n	8002360 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8002374:	e7d2      	b.n	800231c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002376:	f1b1 6f80 	cmp.w	r1, #67108864	@ 0x4000000
 800237a:	f47f af71 	bne.w	8002260 <HAL_RCCEx_PeriphCLKConfig+0x23c>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800237e:	2101      	movs	r1, #1
 8002380:	1d20      	adds	r0, r4, #4
 8002382:	f7ff fd4f 	bl	8001e24 <RCCEx_PLLSAI1_Config>
        if(ret != HAL_OK)
 8002386:	4607      	mov	r7, r0
 8002388:	2800      	cmp	r0, #0
 800238a:	f43f af69 	beq.w	8002260 <HAL_RCCEx_PeriphCLKConfig+0x23c>
 800238e:	e768      	b.n	8002262 <HAL_RCCEx_PeriphCLKConfig+0x23e>
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002390:	f1b1 6f80 	cmp.w	r1, #67108864	@ 0x4000000
 8002394:	f47f af79 	bne.w	800228a <HAL_RCCEx_PeriphCLKConfig+0x266>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002398:	2101      	movs	r1, #1
 800239a:	1d20      	adds	r0, r4, #4
 800239c:	f7ff fd42 	bl	8001e24 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 80023a0:	4606      	mov	r6, r0
 80023a2:	2800      	cmp	r0, #0
 80023a4:	f43f af71 	beq.w	800228a <HAL_RCCEx_PeriphCLKConfig+0x266>
 80023a8:	e770      	b.n	800228c <HAL_RCCEx_PeriphCLKConfig+0x268>
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80023aa:	f1b1 6f80 	cmp.w	r1, #67108864	@ 0x4000000
 80023ae:	d180      	bne.n	80022b2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80023b0:	2101      	movs	r1, #1
 80023b2:	1d20      	adds	r0, r4, #4
 80023b4:	f7ff fd36 	bl	8001e24 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 80023b8:	4605      	mov	r5, r0
 80023ba:	2800      	cmp	r0, #0
 80023bc:	f43f af79 	beq.w	80022b2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
 80023c0:	e778      	b.n	80022b4 <HAL_RCCEx_PeriphCLKConfig+0x290>
    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80023c2:	f1b2 5f00 	cmp.w	r2, #536870912	@ 0x20000000
 80023c6:	d01b      	beq.n	8002400 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
 80023c8:	4628      	mov	r0, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80023ca:	6822      	ldr	r2, [r4, #0]
 80023cc:	0411      	lsls	r1, r2, #16
 80023ce:	d508      	bpl.n	80023e2 <HAL_RCCEx_PeriphCLKConfig+0x3be>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80023d0:	490e      	ldr	r1, [pc, #56]	@ (800240c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80023d2:	6fe5      	ldr	r5, [r4, #124]	@ 0x7c
 80023d4:	f8d1 3088 	ldr.w	r3, [r1, #136]	@ 0x88
 80023d8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80023dc:	432b      	orrs	r3, r5
 80023de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80023e2:	03d3      	lsls	r3, r2, #15
 80023e4:	d509      	bpl.n	80023fa <HAL_RCCEx_PeriphCLKConfig+0x3d6>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80023e6:	4a09      	ldr	r2, [pc, #36]	@ (800240c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80023e8:	f8d4 1080 	ldr.w	r1, [r4, #128]	@ 0x80
 80023ec:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 80023f0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80023f4:	430b      	orrs	r3, r1
 80023f6:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
}
 80023fa:	b002      	add	sp, #8
 80023fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002400:	2102      	movs	r1, #2
 8002402:	f104 0020 	add.w	r0, r4, #32
 8002406:	f7ff fd93 	bl	8001f30 <RCCEx_PLLSAI2_Config>
 800240a:	e767      	b.n	80022dc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 800240c:	40021000 	.word	0x40021000

08002410 <UART_EndRxTransfer>:
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002410:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002412:	e852 3f00 	ldrex	r3, [r2]
 8002416:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800241a:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 800241e:	6802      	ldr	r2, [r0, #0]
 8002420:	2900      	cmp	r1, #0
 8002422:	d1f5      	bne.n	8002410 <UART_EndRxTransfer>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002424:	f102 0308 	add.w	r3, r2, #8
 8002428:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800242c:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002430:	f102 0c08 	add.w	ip, r2, #8
 8002434:	e84c 3100 	strex	r1, r3, [ip]
 8002438:	2900      	cmp	r1, #0
 800243a:	d1f3      	bne.n	8002424 <UART_EndRxTransfer+0x14>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800243c:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 800243e:	2b01      	cmp	r3, #1
 8002440:	d107      	bne.n	8002452 <UART_EndRxTransfer+0x42>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002442:	e852 3f00 	ldrex	r3, [r2]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002446:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800244a:	e842 3100 	strex	r1, r3, [r2]
 800244e:	2900      	cmp	r1, #0
 8002450:	d1f7      	bne.n	8002442 <UART_EndRxTransfer+0x32>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002452:	2320      	movs	r3, #32
 8002454:	f8c0 3080 	str.w	r3, [r0, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002458:	2300      	movs	r3, #0
 800245a:	6603      	str	r3, [r0, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800245c:	6683      	str	r3, [r0, #104]	@ 0x68
}
 800245e:	4770      	bx	lr

08002460 <UART_SetConfig>:
{
 8002460:	b538      	push	{r3, r4, r5, lr}
 8002462:	4604      	mov	r4, r0
  if (UART_INSTANCE_LOWPOWER(huart))
 8002464:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002466:	6921      	ldr	r1, [r4, #16]
 8002468:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800246a:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800246c:	69c0      	ldr	r0, [r0, #28]
 800246e:	430a      	orrs	r2, r1
 8002470:	6961      	ldr	r1, [r4, #20]
 8002472:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002474:	497e      	ldr	r1, [pc, #504]	@ (8002670 <UART_SetConfig+0x210>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002476:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002478:	4029      	ands	r1, r5
 800247a:	430a      	orrs	r2, r1
 800247c:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800247e:	685a      	ldr	r2, [r3, #4]
 8002480:	68e1      	ldr	r1, [r4, #12]
 8002482:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 8002486:	430a      	orrs	r2, r1
 8002488:	605a      	str	r2, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800248a:	4a7a      	ldr	r2, [pc, #488]	@ (8002674 <UART_SetConfig+0x214>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800248c:	69a1      	ldr	r1, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800248e:	4293      	cmp	r3, r2
    tmpreg |= huart->Init.OneBitSampling;
 8002490:	bf1c      	itt	ne
 8002492:	6a22      	ldrne	r2, [r4, #32]
 8002494:	4311      	orrne	r1, r2
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002496:	689a      	ldr	r2, [r3, #8]
 8002498:	f422 6230 	bic.w	r2, r2, #2816	@ 0xb00
 800249c:	430a      	orrs	r2, r1
 800249e:	609a      	str	r2, [r3, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 80024a0:	4a75      	ldr	r2, [pc, #468]	@ (8002678 <UART_SetConfig+0x218>)
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d113      	bne.n	80024ce <UART_SetConfig+0x6e>
 80024a6:	4b75      	ldr	r3, [pc, #468]	@ (800267c <UART_SetConfig+0x21c>)
 80024a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024ac:	f003 0303 	and.w	r3, r3, #3
 80024b0:	2b02      	cmp	r3, #2
 80024b2:	f000 80b8 	beq.w	8002626 <UART_SetConfig+0x1c6>
 80024b6:	2b03      	cmp	r3, #3
 80024b8:	d01e      	beq.n	80024f8 <UART_SetConfig+0x98>
 80024ba:	2b01      	cmp	r3, #1
 80024bc:	f040 80bb 	bne.w	8002636 <UART_SetConfig+0x1d6>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80024c0:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 80024c4:	f040 80a6 	bne.w	8002614 <UART_SetConfig+0x1b4>
        pclk = HAL_RCC_GetSysClockFreq();
 80024c8:	f7ff f90c 	bl	80016e4 <HAL_RCC_GetSysClockFreq>
        break;
 80024cc:	e0b8      	b.n	8002640 <UART_SetConfig+0x1e0>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80024ce:	4a6c      	ldr	r2, [pc, #432]	@ (8002680 <UART_SetConfig+0x220>)
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d118      	bne.n	8002506 <UART_SetConfig+0xa6>
 80024d4:	4b69      	ldr	r3, [pc, #420]	@ (800267c <UART_SetConfig+0x21c>)
 80024d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024da:	f003 030c 	and.w	r3, r3, #12
 80024de:	2b08      	cmp	r3, #8
 80024e0:	f000 80a1 	beq.w	8002626 <UART_SetConfig+0x1c6>
 80024e4:	d806      	bhi.n	80024f4 <UART_SetConfig+0x94>
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	f000 8097 	beq.w	800261a <UART_SetConfig+0x1ba>
 80024ec:	2b04      	cmp	r3, #4
 80024ee:	d0e7      	beq.n	80024c0 <UART_SetConfig+0x60>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80024f0:	2001      	movs	r0, #1
 80024f2:	e053      	b.n	800259c <UART_SetConfig+0x13c>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80024f4:	2b0c      	cmp	r3, #12
 80024f6:	d1fb      	bne.n	80024f0 <UART_SetConfig+0x90>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80024f8:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 80024fc:	f000 80a2 	beq.w	8002644 <UART_SetConfig+0x1e4>
        pclk = (uint32_t) LSE_VALUE;
 8002500:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8002504:	e077      	b.n	80025f6 <UART_SetConfig+0x196>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002506:	4a5f      	ldr	r2, [pc, #380]	@ (8002684 <UART_SetConfig+0x224>)
 8002508:	4293      	cmp	r3, r2
 800250a:	d10e      	bne.n	800252a <UART_SetConfig+0xca>
 800250c:	4b5b      	ldr	r3, [pc, #364]	@ (800267c <UART_SetConfig+0x21c>)
 800250e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002512:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8002516:	2b20      	cmp	r3, #32
 8002518:	f000 8085 	beq.w	8002626 <UART_SetConfig+0x1c6>
 800251c:	d803      	bhi.n	8002526 <UART_SetConfig+0xc6>
 800251e:	2b00      	cmp	r3, #0
 8002520:	d07b      	beq.n	800261a <UART_SetConfig+0x1ba>
 8002522:	2b10      	cmp	r3, #16
 8002524:	e7e3      	b.n	80024ee <UART_SetConfig+0x8e>
 8002526:	2b30      	cmp	r3, #48	@ 0x30
 8002528:	e7e5      	b.n	80024f6 <UART_SetConfig+0x96>
 800252a:	4a57      	ldr	r2, [pc, #348]	@ (8002688 <UART_SetConfig+0x228>)
 800252c:	4293      	cmp	r3, r2
 800252e:	d10d      	bne.n	800254c <UART_SetConfig+0xec>
 8002530:	4b52      	ldr	r3, [pc, #328]	@ (800267c <UART_SetConfig+0x21c>)
 8002532:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002536:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800253a:	2b80      	cmp	r3, #128	@ 0x80
 800253c:	d073      	beq.n	8002626 <UART_SetConfig+0x1c6>
 800253e:	d803      	bhi.n	8002548 <UART_SetConfig+0xe8>
 8002540:	2b00      	cmp	r3, #0
 8002542:	d06a      	beq.n	800261a <UART_SetConfig+0x1ba>
 8002544:	2b40      	cmp	r3, #64	@ 0x40
 8002546:	e7d2      	b.n	80024ee <UART_SetConfig+0x8e>
 8002548:	2bc0      	cmp	r3, #192	@ 0xc0
 800254a:	e7d4      	b.n	80024f6 <UART_SetConfig+0x96>
 800254c:	4a4f      	ldr	r2, [pc, #316]	@ (800268c <UART_SetConfig+0x22c>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d110      	bne.n	8002574 <UART_SetConfig+0x114>
 8002552:	4b4a      	ldr	r3, [pc, #296]	@ (800267c <UART_SetConfig+0x21c>)
 8002554:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002558:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800255c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002560:	d061      	beq.n	8002626 <UART_SetConfig+0x1c6>
 8002562:	d804      	bhi.n	800256e <UART_SetConfig+0x10e>
 8002564:	2b00      	cmp	r3, #0
 8002566:	d058      	beq.n	800261a <UART_SetConfig+0x1ba>
 8002568:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800256c:	e7bf      	b.n	80024ee <UART_SetConfig+0x8e>
 800256e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002572:	e7c0      	b.n	80024f6 <UART_SetConfig+0x96>
 8002574:	4a3f      	ldr	r2, [pc, #252]	@ (8002674 <UART_SetConfig+0x214>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d1ba      	bne.n	80024f0 <UART_SetConfig+0x90>
 800257a:	4b40      	ldr	r3, [pc, #256]	@ (800267c <UART_SetConfig+0x21c>)
 800257c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002580:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002584:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002588:	d015      	beq.n	80025b6 <UART_SetConfig+0x156>
 800258a:	d80b      	bhi.n	80025a4 <UART_SetConfig+0x144>
 800258c:	b183      	cbz	r3, 80025b0 <UART_SetConfig+0x150>
 800258e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002592:	d1ad      	bne.n	80024f0 <UART_SetConfig+0x90>
        pclk = HAL_RCC_GetSysClockFreq();
 8002594:	f7ff f8a6 	bl	80016e4 <HAL_RCC_GetSysClockFreq>
    if (pclk != 0U)
 8002598:	b970      	cbnz	r0, 80025b8 <UART_SetConfig+0x158>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800259a:	2000      	movs	r0, #0
  huart->RxISR = NULL;
 800259c:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 800259e:	e9c4 331a 	strd	r3, r3, [r4, #104]	@ 0x68
}
 80025a2:	bd38      	pop	{r3, r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 80025a4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80025a8:	d1a2      	bne.n	80024f0 <UART_SetConfig+0x90>
 80025aa:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 80025ae:	e003      	b.n	80025b8 <UART_SetConfig+0x158>
        pclk = HAL_RCC_GetPCLK1Freq();
 80025b0:	f7ff fc14 	bl	8001ddc <HAL_RCC_GetPCLK1Freq>
        break;
 80025b4:	e7f0      	b.n	8002598 <UART_SetConfig+0x138>
        pclk = (uint32_t) HSI_VALUE;
 80025b6:	4836      	ldr	r0, [pc, #216]	@ (8002690 <UART_SetConfig+0x230>)
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80025b8:	6862      	ldr	r2, [r4, #4]
 80025ba:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 80025be:	4283      	cmp	r3, r0
 80025c0:	d896      	bhi.n	80024f0 <UART_SetConfig+0x90>
 80025c2:	ebb0 3f02 	cmp.w	r0, r2, lsl #12
 80025c6:	d893      	bhi.n	80024f0 <UART_SetConfig+0x90>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80025c8:	0851      	lsrs	r1, r2, #1
 80025ca:	2300      	movs	r3, #0
 80025cc:	468c      	mov	ip, r1
 80025ce:	f44f 7580 	mov.w	r5, #256	@ 0x100
 80025d2:	4619      	mov	r1, r3
 80025d4:	fbe0 c105 	umlal	ip, r1, r0, r5
 80025d8:	4660      	mov	r0, ip
 80025da:	f7fe fae5 	bl	8000ba8 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80025de:	4b2d      	ldr	r3, [pc, #180]	@ (8002694 <UART_SetConfig+0x234>)
 80025e0:	f5a0 7240 	sub.w	r2, r0, #768	@ 0x300
 80025e4:	429a      	cmp	r2, r3
 80025e6:	d883      	bhi.n	80024f0 <UART_SetConfig+0x90>
          huart->Instance->BRR = usartdiv;
 80025e8:	6823      	ldr	r3, [r4, #0]
 80025ea:	60d8      	str	r0, [r3, #12]
 80025ec:	e7d5      	b.n	800259a <UART_SetConfig+0x13a>
        pclk = HAL_RCC_GetPCLK1Freq();
 80025ee:	f7ff fbf5 	bl	8001ddc <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 80025f2:	2800      	cmp	r0, #0
 80025f4:	d0d1      	beq.n	800259a <UART_SetConfig+0x13a>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80025f6:	6862      	ldr	r2, [r4, #4]
 80025f8:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 80025fc:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002600:	f64f 72ef 	movw	r2, #65519	@ 0xffef
 8002604:	f1a3 0110 	sub.w	r1, r3, #16
 8002608:	4291      	cmp	r1, r2
 800260a:	f63f af71 	bhi.w	80024f0 <UART_SetConfig+0x90>
        huart->Instance->BRR = (uint16_t)usartdiv;
 800260e:	6822      	ldr	r2, [r4, #0]
 8002610:	60d3      	str	r3, [r2, #12]
 8002612:	e7c2      	b.n	800259a <UART_SetConfig+0x13a>
        pclk = HAL_RCC_GetSysClockFreq();
 8002614:	f7ff f866 	bl	80016e4 <HAL_RCC_GetSysClockFreq>
        break;
 8002618:	e7eb      	b.n	80025f2 <UART_SetConfig+0x192>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800261a:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 800261e:	d1e6      	bne.n	80025ee <UART_SetConfig+0x18e>
        pclk = HAL_RCC_GetPCLK1Freq();
 8002620:	f7ff fbdc 	bl	8001ddc <HAL_RCC_GetPCLK1Freq>
        break;
 8002624:	e00c      	b.n	8002640 <UART_SetConfig+0x1e0>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002626:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 800262a:	4819      	ldr	r0, [pc, #100]	@ (8002690 <UART_SetConfig+0x230>)
 800262c:	d1e3      	bne.n	80025f6 <UART_SetConfig+0x196>
 800262e:	e009      	b.n	8002644 <UART_SetConfig+0x1e4>
        pclk = HAL_RCC_GetPCLK2Freq();
 8002630:	f7ff fbe6 	bl	8001e00 <HAL_RCC_GetPCLK2Freq>
        break;
 8002634:	e7dd      	b.n	80025f2 <UART_SetConfig+0x192>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002636:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 800263a:	d1f9      	bne.n	8002630 <UART_SetConfig+0x1d0>
        pclk = HAL_RCC_GetPCLK2Freq();
 800263c:	f7ff fbe0 	bl	8001e00 <HAL_RCC_GetPCLK2Freq>
    if (pclk != 0U)
 8002640:	2800      	cmp	r0, #0
 8002642:	d0aa      	beq.n	800259a <UART_SetConfig+0x13a>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002644:	6862      	ldr	r2, [r4, #4]
 8002646:	0853      	lsrs	r3, r2, #1
 8002648:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 800264c:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002650:	f64f 72ef 	movw	r2, #65519	@ 0xffef
 8002654:	f1a3 0110 	sub.w	r1, r3, #16
 8002658:	4291      	cmp	r1, r2
 800265a:	f63f af49 	bhi.w	80024f0 <UART_SetConfig+0x90>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800265e:	f023 020f 	bic.w	r2, r3, #15
        huart->Instance->BRR = brrtemp;
 8002662:	6821      	ldr	r1, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002664:	b292      	uxth	r2, r2
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002666:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
 800266a:	4313      	orrs	r3, r2
 800266c:	60cb      	str	r3, [r1, #12]
 800266e:	e794      	b.n	800259a <UART_SetConfig+0x13a>
 8002670:	efff69f3 	.word	0xefff69f3
 8002674:	40008000 	.word	0x40008000
 8002678:	40013800 	.word	0x40013800
 800267c:	40021000 	.word	0x40021000
 8002680:	40004400 	.word	0x40004400
 8002684:	40004800 	.word	0x40004800
 8002688:	40004c00 	.word	0x40004c00
 800268c:	40005000 	.word	0x40005000
 8002690:	00f42400 	.word	0x00f42400
 8002694:	000ffcff 	.word	0x000ffcff

08002698 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002698:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800269a:	071a      	lsls	r2, r3, #28
{
 800269c:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800269e:	d506      	bpl.n	80026ae <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80026a0:	6801      	ldr	r1, [r0, #0]
 80026a2:	6b44      	ldr	r4, [r0, #52]	@ 0x34
 80026a4:	684a      	ldr	r2, [r1, #4]
 80026a6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80026aa:	4322      	orrs	r2, r4
 80026ac:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80026ae:	07dc      	lsls	r4, r3, #31
 80026b0:	d506      	bpl.n	80026c0 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80026b2:	6801      	ldr	r1, [r0, #0]
 80026b4:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 80026b6:	684a      	ldr	r2, [r1, #4]
 80026b8:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 80026bc:	4322      	orrs	r2, r4
 80026be:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80026c0:	0799      	lsls	r1, r3, #30
 80026c2:	d506      	bpl.n	80026d2 <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80026c4:	6801      	ldr	r1, [r0, #0]
 80026c6:	6ac4      	ldr	r4, [r0, #44]	@ 0x2c
 80026c8:	684a      	ldr	r2, [r1, #4]
 80026ca:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80026ce:	4322      	orrs	r2, r4
 80026d0:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80026d2:	075a      	lsls	r2, r3, #29
 80026d4:	d506      	bpl.n	80026e4 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80026d6:	6801      	ldr	r1, [r0, #0]
 80026d8:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 80026da:	684a      	ldr	r2, [r1, #4]
 80026dc:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80026e0:	4322      	orrs	r2, r4
 80026e2:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80026e4:	06dc      	lsls	r4, r3, #27
 80026e6:	d506      	bpl.n	80026f6 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80026e8:	6801      	ldr	r1, [r0, #0]
 80026ea:	6b84      	ldr	r4, [r0, #56]	@ 0x38
 80026ec:	688a      	ldr	r2, [r1, #8]
 80026ee:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80026f2:	4322      	orrs	r2, r4
 80026f4:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80026f6:	0699      	lsls	r1, r3, #26
 80026f8:	d506      	bpl.n	8002708 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80026fa:	6801      	ldr	r1, [r0, #0]
 80026fc:	6bc4      	ldr	r4, [r0, #60]	@ 0x3c
 80026fe:	688a      	ldr	r2, [r1, #8]
 8002700:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002704:	4322      	orrs	r2, r4
 8002706:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002708:	065a      	lsls	r2, r3, #25
 800270a:	d50f      	bpl.n	800272c <UART_AdvFeatureConfig+0x94>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800270c:	6801      	ldr	r1, [r0, #0]
 800270e:	6c04      	ldr	r4, [r0, #64]	@ 0x40
 8002710:	684a      	ldr	r2, [r1, #4]
 8002712:	f422 1280 	bic.w	r2, r2, #1048576	@ 0x100000
 8002716:	4322      	orrs	r2, r4
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002718:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800271c:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800271e:	d105      	bne.n	800272c <UART_AdvFeatureConfig+0x94>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002720:	684a      	ldr	r2, [r1, #4]
 8002722:	6c44      	ldr	r4, [r0, #68]	@ 0x44
 8002724:	f422 02c0 	bic.w	r2, r2, #6291456	@ 0x600000
 8002728:	4322      	orrs	r2, r4
 800272a:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800272c:	061b      	lsls	r3, r3, #24
 800272e:	d506      	bpl.n	800273e <UART_AdvFeatureConfig+0xa6>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002730:	6802      	ldr	r2, [r0, #0]
 8002732:	6c81      	ldr	r1, [r0, #72]	@ 0x48
 8002734:	6853      	ldr	r3, [r2, #4]
 8002736:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 800273a:	430b      	orrs	r3, r1
 800273c:	6053      	str	r3, [r2, #4]
}
 800273e:	bd10      	pop	{r4, pc}

08002740 <UART_WaitOnFlagUntilTimeout>:
{
 8002740:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002744:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8002748:	4604      	mov	r4, r0
 800274a:	460f      	mov	r7, r1
 800274c:	4616      	mov	r6, r2
 800274e:	4698      	mov	r8, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002750:	6822      	ldr	r2, [r4, #0]
 8002752:	69d3      	ldr	r3, [r2, #28]
 8002754:	ea37 0303 	bics.w	r3, r7, r3
 8002758:	bf0c      	ite	eq
 800275a:	2301      	moveq	r3, #1
 800275c:	2300      	movne	r3, #0
 800275e:	42b3      	cmp	r3, r6
 8002760:	d001      	beq.n	8002766 <UART_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 8002762:	2000      	movs	r0, #0
 8002764:	e01e      	b.n	80027a4 <UART_WaitOnFlagUntilTimeout+0x64>
    if (Timeout != HAL_MAX_DELAY)
 8002766:	f1b9 3fff 	cmp.w	r9, #4294967295
 800276a:	d0f2      	beq.n	8002752 <UART_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800276c:	f7fe fdce 	bl	800130c <HAL_GetTick>
 8002770:	eba0 0008 	sub.w	r0, r0, r8
 8002774:	4548      	cmp	r0, r9
 8002776:	d825      	bhi.n	80027c4 <UART_WaitOnFlagUntilTimeout+0x84>
 8002778:	f1b9 0f00 	cmp.w	r9, #0
 800277c:	d022      	beq.n	80027c4 <UART_WaitOnFlagUntilTimeout+0x84>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800277e:	6820      	ldr	r0, [r4, #0]
 8002780:	6803      	ldr	r3, [r0, #0]
 8002782:	075a      	lsls	r2, r3, #29
 8002784:	d5e4      	bpl.n	8002750 <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002786:	69c5      	ldr	r5, [r0, #28]
 8002788:	f015 0508 	ands.w	r5, r5, #8
 800278c:	d00c      	beq.n	80027a8 <UART_WaitOnFlagUntilTimeout+0x68>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800278e:	2508      	movs	r5, #8
 8002790:	6205      	str	r5, [r0, #32]
          UART_EndRxTransfer(huart);
 8002792:	4620      	mov	r0, r4
 8002794:	f7ff fe3c 	bl	8002410 <UART_EndRxTransfer>
          __HAL_UNLOCK(huart);
 8002798:	2300      	movs	r3, #0
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800279a:	f8c4 5084 	str.w	r5, [r4, #132]	@ 0x84
          __HAL_UNLOCK(huart);
 800279e:	f884 3078 	strb.w	r3, [r4, #120]	@ 0x78
          return HAL_ERROR;
 80027a2:	2001      	movs	r0, #1
}
 80027a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80027a8:	69c3      	ldr	r3, [r0, #28]
 80027aa:	051b      	lsls	r3, r3, #20
 80027ac:	d5d0      	bpl.n	8002750 <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80027ae:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80027b2:	6203      	str	r3, [r0, #32]
          UART_EndRxTransfer(huart);
 80027b4:	4620      	mov	r0, r4
 80027b6:	f7ff fe2b 	bl	8002410 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80027ba:	2320      	movs	r3, #32
 80027bc:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
          __HAL_UNLOCK(huart);
 80027c0:	f884 5078 	strb.w	r5, [r4, #120]	@ 0x78
        return HAL_TIMEOUT;
 80027c4:	2003      	movs	r0, #3
 80027c6:	e7ed      	b.n	80027a4 <UART_WaitOnFlagUntilTimeout+0x64>

080027c8 <HAL_UART_Transmit>:
{
 80027c8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80027cc:	4698      	mov	r8, r3
  if (huart->gState == HAL_UART_STATE_READY)
 80027ce:	6fc3      	ldr	r3, [r0, #124]	@ 0x7c
 80027d0:	2b20      	cmp	r3, #32
{
 80027d2:	4604      	mov	r4, r0
 80027d4:	460e      	mov	r6, r1
 80027d6:	4617      	mov	r7, r2
  if (huart->gState == HAL_UART_STATE_READY)
 80027d8:	d143      	bne.n	8002862 <HAL_UART_Transmit+0x9a>
    if ((pData == NULL) || (Size == 0U))
 80027da:	2900      	cmp	r1, #0
 80027dc:	d043      	beq.n	8002866 <HAL_UART_Transmit+0x9e>
 80027de:	2a00      	cmp	r2, #0
 80027e0:	d041      	beq.n	8002866 <HAL_UART_Transmit+0x9e>
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80027e2:	2321      	movs	r3, #33	@ 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027e4:	2500      	movs	r5, #0
 80027e6:	f8c0 5084 	str.w	r5, [r0, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80027ea:	67c3      	str	r3, [r0, #124]	@ 0x7c
    tickstart = HAL_GetTick();
 80027ec:	f7fe fd8e 	bl	800130c <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80027f0:	68a3      	ldr	r3, [r4, #8]
    huart->TxXferSize  = Size;
 80027f2:	f8a4 7050 	strh.w	r7, [r4, #80]	@ 0x50
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80027f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
    tickstart = HAL_GetTick();
 80027fa:	4681      	mov	r9, r0
    huart->TxXferCount = Size;
 80027fc:	f8a4 7052 	strh.w	r7, [r4, #82]	@ 0x52
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002800:	d103      	bne.n	800280a <HAL_UART_Transmit+0x42>
 8002802:	6923      	ldr	r3, [r4, #16]
 8002804:	b90b      	cbnz	r3, 800280a <HAL_UART_Transmit+0x42>
 8002806:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 8002808:	461e      	mov	r6, r3
    while (huart->TxXferCount > 0U)
 800280a:	f8b4 2052 	ldrh.w	r2, [r4, #82]	@ 0x52
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800280e:	f8cd 8000 	str.w	r8, [sp]
    while (huart->TxXferCount > 0U)
 8002812:	b292      	uxth	r2, r2
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002814:	464b      	mov	r3, r9
    while (huart->TxXferCount > 0U)
 8002816:	b93a      	cbnz	r2, 8002828 <HAL_UART_Transmit+0x60>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002818:	2140      	movs	r1, #64	@ 0x40
 800281a:	4620      	mov	r0, r4
 800281c:	f7ff ff90 	bl	8002740 <UART_WaitOnFlagUntilTimeout>
 8002820:	2320      	movs	r3, #32
 8002822:	b940      	cbnz	r0, 8002836 <HAL_UART_Transmit+0x6e>
    huart->gState = HAL_UART_STATE_READY;
 8002824:	67e3      	str	r3, [r4, #124]	@ 0x7c
    return HAL_OK;
 8002826:	e008      	b.n	800283a <HAL_UART_Transmit+0x72>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002828:	2200      	movs	r2, #0
 800282a:	2180      	movs	r1, #128	@ 0x80
 800282c:	4620      	mov	r0, r4
 800282e:	f7ff ff87 	bl	8002740 <UART_WaitOnFlagUntilTimeout>
 8002832:	b128      	cbz	r0, 8002840 <HAL_UART_Transmit+0x78>
        huart->gState = HAL_UART_STATE_READY;
 8002834:	2320      	movs	r3, #32
 8002836:	67e3      	str	r3, [r4, #124]	@ 0x7c
        return HAL_TIMEOUT;
 8002838:	2003      	movs	r0, #3
}
 800283a:	b003      	add	sp, #12
 800283c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002840:	6822      	ldr	r2, [r4, #0]
      if (pdata8bits == NULL)
 8002842:	b95e      	cbnz	r6, 800285c <HAL_UART_Transmit+0x94>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002844:	f835 3b02 	ldrh.w	r3, [r5], #2
 8002848:	f3c3 0308 	ubfx	r3, r3, #0, #9
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800284c:	8513      	strh	r3, [r2, #40]	@ 0x28
      huart->TxXferCount--;
 800284e:	f8b4 2052 	ldrh.w	r2, [r4, #82]	@ 0x52
 8002852:	3a01      	subs	r2, #1
 8002854:	b292      	uxth	r2, r2
 8002856:	f8a4 2052 	strh.w	r2, [r4, #82]	@ 0x52
 800285a:	e7d6      	b.n	800280a <HAL_UART_Transmit+0x42>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800285c:	f816 3b01 	ldrb.w	r3, [r6], #1
 8002860:	e7f4      	b.n	800284c <HAL_UART_Transmit+0x84>
    return HAL_BUSY;
 8002862:	2002      	movs	r0, #2
 8002864:	e7e9      	b.n	800283a <HAL_UART_Transmit+0x72>
      return  HAL_ERROR;
 8002866:	2001      	movs	r0, #1
 8002868:	e7e7      	b.n	800283a <HAL_UART_Transmit+0x72>

0800286a <HAL_UART_Receive>:
{
 800286a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800286e:	4698      	mov	r8, r3
  if (huart->RxState == HAL_UART_STATE_READY)
 8002870:	f8d0 3080 	ldr.w	r3, [r0, #128]	@ 0x80
 8002874:	2b20      	cmp	r3, #32
{
 8002876:	4604      	mov	r4, r0
 8002878:	460f      	mov	r7, r1
 800287a:	4616      	mov	r6, r2
  if (huart->RxState == HAL_UART_STATE_READY)
 800287c:	d15d      	bne.n	800293a <HAL_UART_Receive+0xd0>
    if ((pData == NULL) || (Size == 0U))
 800287e:	2900      	cmp	r1, #0
 8002880:	d05d      	beq.n	800293e <HAL_UART_Receive+0xd4>
 8002882:	2a00      	cmp	r2, #0
 8002884:	d05b      	beq.n	800293e <HAL_UART_Receive+0xd4>
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002886:	2322      	movs	r3, #34	@ 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002888:	2500      	movs	r5, #0
 800288a:	f8c0 5084 	str.w	r5, [r0, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800288e:	f8c0 3080 	str.w	r3, [r0, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002892:	6605      	str	r5, [r0, #96]	@ 0x60
    tickstart = HAL_GetTick();
 8002894:	f7fe fd3a 	bl	800130c <HAL_GetTick>
    UART_MASK_COMPUTATION(huart);
 8002898:	68a3      	ldr	r3, [r4, #8]
    huart->RxXferSize  = Size;
 800289a:	f8a4 6058 	strh.w	r6, [r4, #88]	@ 0x58
    UART_MASK_COMPUTATION(huart);
 800289e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
    tickstart = HAL_GetTick();
 80028a2:	4681      	mov	r9, r0
    huart->RxXferCount = Size;
 80028a4:	f8a4 605a 	strh.w	r6, [r4, #90]	@ 0x5a
    UART_MASK_COMPUTATION(huart);
 80028a8:	d10d      	bne.n	80028c6 <HAL_UART_Receive+0x5c>
 80028aa:	6923      	ldr	r3, [r4, #16]
 80028ac:	b1c3      	cbz	r3, 80028e0 <HAL_UART_Receive+0x76>
    uhMask = huart->Mask;
 80028ae:	26ff      	movs	r6, #255	@ 0xff
 80028b0:	4632      	mov	r2, r6
    UART_MASK_COMPUTATION(huart);
 80028b2:	f8a4 205c 	strh.w	r2, [r4, #92]	@ 0x5c
    while (huart->RxXferCount > 0U)
 80028b6:	f8b4 005a 	ldrh.w	r0, [r4, #90]	@ 0x5a
 80028ba:	b280      	uxth	r0, r0
 80028bc:	b9e8      	cbnz	r0, 80028fa <HAL_UART_Receive+0x90>
    huart->RxState = HAL_UART_STATE_READY;
 80028be:	2320      	movs	r3, #32
 80028c0:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
    return HAL_OK;
 80028c4:	e026      	b.n	8002914 <HAL_UART_Receive+0xaa>
    UART_MASK_COMPUTATION(huart);
 80028c6:	b923      	cbnz	r3, 80028d2 <HAL_UART_Receive+0x68>
 80028c8:	6925      	ldr	r5, [r4, #16]
 80028ca:	b995      	cbnz	r5, 80028f2 <HAL_UART_Receive+0x88>
 80028cc:	22ff      	movs	r2, #255	@ 0xff
    uhMask = huart->Mask;
 80028ce:	4616      	mov	r6, r2
 80028d0:	e7ef      	b.n	80028b2 <HAL_UART_Receive+0x48>
    UART_MASK_COMPUTATION(huart);
 80028d2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80028d6:	d109      	bne.n	80028ec <HAL_UART_Receive+0x82>
 80028d8:	6923      	ldr	r3, [r4, #16]
 80028da:	b153      	cbz	r3, 80028f2 <HAL_UART_Receive+0x88>
 80028dc:	223f      	movs	r2, #63	@ 0x3f
 80028de:	e7f6      	b.n	80028ce <HAL_UART_Receive+0x64>
    uhMask = huart->Mask;
 80028e0:	f240 16ff 	movw	r6, #511	@ 0x1ff
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80028e4:	463d      	mov	r5, r7
 80028e6:	4632      	mov	r2, r6
      pdata8bits  = NULL;
 80028e8:	2700      	movs	r7, #0
 80028ea:	e7e2      	b.n	80028b2 <HAL_UART_Receive+0x48>
 80028ec:	462a      	mov	r2, r5
    uhMask = huart->Mask;
 80028ee:	462e      	mov	r6, r5
 80028f0:	e7df      	b.n	80028b2 <HAL_UART_Receive+0x48>
 80028f2:	227f      	movs	r2, #127	@ 0x7f
 80028f4:	4616      	mov	r6, r2
      pdata16bits = NULL;
 80028f6:	461d      	mov	r5, r3
 80028f8:	e7db      	b.n	80028b2 <HAL_UART_Receive+0x48>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80028fa:	f8cd 8000 	str.w	r8, [sp]
 80028fe:	464b      	mov	r3, r9
 8002900:	2200      	movs	r2, #0
 8002902:	2120      	movs	r1, #32
 8002904:	4620      	mov	r0, r4
 8002906:	f7ff ff1b 	bl	8002740 <UART_WaitOnFlagUntilTimeout>
 800290a:	b130      	cbz	r0, 800291a <HAL_UART_Receive+0xb0>
        huart->RxState = HAL_UART_STATE_READY;
 800290c:	2320      	movs	r3, #32
 800290e:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
        return HAL_TIMEOUT;
 8002912:	2003      	movs	r0, #3
}
 8002914:	b003      	add	sp, #12
 8002916:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800291a:	6823      	ldr	r3, [r4, #0]
 800291c:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800291e:	4033      	ands	r3, r6
      if (pdata8bits == NULL)
 8002920:	b947      	cbnz	r7, 8002934 <HAL_UART_Receive+0xca>
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8002922:	f825 3b02 	strh.w	r3, [r5], #2
      huart->RxXferCount--;
 8002926:	f8b4 305a 	ldrh.w	r3, [r4, #90]	@ 0x5a
 800292a:	3b01      	subs	r3, #1
 800292c:	b29b      	uxth	r3, r3
 800292e:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 8002932:	e7c0      	b.n	80028b6 <HAL_UART_Receive+0x4c>
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8002934:	f807 3b01 	strb.w	r3, [r7], #1
        pdata8bits++;
 8002938:	e7f5      	b.n	8002926 <HAL_UART_Receive+0xbc>
    return HAL_BUSY;
 800293a:	2002      	movs	r0, #2
 800293c:	e7ea      	b.n	8002914 <HAL_UART_Receive+0xaa>
      return  HAL_ERROR;
 800293e:	2001      	movs	r0, #1
 8002940:	e7e8      	b.n	8002914 <HAL_UART_Receive+0xaa>

08002942 <UART_CheckIdleState>:
{
 8002942:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002944:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002946:	2600      	movs	r6, #0
 8002948:	f8c0 6084 	str.w	r6, [r0, #132]	@ 0x84
  tickstart = HAL_GetTick();
 800294c:	f7fe fcde 	bl	800130c <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002950:	6823      	ldr	r3, [r4, #0]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	071a      	lsls	r2, r3, #28
  tickstart = HAL_GetTick();
 8002956:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002958:	d51b      	bpl.n	8002992 <UART_CheckIdleState+0x50>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800295a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800295e:	9300      	str	r3, [sp, #0]
 8002960:	4632      	mov	r2, r6
 8002962:	4603      	mov	r3, r0
 8002964:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8002968:	4620      	mov	r0, r4
 800296a:	f7ff fee9 	bl	8002740 <UART_WaitOnFlagUntilTimeout>
 800296e:	b180      	cbz	r0, 8002992 <UART_CheckIdleState+0x50>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8002970:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002972:	e852 3f00 	ldrex	r3, [r2]
 8002976:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800297a:	e842 3100 	strex	r1, r3, [r2]
 800297e:	2900      	cmp	r1, #0
 8002980:	d1f6      	bne.n	8002970 <UART_CheckIdleState+0x2e>
      huart->gState = HAL_UART_STATE_READY;
 8002982:	2320      	movs	r3, #32
 8002984:	67e3      	str	r3, [r4, #124]	@ 0x7c
      return HAL_TIMEOUT;
 8002986:	2003      	movs	r0, #3
      __HAL_UNLOCK(huart);
 8002988:	2300      	movs	r3, #0
 800298a:	f884 3078 	strb.w	r3, [r4, #120]	@ 0x78
}
 800298e:	b002      	add	sp, #8
 8002990:	bd70      	pop	{r4, r5, r6, pc}
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002992:	6823      	ldr	r3, [r4, #0]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	075b      	lsls	r3, r3, #29
 8002998:	d524      	bpl.n	80029e4 <UART_CheckIdleState+0xa2>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800299a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800299e:	9300      	str	r3, [sp, #0]
 80029a0:	2200      	movs	r2, #0
 80029a2:	462b      	mov	r3, r5
 80029a4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80029a8:	4620      	mov	r0, r4
 80029aa:	f7ff fec9 	bl	8002740 <UART_WaitOnFlagUntilTimeout>
 80029ae:	b1c8      	cbz	r0, 80029e4 <UART_CheckIdleState+0xa2>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80029b0:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029b2:	e852 3f00 	ldrex	r3, [r2]
 80029b6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029ba:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 80029be:	6822      	ldr	r2, [r4, #0]
 80029c0:	2900      	cmp	r1, #0
 80029c2:	d1f5      	bne.n	80029b0 <UART_CheckIdleState+0x6e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029c4:	f102 0308 	add.w	r3, r2, #8
 80029c8:	e853 3f00 	ldrex	r3, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80029cc:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029d0:	f102 0008 	add.w	r0, r2, #8
 80029d4:	e840 3100 	strex	r1, r3, [r0]
 80029d8:	2900      	cmp	r1, #0
 80029da:	d1f3      	bne.n	80029c4 <UART_CheckIdleState+0x82>
      huart->RxState = HAL_UART_STATE_READY;
 80029dc:	2320      	movs	r3, #32
 80029de:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
      return HAL_TIMEOUT;
 80029e2:	e7d0      	b.n	8002986 <UART_CheckIdleState+0x44>
  huart->gState = HAL_UART_STATE_READY;
 80029e4:	2320      	movs	r3, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80029e6:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 80029e8:	67e3      	str	r3, [r4, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80029ea:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80029ee:	6620      	str	r0, [r4, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80029f0:	6660      	str	r0, [r4, #100]	@ 0x64
  return HAL_OK;
 80029f2:	e7c9      	b.n	8002988 <UART_CheckIdleState+0x46>

080029f4 <HAL_UART_Init>:
{
 80029f4:	b510      	push	{r4, lr}
  if (huart == NULL)
 80029f6:	4604      	mov	r4, r0
 80029f8:	b340      	cbz	r0, 8002a4c <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 80029fa:	6fc3      	ldr	r3, [r0, #124]	@ 0x7c
 80029fc:	b91b      	cbnz	r3, 8002a06 <HAL_UART_Init+0x12>
    huart->Lock = HAL_UNLOCKED;
 80029fe:	f880 3078 	strb.w	r3, [r0, #120]	@ 0x78
    HAL_UART_MspInit(huart);
 8002a02:	f7fe fb43 	bl	800108c <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8002a06:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8002a08:	2324      	movs	r3, #36	@ 0x24
 8002a0a:	67e3      	str	r3, [r4, #124]	@ 0x7c
  __HAL_UART_DISABLE(huart);
 8002a0c:	6813      	ldr	r3, [r2, #0]
 8002a0e:	f023 0301 	bic.w	r3, r3, #1
 8002a12:	6013      	str	r3, [r2, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002a14:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8002a16:	b113      	cbz	r3, 8002a1e <HAL_UART_Init+0x2a>
    UART_AdvFeatureConfig(huart);
 8002a18:	4620      	mov	r0, r4
 8002a1a:	f7ff fe3d 	bl	8002698 <UART_AdvFeatureConfig>
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002a1e:	4620      	mov	r0, r4
 8002a20:	f7ff fd1e 	bl	8002460 <UART_SetConfig>
 8002a24:	2801      	cmp	r0, #1
 8002a26:	d011      	beq.n	8002a4c <HAL_UART_Init+0x58>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002a28:	6823      	ldr	r3, [r4, #0]
 8002a2a:	685a      	ldr	r2, [r3, #4]
 8002a2c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002a30:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002a32:	689a      	ldr	r2, [r3, #8]
 8002a34:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002a38:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8002a3a:	681a      	ldr	r2, [r3, #0]
 8002a3c:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 8002a40:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 8002a42:	601a      	str	r2, [r3, #0]
}
 8002a44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 8002a48:	f7ff bf7b 	b.w	8002942 <UART_CheckIdleState>
}
 8002a4c:	2001      	movs	r0, #1
 8002a4e:	bd10      	pop	{r4, pc}

08002a50 <_mon_alloc_reset>:

#include <stdlib.h>

#pragma GCC push_options
#pragma GCC optimize ("O0")
static inline void _mon_alloc_reset(void) {
 8002a50:	b580      	push	{r7, lr}
 8002a52:	af00      	add	r7, sp, #0
    memset((void *)&io_malloc, 0, sizeof(struct io_malloc));
 8002a54:	221c      	movs	r2, #28
 8002a56:	2100      	movs	r1, #0
 8002a58:	4805      	ldr	r0, [pc, #20]	@ (8002a70 <_mon_alloc_reset+0x20>)
 8002a5a:	f006 fe2c 	bl	80096b6 <memset>
    /* force a call of wrap functions */\
    free(malloc(10));
 8002a5e:	200a      	movs	r0, #10
 8002a60:	f001 f84a 	bl	8003af8 <__wrap_malloc>
 8002a64:	4603      	mov	r3, r0
 8002a66:	4618      	mov	r0, r3
 8002a68:	f001 f86e 	bl	8003b48 <__wrap_free>
}
 8002a6c:	bf00      	nop
 8002a6e:	bd80      	pop	{r7, pc}
 8002a70:	200042f8 	.word	0x200042f8

08002a74 <cyclesCounterEnd>:
#endif
#endif
}

__STATIC_INLINE uint64_t cyclesCounterEnd(void)
{
 8002a74:	b570      	push	{r4, r5, r6, lr}
#if USE_CORE_CLOCK_ONLY == 1
  return (uint64_t)(port_dwt_get_cycles() - cyclesCount.dwt_start);
#else
  uint64_t dwt_e;
  uint64_t tick_e;
  dwt_e = port_dwt_get_cycles() - cyclesCount.dwt_start;
 8002a76:	4b0f      	ldr	r3, [pc, #60]	@ (8002ab4 <cyclesCounterEnd+0x40>)
 8002a78:	4e0f      	ldr	r6, [pc, #60]	@ (8002ab8 <cyclesCounterEnd+0x44>)
 8002a7a:	685d      	ldr	r5, [r3, #4]
 8002a7c:	6873      	ldr	r3, [r6, #4]
 8002a7e:	1aed      	subs	r5, r5, r3
  tick_e = port_hal_get_tick() - cyclesCount.tick_start;
 8002a80:	f7fe fc44 	bl	800130c <HAL_GetTick>
 8002a84:	68b3      	ldr	r3, [r6, #8]
  if (tick_e > cyclesCount.dwt_max) {
 8002a86:	6832      	ldr	r2, [r6, #0]
  tick_e = port_hal_get_tick() - cyclesCount.tick_start;
 8002a88:	1ac0      	subs	r0, r0, r3
  if (tick_e > cyclesCount.dwt_max) {
 8002a8a:	4290      	cmp	r0, r2
  dwt_e = port_dwt_get_cycles() - cyclesCount.dwt_start;
 8002a8c:	f04f 0400 	mov.w	r4, #0
  if (tick_e > cyclesCount.dwt_max) {
 8002a90:	d90d      	bls.n	8002aae <cyclesCounterEnd+0x3a>
    /* overflow detected */
    dwt_e = ((tick_e/cyclesCount.dwt_max) * (uint64_t)UINT32_MAX + (uint64_t)dwt_e);
 8002a92:	4623      	mov	r3, r4
 8002a94:	4621      	mov	r1, r4
 8002a96:	f7fe f887 	bl	8000ba8 <__aeabi_uldivmod>
 8002a9a:	f04f 34ff 	mov.w	r4, #4294967295
 8002a9e:	fba0 0404 	umull	r0, r4, r0, r4
 8002aa2:	1940      	adds	r0, r0, r5
 8002aa4:	eba4 0401 	sub.w	r4, r4, r1
 8002aa8:	4605      	mov	r5, r0
 8002aaa:	f144 0400 	adc.w	r4, r4, #0
  }
  return dwt_e;
#endif
#endif
}
 8002aae:	4628      	mov	r0, r5
 8002ab0:	4621      	mov	r1, r4
 8002ab2:	bd70      	pop	{r4, r5, r6, pc}
 8002ab4:	e0001000 	.word	0xe0001000
 8002ab8:	200042cc 	.word	0x200042cc

08002abc <user_observer_cb>:
static struct u_observer_ctx u_observer_ctx;

/* User callback */
static ai_u32 user_observer_cb(const ai_handle cookie,
    const ai_u32 flags,
    const ai_observer_node *node) {
 8002abc:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8002ac0:	4604      	mov	r4, r0
 8002ac2:	460e      	mov	r6, r1
 8002ac4:	4615      	mov	r5, r2

  struct u_observer_ctx *u_obs;

  volatile uint64_t ts = cyclesCounterEnd(); /* time stamp entry */
 8002ac6:	f7ff ffd5 	bl	8002a74 <cyclesCounterEnd>

  u_obs = (struct u_observer_ctx *)cookie;
  u_obs->n_cb += 1;
 8002aca:	e9d4 3200 	ldrd	r3, r2, [r4]
 8002ace:	3301      	adds	r3, #1
 8002ad0:	f142 0200 	adc.w	r2, r2, #0
 8002ad4:	e9c4 3200 	strd	r3, r2, [r4]

  if (flags & AI_OBSERVER_POST_EVT) {
 8002ad8:	0773      	lsls	r3, r6, #29
  volatile uint64_t ts = cyclesCounterEnd(); /* time stamp entry */
 8002ada:	e9cd 0100 	strd	r0, r1, [sp]
  if (flags & AI_OBSERVER_POST_EVT) {
 8002ade:	d51f      	bpl.n	8002b20 <user_observer_cb+0x64>
    const uint64_t end_t = ts - u_obs->start_t;
 8002ae0:	e9d4 1002 	ldrd	r1, r0, [r4, #8]
 8002ae4:	e9dd 2300 	ldrd	r2, r3, [sp]
 8002ae8:	1a51      	subs	r1, r2, r1
 8002aea:	eb63 0000 	sbc.w	r0, r3, r0
    u_obs->k_dur_t += end_t;
 8002aee:	e9d4 3206 	ldrd	r3, r2, [r4, #24]
 8002af2:	185b      	adds	r3, r3, r1
 8002af4:	eb40 0202 	adc.w	r2, r0, r2
 8002af8:	e9c4 3206 	strd	r3, r2, [r4, #24]
    u_obs->nodes[node->c_idx].dur += end_t;
 8002afc:	882b      	ldrh	r3, [r5, #0]
 8002afe:	6a26      	ldr	r6, [r4, #32]
 8002b00:	ea4f 1c03 	mov.w	ip, r3, lsl #4
 8002b04:	eb06 1303 	add.w	r3, r6, r3, lsl #4
 8002b08:	f856 200c 	ldr.w	r2, [r6, ip]
 8002b0c:	685d      	ldr	r5, [r3, #4]
 8002b0e:	1852      	adds	r2, r2, r1
 8002b10:	f846 200c 	str.w	r2, [r6, ip]
    u_obs->nodes[node->c_idx].n_runs += 1;
 8002b14:	689a      	ldr	r2, [r3, #8]
    u_obs->nodes[node->c_idx].dur += end_t;
 8002b16:	eb40 0005 	adc.w	r0, r0, r5
    u_obs->nodes[node->c_idx].n_runs += 1;
 8002b1a:	3201      	adds	r2, #1
    u_obs->nodes[node->c_idx].dur += end_t;
 8002b1c:	6058      	str	r0, [r3, #4]
    u_obs->nodes[node->c_idx].n_runs += 1;
 8002b1e:	609a      	str	r2, [r3, #8]
  }

  u_obs->start_t = cyclesCounterEnd();    /* time stamp exit */
 8002b20:	f7ff ffa8 	bl	8002a74 <cyclesCounterEnd>
  u_obs->u_dur_t += u_obs->start_t  - ts; /* accumulate cycles used by the CB */
 8002b24:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 8002b28:	e9dd 8900 	ldrd	r8, r9, [sp]
 8002b2c:	ebb3 0308 	subs.w	r3, r3, r8
 8002b30:	eb62 0209 	sbc.w	r2, r2, r9
 8002b34:	181b      	adds	r3, r3, r0
  u_obs->start_t = cyclesCounterEnd();    /* time stamp exit */
 8002b36:	e9c4 0102 	strd	r0, r1, [r4, #8]
  u_obs->u_dur_t += u_obs->start_t  - ts; /* accumulate cycles used by the CB */
 8002b3a:	eb41 0102 	adc.w	r1, r1, r2
  return 0;
}
 8002b3e:	2000      	movs	r0, #0
  u_obs->u_dur_t += u_obs->start_t  - ts; /* accumulate cycles used by the CB */
 8002b40:	e9c4 3104 	strd	r3, r1, [r4, #16]
}
 8002b44:	b002      	add	sp, #8
 8002b46:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
	...

08002b4c <aiDeInit>:
{
 8002b4c:	b510      	push	{r4, lr}
    if (net_exec_ctx[idx].handle != AI_HANDLE_NULL) {
 8002b4e:	4c09      	ldr	r4, [pc, #36]	@ (8002b74 <aiDeInit+0x28>)
  LC_PRINT("Releasing the instance(s)...\r\n");
 8002b50:	4809      	ldr	r0, [pc, #36]	@ (8002b78 <aiDeInit+0x2c>)
 8002b52:	f000 ffbf 	bl	8003ad4 <lc_print>
    if (net_exec_ctx[idx].handle != AI_HANDLE_NULL) {
 8002b56:	6820      	ldr	r0, [r4, #0]
 8002b58:	b150      	cbz	r0, 8002b70 <aiDeInit+0x24>
      if (ai_mnetwork_destroy(net_exec_ctx[idx].handle)
 8002b5a:	f001 f9d5 	bl	8003f08 <ai_mnetwork_destroy>
 8002b5e:	b128      	cbz	r0, 8002b6c <aiDeInit+0x20>
        err = ai_mnetwork_get_error(net_exec_ctx[idx].handle);
 8002b60:	6820      	ldr	r0, [r4, #0]
 8002b62:	f001 f9f4 	bl	8003f4e <ai_mnetwork_get_error>
        aiLogErr(err, "ai_mnetwork_destroy");
 8002b66:	4905      	ldr	r1, [pc, #20]	@ (8002b7c <aiDeInit+0x30>)
 8002b68:	f000 fdaa 	bl	80036c0 <aiLogErr>
      net_exec_ctx[idx].handle = AI_HANDLE_NULL;
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	6023      	str	r3, [r4, #0]
}
 8002b70:	bd10      	pop	{r4, pc}
 8002b72:	bf00      	nop
 8002b74:	20004238 	.word	0x20004238
 8002b78:	0800b8e0 	.word	0x0800b8e0
 8002b7c:	0800b8ff 	.word	0x0800b8ff

08002b80 <aiTestConsole>:
#define CONS_EVT_HIDE       (6)

#define CONS_EVT_UNDEFINED  (100)

static int aiTestConsole(void)
{
 8002b80:	b513      	push	{r0, r1, r4, lr}
  uint8_t c = 0;
 8002b82:	2400      	movs	r4, #0

  if (ioRawGetUint8(&c, 5000) == -1) /* Timeout */
 8002b84:	f241 3188 	movw	r1, #5000	@ 0x1388
 8002b88:	f10d 0007 	add.w	r0, sp, #7
  uint8_t c = 0;
 8002b8c:	f88d 4007 	strb.w	r4, [sp, #7]
  if (ioRawGetUint8(&c, 5000) == -1) /* Timeout */
 8002b90:	f000 ff58 	bl	8003a44 <ioRawGetUint8>
 8002b94:	1c43      	adds	r3, r0, #1
 8002b96:	d02c      	beq.n	8002bf2 <aiTestConsole+0x72>
    return CONS_EVT_TIMEOUT;

  if ((c == 'q') || (c == 'Q'))
 8002b98:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002b9c:	2b71      	cmp	r3, #113	@ 0x71
 8002b9e:	d02a      	beq.n	8002bf6 <aiTestConsole+0x76>
 8002ba0:	2b52      	cmp	r3, #82	@ 0x52
 8002ba2:	d817      	bhi.n	8002bd4 <aiTestConsole+0x54>
 8002ba4:	2b43      	cmp	r3, #67	@ 0x43
 8002ba6:	d805      	bhi.n	8002bb4 <aiTestConsole+0x34>
 8002ba8:	2b3f      	cmp	r3, #63	@ 0x3f
 8002baa:	bf08      	it	eq
 8002bac:	2003      	moveq	r0, #3
 8002bae:	bf18      	it	ne
 8002bb0:	2064      	movne	r0, #100	@ 0x64
 8002bb2:	e00d      	b.n	8002bd0 <aiTestConsole+0x50>
 8002bb4:	3b44      	subs	r3, #68	@ 0x44
 8002bb6:	2b0e      	cmp	r3, #14
 8002bb8:	d809      	bhi.n	8002bce <aiTestConsole+0x4e>
 8002bba:	e8df f003 	tbb	[pc, r3]
 8002bbe:	0820      	.short	0x0820
 8002bc0:	08220808 	.word	0x08220808
 8002bc4:	08080808 	.word	0x08080808
 8002bc8:	1c1e0808 	.word	0x1c1e0808
 8002bcc:	24          	.byte	0x24
 8002bcd:	00          	.byte	0x00
 8002bce:	2064      	movs	r0, #100	@ 0x64

  if ((c == 'x') || (c == 'X'))
    return CONS_EVT_PROF;

  return CONS_EVT_UNDEFINED;
}
 8002bd0:	b002      	add	sp, #8
 8002bd2:	bd10      	pop	{r4, pc}
 8002bd4:	2b70      	cmp	r3, #112	@ 0x70
 8002bd6:	d010      	beq.n	8002bfa <aiTestConsole+0x7a>
 8002bd8:	d807      	bhi.n	8002bea <aiTestConsole+0x6a>
 8002bda:	2b64      	cmp	r3, #100	@ 0x64
 8002bdc:	d00f      	beq.n	8002bfe <aiTestConsole+0x7e>
 8002bde:	2b68      	cmp	r3, #104	@ 0x68
 8002be0:	d00f      	beq.n	8002c02 <aiTestConsole+0x82>
  if ((c == 'q') || (c == 'Q'))
 8002be2:	2b58      	cmp	r3, #88	@ 0x58
 8002be4:	bf08      	it	eq
 8002be6:	2005      	moveq	r0, #5
 8002be8:	e7e1      	b.n	8002bae <aiTestConsole+0x2e>
 8002bea:	2b72      	cmp	r3, #114	@ 0x72
 8002bec:	d00b      	beq.n	8002c06 <aiTestConsole+0x86>
 8002bee:	2b78      	cmp	r3, #120	@ 0x78
 8002bf0:	e7f8      	b.n	8002be4 <aiTestConsole+0x64>
    return CONS_EVT_TIMEOUT;
 8002bf2:	4620      	mov	r0, r4
 8002bf4:	e7ec      	b.n	8002bd0 <aiTestConsole+0x50>
    return CONS_EVT_QUIT;
 8002bf6:	2001      	movs	r0, #1
 8002bf8:	e7ea      	b.n	8002bd0 <aiTestConsole+0x50>
    return CONS_EVT_PAUSE;
 8002bfa:	2004      	movs	r0, #4
 8002bfc:	e7e8      	b.n	8002bd0 <aiTestConsole+0x50>
  if ((c == 'q') || (c == 'Q'))
 8002bfe:	2006      	movs	r0, #6
 8002c00:	e7e6      	b.n	8002bd0 <aiTestConsole+0x50>
    return CONS_EVT_HELP;
 8002c02:	2003      	movs	r0, #3
 8002c04:	e7e4      	b.n	8002bd0 <aiTestConsole+0x50>
    return CONS_EVT_RESTART;
 8002c06:	2002      	movs	r0, #2
 8002c08:	e7e2      	b.n	8002bd0 <aiTestConsole+0x50>
	...

08002c0c <aiObserverInit>:
{
 8002c0c:	b530      	push	{r4, r5, lr}
  if (!net_ctx || (net_ctx->handle == AI_HANDLE_NULL) || !net_ctx->report.n_nodes)
 8002c0e:	4604      	mov	r4, r0
{
 8002c10:	b091      	sub	sp, #68	@ 0x44
  if (!net_ctx || (net_ctx->handle == AI_HANDLE_NULL) || !net_ctx->report.n_nodes)
 8002c12:	b1d0      	cbz	r0, 8002c4a <aiObserverInit+0x3e>
 8002c14:	6800      	ldr	r0, [r0, #0]
 8002c16:	b1c0      	cbz	r0, 8002c4a <aiObserverInit+0x3e>
 8002c18:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 8002c1c:	b1ab      	cbz	r3, 8002c4a <aiObserverInit+0x3e>
  memset((void *)&u_observer_ctx, 0, sizeof(struct u_observer_ctx));
 8002c1e:	4d16      	ldr	r5, [pc, #88]	@ (8002c78 <aiObserverInit+0x6c>)
  ai_mnetwork_get_private_handle(net_ctx->handle, &net_hdl, &net_params);
 8002c20:	aa02      	add	r2, sp, #8
 8002c22:	a901      	add	r1, sp, #4
 8002c24:	f001 f9cd 	bl	8003fc2 <ai_mnetwork_get_private_handle>
  memset((void *)&u_observer_ctx, 0, sizeof(struct u_observer_ctx));
 8002c28:	2228      	movs	r2, #40	@ 0x28
 8002c2a:	2100      	movs	r1, #0
 8002c2c:	4628      	mov	r0, r5
 8002c2e:	f006 fd42 	bl	80096b6 <memset>
  sz = net_ctx->report.n_nodes * sizeof(struct u_node_stat);
 8002c32:	f8d4 4084 	ldr.w	r4, [r4, #132]	@ 0x84
 8002c36:	0124      	lsls	r4, r4, #4
  u_observer_ctx.nodes = (struct u_node_stat*)malloc(sz);
 8002c38:	4620      	mov	r0, r4
 8002c3a:	f000 ff5d 	bl	8003af8 <__wrap_malloc>
 8002c3e:	6228      	str	r0, [r5, #32]
  if (!u_observer_ctx.nodes) {
 8002c40:	b928      	cbnz	r0, 8002c4e <aiObserverInit+0x42>
    LC_PRINT("W: enable to allocate the u_node_stats (sz=%d) ..\r\n", sz);
 8002c42:	480e      	ldr	r0, [pc, #56]	@ (8002c7c <aiObserverInit+0x70>)
 8002c44:	4621      	mov	r1, r4
 8002c46:	f000 ff45 	bl	8003ad4 <lc_print>
}
 8002c4a:	b011      	add	sp, #68	@ 0x44
 8002c4c:	bd30      	pop	{r4, r5, pc}
  memset(u_observer_ctx.nodes, 0, sz);
 8002c4e:	4622      	mov	r2, r4
 8002c50:	2100      	movs	r1, #0
 8002c52:	f006 fd30 	bl	80096b6 <memset>
  res = ai_platform_observer_register(net_hdl, user_observer_cb,
 8002c56:	490a      	ldr	r1, [pc, #40]	@ (8002c80 <aiObserverInit+0x74>)
 8002c58:	9801      	ldr	r0, [sp, #4]
 8002c5a:	2306      	movs	r3, #6
 8002c5c:	462a      	mov	r2, r5
 8002c5e:	f002 fd61 	bl	8005724 <ai_platform_observer_register>
  if (!res) {
 8002c62:	4604      	mov	r4, r0
 8002c64:	2800      	cmp	r0, #0
 8002c66:	d1f0      	bne.n	8002c4a <aiObserverInit+0x3e>
    LC_PRINT("W: unable to register the user CB\r\n");
 8002c68:	4806      	ldr	r0, [pc, #24]	@ (8002c84 <aiObserverInit+0x78>)
 8002c6a:	f000 ff33 	bl	8003ad4 <lc_print>
    free(u_observer_ctx.nodes);
 8002c6e:	6a28      	ldr	r0, [r5, #32]
 8002c70:	f000 ff6a 	bl	8003b48 <__wrap_free>
    u_observer_ctx.nodes = NULL;
 8002c74:	622c      	str	r4, [r5, #32]
    return;
 8002c76:	e7e8      	b.n	8002c4a <aiObserverInit+0x3e>
 8002c78:	20004210 	.word	0x20004210
 8002c7c:	0800b913 	.word	0x0800b913
 8002c80:	08002abd 	.word	0x08002abd
 8002c84:	0800b947 	.word	0x0800b947

08002c88 <aiObserverDone>:
{
 8002c88:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
  if (!net_ctx || (net_ctx->handle == AI_HANDLE_NULL) ||
 8002c8c:	4603      	mov	r3, r0
{
 8002c8e:	b0a2      	sub	sp, #136	@ 0x88
  if (!net_ctx || (net_ctx->handle == AI_HANDLE_NULL) ||
 8002c90:	2800      	cmp	r0, #0
 8002c92:	f000 80db 	beq.w	8002e4c <aiObserverDone+0x1c4>
 8002c96:	6800      	ldr	r0, [r0, #0]
 8002c98:	2800      	cmp	r0, #0
 8002c9a:	f000 80d7 	beq.w	8002e4c <aiObserverDone+0x1c4>
 8002c9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	f000 80d2 	beq.w	8002e4c <aiObserverDone+0x1c4>
      !net_ctx->report.n_nodes || !u_observer_ctx.nodes)
 8002ca8:	4c6a      	ldr	r4, [pc, #424]	@ (8002e54 <aiObserverDone+0x1cc>)
 8002caa:	6a23      	ldr	r3, [r4, #32]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	f000 80cd 	beq.w	8002e4c <aiObserverDone+0x1c4>
  ai_mnetwork_get_private_handle(net_ctx->handle, &net_hdl, &net_params);
 8002cb2:	aa14      	add	r2, sp, #80	@ 0x50
 8002cb4:	a90b      	add	r1, sp, #44	@ 0x2c
 8002cb6:	f001 f984 	bl	8003fc2 <ai_mnetwork_get_private_handle>
  ai_platform_observer_unregister(net_hdl, user_observer_cb,
 8002cba:	4967      	ldr	r1, [pc, #412]	@ (8002e58 <aiObserverDone+0x1d0>)
 8002cbc:	980b      	ldr	r0, [sp, #44]	@ 0x2c
  LC_PRINT("\r\n %-6s%-20s%-7s  %s\r\n", "c_id", "type", "id", "time (ms)");
 8002cbe:	f8df a1b4 	ldr.w	sl, [pc, #436]	@ 8002e74 <aiObserverDone+0x1ec>
  ai_platform_observer_unregister(net_hdl, user_observer_cb,
 8002cc2:	4622      	mov	r2, r4
 8002cc4:	f002 fd7a 	bl	80057bc <ai_platform_observer_unregister>
  LC_PRINT("\r\n Inference time by c-node\r\n");
 8002cc8:	4864      	ldr	r0, [pc, #400]	@ (8002e5c <aiObserverDone+0x1d4>)
 8002cca:	f000 ff03 	bl	8003ad4 <lc_print>
  dwtCyclesToTime(u_observer_ctx.k_dur_t / u_observer_ctx.nodes[0].n_runs, &t);
 8002cce:	6a23      	ldr	r3, [r4, #32]
 8002cd0:	e9d4 0106 	ldrd	r0, r1, [r4, #24]
 8002cd4:	689a      	ldr	r2, [r3, #8]
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	f7fd ff66 	bl	8000ba8 <__aeabi_uldivmod>
 8002cdc:	aa0c      	add	r2, sp, #48	@ 0x30
 8002cde:	f000 ff89 	bl	8003bf4 <dwtCyclesToTime>
  LC_PRINT("  kernel  : %d.%03dms (time passed in the c-kernel fcts)\r\n", t.s * 1000 + t.ms, t.us);
 8002ce2:	e9dd 130d 	ldrd	r1, r3, [sp, #52]	@ 0x34
 8002ce6:	f44f 757a 	mov.w	r5, #1000	@ 0x3e8
 8002cea:	fb05 3101 	mla	r1, r5, r1, r3
 8002cee:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8002cf0:	485b      	ldr	r0, [pc, #364]	@ (8002e60 <aiObserverDone+0x1d8>)
 8002cf2:	f000 feef 	bl	8003ad4 <lc_print>
  dwtCyclesToTime(u_observer_ctx.u_dur_t / u_observer_ctx.nodes[0].n_runs, &t);
 8002cf6:	6a23      	ldr	r3, [r4, #32]
 8002cf8:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
 8002cfc:	689a      	ldr	r2, [r3, #8]
 8002cfe:	2300      	movs	r3, #0
 8002d00:	f7fd ff52 	bl	8000ba8 <__aeabi_uldivmod>
 8002d04:	aa0c      	add	r2, sp, #48	@ 0x30
 8002d06:	f000 ff75 	bl	8003bf4 <dwtCyclesToTime>
  LC_PRINT("  user    : %d.%03dms (time passed in the user cb)\r\n", t.s * 1000 + t.ms, t.us);
 8002d0a:	e9dd 130d 	ldrd	r1, r3, [sp, #52]	@ 0x34
 8002d0e:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8002d10:	4854      	ldr	r0, [pc, #336]	@ (8002e64 <aiObserverDone+0x1dc>)
 8002d12:	fb05 3101 	mla	r1, r5, r1, r3
 8002d16:	f000 fedd 	bl	8003ad4 <lc_print>
  LC_PRINT("\r\n %-6s%-20s%-7s  %s\r\n", "c_id", "type", "id", "time (ms)");
 8002d1a:	f1aa 0324 	sub.w	r3, sl, #36	@ 0x24
 8002d1e:	f1aa 0221 	sub.w	r2, sl, #33	@ 0x21
 8002d22:	f1aa 011c 	sub.w	r1, sl, #28
 8002d26:	f1aa 0017 	sub.w	r0, sl, #23
 8002d2a:	f8cd a000 	str.w	sl, [sp]
 8002d2e:	f000 fed1 	bl	8003ad4 <lc_print>
  LC_PRINT(" ---------------------------------------------------\r\n");
 8002d32:	f10a 000a 	add.w	r0, sl, #10
 8002d36:	f000 fecd 	bl	8003ad4 <lc_print>
  while (ai_platform_observer_node_info(net_hdl, &node_info)) {
 8002d3a:	2300      	movs	r3, #0
      fmt = " %-6d%-20s%-5d %6d.%03d %6.02f %c\r\n";
 8002d3c:	f1aa 09fd 	sub.w	r9, sl, #253	@ 0xfd
  cumul = 0;
 8002d40:	461d      	mov	r5, r3
 8002d42:	461e      	mov	r6, r3
      fmt = " %-6d%-20s%-5d %6d.%03d %6.02f %c\r\n";
 8002d44:	f1aa 0ad6 	sub.w	sl, sl, #214	@ 0xd6
  while (ai_platform_observer_node_info(net_hdl, &node_info)) {
 8002d48:	980b      	ldr	r0, [sp, #44]	@ 0x2c
  node_info.c_idx = 0;
 8002d4a:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
  while (ai_platform_observer_node_info(net_hdl, &node_info)) {
 8002d4e:	a910      	add	r1, sp, #64	@ 0x40
 8002d50:	f002 fc96 	bl	8005680 <ai_platform_observer_node_info>
 8002d54:	4680      	mov	r8, r0
 8002d56:	bb10      	cbnz	r0, 8002d9e <aiObserverDone+0x116>
  LC_PRINT(" -------------------------------------------------\r\n");
 8002d58:	4843      	ldr	r0, [pc, #268]	@ (8002e68 <aiObserverDone+0x1e0>)
 8002d5a:	f000 febb 	bl	8003ad4 <lc_print>
  cumul /= u_observer_ctx.nodes[0].n_runs;
 8002d5e:	6a23      	ldr	r3, [r4, #32]
 8002d60:	4628      	mov	r0, r5
 8002d62:	689a      	ldr	r2, [r3, #8]
 8002d64:	4631      	mov	r1, r6
 8002d66:	4643      	mov	r3, r8
 8002d68:	f7fd ff1e 	bl	8000ba8 <__aeabi_uldivmod>
  dwtCyclesToTime(cumul, &t);
 8002d6c:	aa0c      	add	r2, sp, #48	@ 0x30
 8002d6e:	f000 ff41 	bl	8003bf4 <dwtCyclesToTime>
  LC_PRINT(" %31s %6d.%03d ms\r\n", "", t.s * 1000 + t.ms, t.us);
 8002d72:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8002d74:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8002d76:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8002d78:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002d7c:	fb00 1202 	mla	r2, r0, r2, r1
 8002d80:	493a      	ldr	r1, [pc, #232]	@ (8002e6c <aiObserverDone+0x1e4>)
 8002d82:	1c48      	adds	r0, r1, #1
 8002d84:	f000 fea6 	bl	8003ad4 <lc_print>
  free(u_observer_ctx.nodes);
 8002d88:	6a20      	ldr	r0, [r4, #32]
 8002d8a:	f000 fedd 	bl	8003b48 <__wrap_free>
  memset((void *)&u_observer_ctx, 0, sizeof(struct u_observer_ctx));
 8002d8e:	4831      	ldr	r0, [pc, #196]	@ (8002e54 <aiObserverDone+0x1cc>)
 8002d90:	2228      	movs	r2, #40	@ 0x28
 8002d92:	4641      	mov	r1, r8
}
 8002d94:	b022      	add	sp, #136	@ 0x88
 8002d96:	e8bd 4f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
  memset((void *)&u_observer_ctx, 0, sizeof(struct u_observer_ctx));
 8002d9a:	f006 bc8c 	b.w	80096b6 <memset>
    struct u_node_stat *sn = &u_observer_ctx.nodes[node_info.c_idx];
 8002d9e:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 8002da2:	6a22      	ldr	r2, [r4, #32]
 8002da4:	0119      	lsls	r1, r3, #4
 8002da6:	eb02 1303 	add.w	r3, r2, r3, lsl #4
    cumul +=  sn->dur;
 8002daa:	5850      	ldr	r0, [r2, r1]
 8002dac:	6859      	ldr	r1, [r3, #4]
    dwtCyclesToTime(sn->dur / (uint64_t)sn->n_runs, &t);
 8002dae:	689a      	ldr	r2, [r3, #8]
    cumul +=  sn->dur;
 8002db0:	1945      	adds	r5, r0, r5
    dwtCyclesToTime(sn->dur / (uint64_t)sn->n_runs, &t);
 8002db2:	f04f 0300 	mov.w	r3, #0
    cumul +=  sn->dur;
 8002db6:	eb41 0606 	adc.w	r6, r1, r6
    dwtCyclesToTime(sn->dur / (uint64_t)sn->n_runs, &t);
 8002dba:	f7fd fef5 	bl	8000ba8 <__aeabi_uldivmod>
 8002dbe:	aa0c      	add	r2, sp, #48	@ 0x30
 8002dc0:	f000 ff18 	bl	8003bf4 <dwtCyclesToTime>
    if ((node_info.type & (ai_u16)0x8000) >> 15)
 8002dc4:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	@ 0x42
 8002dc8:	f8bd 0042 	ldrh.w	r0, [sp, #66]	@ 0x42
      fmt = " %-6d%-20s%-5d %6d.%03d %6.02f %c\r\n";
 8002dcc:	ea19 0323 	ands.w	r3, r9, r3, asr #32
 8002dd0:	bf38      	it	cc
 8002dd2:	4653      	movcc	r3, sl
 8002dd4:	9307      	str	r3, [sp, #28]
    LC_PRINT(fmt, node_info.c_idx,
 8002dd6:	f3c0 000e 	ubfx	r0, r0, #0, #15
 8002dda:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 8002dde:	9306      	str	r3, [sp, #24]
 8002de0:	f002 fd5c 	bl	800589c <ai_layer_type_name>
 8002de4:	2325      	movs	r3, #37	@ 0x25
 8002de6:	9304      	str	r3, [sp, #16]
 8002de8:	6a23      	ldr	r3, [r4, #32]
 8002dea:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 8002dee:	f8bd b044 	ldrh.w	fp, [sp, #68]	@ 0x44
 8002df2:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 8002df6:	4680      	mov	r8, r0
 8002df8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002dfc:	f7fd fbc6 	bl	800058c <__aeabi_ul2d>
 8002e00:	4b1b      	ldr	r3, [pc, #108]	@ (8002e70 <aiObserverDone+0x1e8>)
 8002e02:	2200      	movs	r2, #0
 8002e04:	f7fd fbf8 	bl	80005f8 <__aeabi_dmul>
 8002e08:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8002e0c:	e9d4 0106 	ldrd	r0, r1, [r4, #24]
 8002e10:	f7fd fbbc 	bl	800058c <__aeabi_ul2d>
 8002e14:	4602      	mov	r2, r0
 8002e16:	460b      	mov	r3, r1
 8002e18:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8002e1c:	f7fd fd16 	bl	800084c <__aeabi_ddiv>
 8002e20:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8002e22:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8002e24:	9301      	str	r3, [sp, #4]
 8002e26:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8002e28:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002e2c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002e30:	fb01 3302 	mla	r3, r1, r2, r3
 8002e34:	9300      	str	r3, [sp, #0]
 8002e36:	e9dd 1006 	ldrd	r1, r0, [sp, #24]
 8002e3a:	465b      	mov	r3, fp
 8002e3c:	4642      	mov	r2, r8
 8002e3e:	f000 fe49 	bl	8003ad4 <lc_print>
    node_info.c_idx++;
 8002e42:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 8002e46:	3301      	adds	r3, #1
 8002e48:	b29b      	uxth	r3, r3
 8002e4a:	e77d      	b.n	8002d48 <aiObserverDone+0xc0>
}
 8002e4c:	b022      	add	sp, #136	@ 0x88
 8002e4e:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}
 8002e52:	bf00      	nop
 8002e54:	20004210 	.word	0x20004210
 8002e58:	08002abd 	.word	0x08002abd
 8002e5c:	0800b9b6 	.word	0x0800b9b6
 8002e60:	0800b9d4 	.word	0x0800b9d4
 8002e64:	0800ba0f 	.word	0x0800ba0f
 8002e68:	0800baa9 	.word	0x0800baa9
 8002e6c:	0800bade 	.word	0x0800bade
 8002e70:	40590000 	.word	0x40590000
 8002e74:	0800ba68 	.word	0x0800ba68

08002e78 <aiSystemPerformanceInit>:
 * Exported/Public functions
 * -----------------------------------------------------------------------------
 */

int aiSystemPerformanceInit(void)
{
 8002e78:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
  LC_PRINT("\r\n#\r\n");
 8002e7c:	484e      	ldr	r0, [pc, #312]	@ (8002fb8 <aiSystemPerformanceInit+0x140>)
  port_dwt_reset();
 8002e7e:	4d4f      	ldr	r5, [pc, #316]	@ (8002fbc <aiSystemPerformanceInit+0x144>)
    net_exec_ctx[idx].handle = AI_HANDLE_NULL;
 8002e80:	4e4f      	ldr	r6, [pc, #316]	@ (8002fc0 <aiSystemPerformanceInit+0x148>)
      LC_PRINT("\r\nFound network \"%s\"\r\n", nn_name);
 8002e82:	f8df 9160 	ldr.w	r9, [pc, #352]	@ 8002fe4 <aiSystemPerformanceInit+0x16c>
{
 8002e86:	b086      	sub	sp, #24
  LC_PRINT("\r\n#\r\n");
 8002e88:	f000 fe24 	bl	8003ad4 <lc_print>
  LC_PRINT("# %s %d.%d\r\n", _APP_NAME_ , _APP_VERSION_MAJOR_,
 8002e8c:	494d      	ldr	r1, [pc, #308]	@ (8002fc4 <aiSystemPerformanceInit+0x14c>)
 8002e8e:	2301      	movs	r3, #1
 8002e90:	f101 0016 	add.w	r0, r1, #22
 8002e94:	2207      	movs	r2, #7
 8002e96:	f000 fe1d 	bl	8003ad4 <lc_print>
 8002e9a:	2400      	movs	r4, #0
      _APP_VERSION_MINOR_ );
  LC_PRINT("#\r\n");
 8002e9c:	484a      	ldr	r0, [pc, #296]	@ (8002fc8 <aiSystemPerformanceInit+0x150>)
 8002e9e:	f000 fe19 	bl	8003ad4 <lc_print>

  systemSettingLog();
 8002ea2:	f000 ff15 	bl	8003cd0 <systemSettingLog>

  crcIpInit();
 8002ea6:	f000 ffab 	bl	8003e00 <port_hal_crc_ip_init_imp>
  port_dwt_init();
 8002eaa:	f000 ffb9 	bl	8003e20 <port_dwt_init_imp>
  port_dwt_reset();
 8002eae:	606c      	str	r4, [r5, #4]
  port_hal_delay(100);
 8002eb0:	2064      	movs	r0, #100	@ 0x64
 8002eb2:	f7fe fa31 	bl	8001318 <HAL_Delay>
  st = port_dwt_get_cycles();
 8002eb6:	6868      	ldr	r0, [r5, #4]
  dwtCyclesToTime(st/100, &t);
 8002eb8:	aa02      	add	r2, sp, #8
 8002eba:	2564      	movs	r5, #100	@ 0x64
 8002ebc:	4621      	mov	r1, r4
 8002ebe:	fbb0 f0f5 	udiv	r0, r0, r5
 8002ec2:	f000 fe97 	bl	8003bf4 <dwtCyclesToTime>
  LC_PRINT(" Timestamp    : SysTick + DWT (delay(1)=%d.%03d ms)\r\n",
 8002ec6:	e9dd 1303 	ldrd	r1, r3, [sp, #12]
 8002eca:	9a05      	ldr	r2, [sp, #20]
 8002ecc:	483f      	ldr	r0, [pc, #252]	@ (8002fcc <aiSystemPerformanceInit+0x154>)
 8002ece:	fb05 3101 	mla	r1, r5, r1, r3
 8002ed2:	f000 fdff 	bl	8003ad4 <lc_print>
  dwtCyclesToTime(UINT32_MAX, &t);
 8002ed6:	aa02      	add	r2, sp, #8
 8002ed8:	2100      	movs	r1, #0
 8002eda:	f04f 30ff 	mov.w	r0, #4294967295
 8002ede:	f000 fe89 	bl	8003bf4 <dwtCyclesToTime>
  cyclesCount.dwt_max = t.s * 1000 + t.ms;
 8002ee2:	9a03      	ldr	r2, [sp, #12]
 8002ee4:	9b04      	ldr	r3, [sp, #16]
 8002ee6:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002eea:	fb01 3302 	mla	r3, r1, r2, r3
 8002eee:	4a38      	ldr	r2, [pc, #224]	@ (8002fd0 <aiSystemPerformanceInit+0x158>)
    net_exec_ctx[idx].handle = AI_HANDLE_NULL;
 8002ef0:	4635      	mov	r5, r6
 8002ef2:	6013      	str	r3, [r2, #0]
  port_dwt_init();
 8002ef4:	f000 ff94 	bl	8003e20 <port_dwt_init_imp>
  aiPlatformVersion();
 8002ef8:	f000 fbcc 	bl	8003694 <aiPlatformVersion>
  LC_PRINT("Discovering the network(s)...\r\n");
 8002efc:	4835      	ldr	r0, [pc, #212]	@ (8002fd4 <aiSystemPerformanceInit+0x15c>)
    net_exec_ctx[idx].handle = AI_HANDLE_NULL;
 8002efe:	f845 4b08 	str.w	r4, [r5], #8
  LC_PRINT("Discovering the network(s)...\r\n");
 8002f02:	f000 fde7 	bl	8003ad4 <lc_print>
  LC_PRINT("Creating the network \"%s\"..\r\n", nn_name);
 8002f06:	f109 0a17 	add.w	sl, r9, #23
  LC_PRINT("Initializing the network\r\n");
 8002f0a:	f109 0b48 	add.w	fp, r9, #72	@ 0x48
    nn_name = ai_mnetwork_find(NULL, idx);
 8002f0e:	4621      	mov	r1, r4
 8002f10:	2000      	movs	r0, #0
 8002f12:	f000 ffc5 	bl	8003ea0 <ai_mnetwork_find>
    if (nn_name) {
 8002f16:	4680      	mov	r8, r0
 8002f18:	b190      	cbz	r0, 8002f40 <aiSystemPerformanceInit+0xc8>
      LC_PRINT("\r\nFound network \"%s\"\r\n", nn_name);
 8002f1a:	4601      	mov	r1, r0
 8002f1c:	4648      	mov	r0, r9
 8002f1e:	f000 fdd9 	bl	8003ad4 <lc_print>
  LC_PRINT("Creating the network \"%s\"..\r\n", nn_name);
 8002f22:	4641      	mov	r1, r8
 8002f24:	4650      	mov	r0, sl
 8002f26:	f000 fdd5 	bl	8003ad4 <lc_print>
  err = ai_mnetwork_create(nn_name, &ctx->handle, NULL);
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	f1a5 0108 	sub.w	r1, r5, #8
 8002f30:	4640      	mov	r0, r8
 8002f32:	f000 ffc3 	bl	8003ebc <ai_mnetwork_create>
  if (err.type) {
 8002f36:	b2c3      	uxtb	r3, r0
 8002f38:	b14b      	cbz	r3, 8002f4e <aiSystemPerformanceInit+0xd6>
    aiLogErr(err, "ai_mnetwork_create");
 8002f3a:	4927      	ldr	r1, [pc, #156]	@ (8002fd8 <aiSystemPerformanceInit+0x160>)
 8002f3c:	f000 fbc0 	bl	80036c0 <aiLogErr>
  cyclesCounterInit();

  aiInit();

  srand(3); /* deterministic outcome */
 8002f40:	2003      	movs	r0, #3
 8002f42:	f005 fce9 	bl	8008918 <srand>

  return 0;
}
 8002f46:	2000      	movs	r0, #0
 8002f48:	b006      	add	sp, #24
 8002f4a:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}
  LC_PRINT("Initializing the network\r\n");
 8002f4e:	4658      	mov	r0, fp
 8002f50:	f000 fdc0 	bl	8003ad4 <lc_print>
  if (!ai_mnetwork_get_report(ctx->handle, &ctx->report)) {
 8002f54:	f855 0c08 	ldr.w	r0, [r5, #-8]
 8002f58:	4629      	mov	r1, r5
 8002f5a:	f000 ffed 	bl	8003f38 <ai_mnetwork_get_report>
 8002f5e:	46a8      	mov	r8, r5
 8002f60:	4603      	mov	r3, r0
 8002f62:	b938      	cbnz	r0, 8002f74 <aiSystemPerformanceInit+0xfc>
    err = ai_mnetwork_get_error(ctx->handle);
 8002f64:	2290      	movs	r2, #144	@ 0x90
 8002f66:	4354      	muls	r4, r2
 8002f68:	9301      	str	r3, [sp, #4]
 8002f6a:	5930      	ldr	r0, [r6, r4]
 8002f6c:	f000 ffef 	bl	8003f4e <ai_mnetwork_get_error>
    aiLogErr(err, "ai_mnetwork_get_info");
 8002f70:	491a      	ldr	r1, [pc, #104]	@ (8002fdc <aiSystemPerformanceInit+0x164>)
 8002f72:	e00b      	b.n	8002f8c <aiSystemPerformanceInit+0x114>
  if (!ai_mnetwork_init(ctx->handle)) {
 8002f74:	f855 0c08 	ldr.w	r0, [r5, #-8]
 8002f78:	f000 fff6 	bl	8003f68 <ai_mnetwork_init>
 8002f7c:	b970      	cbnz	r0, 8002f9c <aiSystemPerformanceInit+0x124>
    err = ai_mnetwork_get_error(ctx->handle);
 8002f7e:	2290      	movs	r2, #144	@ 0x90
 8002f80:	4354      	muls	r4, r2
 8002f82:	9001      	str	r0, [sp, #4]
 8002f84:	5930      	ldr	r0, [r6, r4]
 8002f86:	f000 ffe2 	bl	8003f4e <ai_mnetwork_get_error>
    aiLogErr(err, "ai_mnetwork_init");
 8002f8a:	4915      	ldr	r1, [pc, #84]	@ (8002fe0 <aiSystemPerformanceInit+0x168>)
    aiLogErr(err, "ai_mnetwork_get_info");
 8002f8c:	f000 fb98 	bl	80036c0 <aiLogErr>
    ai_mnetwork_destroy(ctx->handle);
 8002f90:	5930      	ldr	r0, [r6, r4]
 8002f92:	f000 ffb9 	bl	8003f08 <ai_mnetwork_destroy>
    ctx->handle = AI_HANDLE_NULL;
 8002f96:	9b01      	ldr	r3, [sp, #4]
 8002f98:	5133      	str	r3, [r6, r4]
  } while (nn_name);
 8002f9a:	e7d1      	b.n	8002f40 <aiSystemPerformanceInit+0xc8>
  if (ai_mnetwork_get_report(ctx->handle, &ctx->report)) {
 8002f9c:	f855 0c08 	ldr.w	r0, [r5, #-8]
 8002fa0:	4629      	mov	r1, r5
 8002fa2:	f000 ffc9 	bl	8003f38 <ai_mnetwork_get_report>
 8002fa6:	3590      	adds	r5, #144	@ 0x90
 8002fa8:	4603      	mov	r3, r0
 8002faa:	2800      	cmp	r0, #0
 8002fac:	d0da      	beq.n	8002f64 <aiSystemPerformanceInit+0xec>
    aiPrintNetworkInfo(&ctx->report);
 8002fae:	4640      	mov	r0, r8
 8002fb0:	f000 fc8e 	bl	80038d0 <aiPrintNetworkInfo>
    idx++;
 8002fb4:	3401      	adds	r4, #1
  } while (nn_name);
 8002fb6:	e7aa      	b.n	8002f0e <aiSystemPerformanceInit+0x96>
 8002fb8:	0800baf3 	.word	0x0800baf3
 8002fbc:	e0001000 	.word	0xe0001000
 8002fc0:	20004238 	.word	0x20004238
 8002fc4:	0800baf9 	.word	0x0800baf9
 8002fc8:	0800bb1c 	.word	0x0800bb1c
 8002fcc:	0800bb20 	.word	0x0800bb20
 8002fd0:	200042cc 	.word	0x200042cc
 8002fd4:	0800bb56 	.word	0x0800bb56
 8002fd8:	0800bbab 	.word	0x0800bbab
 8002fdc:	0800bbd9 	.word	0x0800bbd9
 8002fe0:	0800bbee 	.word	0x0800bbee
 8002fe4:	0800bb76 	.word	0x0800bb76

08002fe8 <aiSystemPerformanceProcess>:

int aiSystemPerformanceProcess(int16_t *data)
{
 8002fe8:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
 8002fec:	ed2d 8b02 	vpush	{d8}
  if (net_exec_ctx[idx].handle == AI_HANDLE_NULL) {
 8002ff0:	4ca3      	ldr	r4, [pc, #652]	@ (8003280 <aiSystemPerformanceProcess+0x298>)
{
 8002ff2:	b0a0      	sub	sp, #128	@ 0x80
  if (net_exec_ctx[idx].handle == AI_HANDLE_NULL) {
 8002ff4:	6823      	ldr	r3, [r4, #0]
{
 8002ff6:	900c      	str	r0, [sp, #48]	@ 0x30
  if (net_exec_ctx[idx].handle == AI_HANDLE_NULL) {
 8002ff8:	b973      	cbnz	r3, 8003018 <aiSystemPerformanceProcess+0x30>
    LC_PRINT("E: network handle is NULL\r\n");
 8002ffa:	48a2      	ldr	r0, [pc, #648]	@ (8003284 <aiSystemPerformanceProcess+0x29c>)
 8002ffc:	f000 fd6a 	bl	8003ad4 <lc_print>
    return -1;
 8003000:	f04f 34ff 	mov.w	r4, #4294967295
          port_hal_delay(1000);
        }
        r = 0;
      }
    }
    LC_PRINT("\n%d",r);
 8003004:	48a0      	ldr	r0, [pc, #640]	@ (8003288 <aiSystemPerformanceProcess+0x2a0>)
 8003006:	4621      	mov	r1, r4
 8003008:	f000 fd64 	bl	8003ad4 <lc_print>
    break;
  }

  return r;
}
 800300c:	4620      	mov	r0, r4
 800300e:	b020      	add	sp, #128	@ 0x80
 8003010:	ecbd 8b02 	vpop	{d8}
 8003014:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}
  __ASM volatile ("MRS %0, control" : "=r" (result) );
 8003018:	f3ef 8014 	mrs	r0, CONTROL
  __ASM volatile ("MRS %0, msp" : "=r" (result) );
 800301c:	f3ef 8108 	mrs	r1, MSP
  if (profiling_mode)
 8003020:	f8df 82a8 	ldr.w	r8, [pc, #680]	@ 80032cc <aiSystemPerformanceProcess+0x2e4>
  MON_STACK_INIT();
 8003024:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003028:	f000 fdb6 	bl	8003b98 <stackMonInit>
  if (profiling_mode)
 800302c:	f898 3000 	ldrb.w	r3, [r8]
 8003030:	b1fb      	cbz	r3, 8003072 <aiSystemPerformanceProcess+0x8a>
    niter = _APP_ITER_ * profiling_factor;
 8003032:	4b96      	ldr	r3, [pc, #600]	@ (800328c <aiSystemPerformanceProcess+0x2a4>)
 8003034:	681b      	ldr	r3, [r3, #0]
    niter = _APP_ITER_;
 8003036:	9305      	str	r3, [sp, #20]
  LC_PRINT("\r\nRunning PerfTest on \"%s\" with random inputs (%d iterations)...\r\n",
 8003038:	9a05      	ldr	r2, [sp, #20]
 800303a:	68a1      	ldr	r1, [r4, #8]
 800303c:	4894      	ldr	r0, [pc, #592]	@ (8003290 <aiSystemPerformanceProcess+0x2a8>)
 800303e:	f000 fd49 	bl	8003ad4 <lc_print>
 8003042:	f3ef 8308 	mrs	r3, MSP
  MON_STACK_CHECK0();
 8003046:	4d93      	ldr	r5, [pc, #588]	@ (8003294 <aiSystemPerformanceProcess+0x2ac>)
 8003048:	69aa      	ldr	r2, [r5, #24]
 800304a:	4293      	cmp	r3, r2
 800304c:	d004      	beq.n	8003058 <aiSystemPerformanceProcess+0x70>
 800304e:	f3ef 8108 	mrs	r1, MSP
 8003052:	4891      	ldr	r0, [pc, #580]	@ (8003298 <aiSystemPerformanceProcess+0x2b0>)
 8003054:	f000 fd3e 	bl	8003ad4 <lc_print>
  MON_STACK_MARK();
 8003058:	792b      	ldrb	r3, [r5, #4]
 800305a:	b963      	cbnz	r3, 8003076 <aiSystemPerformanceProcess+0x8e>
  if ((net_exec_ctx[idx].report.n_inputs > AI_MNETWORK_IN_NUM) ||
 800305c:	f8b4 3040 	ldrh.w	r3, [r4, #64]	@ 0x40
 8003060:	2b01      	cmp	r3, #1
 8003062:	d914      	bls.n	800308e <aiSystemPerformanceProcess+0xa6>
    LC_PRINT("E: AI_MNETWORK_IN/OUT_NUM definition are incoherent\r\n");
 8003064:	488d      	ldr	r0, [pc, #564]	@ (800329c <aiSystemPerformanceProcess+0x2b4>)
 8003066:	f000 fd35 	bl	8003ad4 <lc_print>
    port_hal_delay(100);
 800306a:	2064      	movs	r0, #100	@ 0x64
 800306c:	f7fe f954 	bl	8001318 <HAL_Delay>
    if (!r) {
 8003070:	e7c6      	b.n	8003000 <aiSystemPerformanceProcess+0x18>
    niter = _APP_ITER_;
 8003072:	2301      	movs	r3, #1
 8003074:	e7df      	b.n	8003036 <aiSystemPerformanceProcess+0x4e>
  MON_STACK_MARK();
 8003076:	69eb      	ldr	r3, [r5, #28]
 8003078:	3303      	adds	r3, #3
 800307a:	f023 0303 	bic.w	r3, r3, #3
 800307e:	f04f 31de 	mov.w	r1, #3739147998	@ 0xdededede
 8003082:	69aa      	ldr	r2, [r5, #24]
 8003084:	4293      	cmp	r3, r2
 8003086:	d2e9      	bcs.n	800305c <aiSystemPerformanceProcess+0x74>
 8003088:	f843 1b04 	str.w	r1, [r3], #4
 800308c:	e7f9      	b.n	8003082 <aiSystemPerformanceProcess+0x9a>
      (net_exec_ctx[idx].report.n_outputs > AI_MNETWORK_OUT_NUM))
 800308e:	f8b4 c042 	ldrh.w	ip, [r4, #66]	@ 0x42
  if ((net_exec_ctx[idx].report.n_inputs > AI_MNETWORK_IN_NUM) ||
 8003092:	f1bc 0f01 	cmp.w	ip, #1
 8003096:	d8e5      	bhi.n	8003064 <aiSystemPerformanceProcess+0x7c>
  for (int i = 0; i < net_exec_ctx[idx].report.n_inputs; i++) {
 8003098:	2b01      	cmp	r3, #1
 800309a:	d10f      	bne.n	80030bc <aiSystemPerformanceProcess+0xd4>
    ai_input[i] = net_exec_ctx[idx].report.inputs[i];
 800309c:	f8d4 e044 	ldr.w	lr, [r4, #68]	@ 0x44
 80030a0:	4676      	mov	r6, lr
 80030a2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80030a4:	ad12      	add	r5, sp, #72	@ 0x48
 80030a6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80030a8:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
    if (net_exec_ctx[idx].report.inputs[i].data)
 80030ac:	f8de 3004 	ldr.w	r3, [lr, #4]
    ai_input[i] = net_exec_ctx[idx].report.inputs[i];
 80030b0:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    if (net_exec_ctx[idx].report.inputs[i].data)
 80030b4:	b90b      	cbnz	r3, 80030ba <aiSystemPerformanceProcess+0xd2>
      ai_input[i].data = AI_HANDLE_PTR(data_ins[i]);
 80030b6:	4b7a      	ldr	r3, [pc, #488]	@ (80032a0 <aiSystemPerformanceProcess+0x2b8>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	9313      	str	r3, [sp, #76]	@ 0x4c
  for (int i = 0; i < net_exec_ctx[idx].report.n_outputs; i++) {
 80030bc:	f1bc 0f00 	cmp.w	ip, #0
 80030c0:	d00f      	beq.n	80030e2 <aiSystemPerformanceProcess+0xfa>
    ai_output[i] = net_exec_ctx[idx].report.outputs[i];
 80030c2:	f8d4 c048 	ldr.w	ip, [r4, #72]	@ 0x48
 80030c6:	4666      	mov	r6, ip
 80030c8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80030ca:	ad19      	add	r5, sp, #100	@ 0x64
 80030cc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80030ce:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
    if (net_exec_ctx[idx].report.outputs[i].data)
 80030d2:	f8dc 3004 	ldr.w	r3, [ip, #4]
    ai_output[i] = net_exec_ctx[idx].report.outputs[i];
 80030d6:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    if (net_exec_ctx[idx].report.outputs[i].data)
 80030da:	b90b      	cbnz	r3, 80030e0 <aiSystemPerformanceProcess+0xf8>
      ai_output[i].data = AI_HANDLE_PTR(data_outs[i]);
 80030dc:	4b71      	ldr	r3, [pc, #452]	@ (80032a4 <aiSystemPerformanceProcess+0x2bc>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	931a      	str	r3, [sp, #104]	@ 0x68
  if (profiling_mode) {
 80030e2:	f898 3000 	ldrb.w	r3, [r8]
 80030e6:	b14b      	cbz	r3, 80030fc <aiSystemPerformanceProcess+0x114>
    LC_PRINT("Profiling mode (%d)...\r\n", profiling_factor);
 80030e8:	4b68      	ldr	r3, [pc, #416]	@ (800328c <aiSystemPerformanceProcess+0x2a4>)
 80030ea:	486f      	ldr	r0, [pc, #444]	@ (80032a8 <aiSystemPerformanceProcess+0x2c0>)
 80030ec:	6819      	ldr	r1, [r3, #0]
 80030ee:	f000 fcf1 	bl	8003ad4 <lc_print>
    fflush(stdout);
 80030f2:	4b6e      	ldr	r3, [pc, #440]	@ (80032ac <aiSystemPerformanceProcess+0x2c4>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	6898      	ldr	r0, [r3, #8]
 80030f8:	f006 f9c4 	bl	8009484 <fflush>
  if (observer_mode) {
 80030fc:	4b6c      	ldr	r3, [pc, #432]	@ (80032b0 <aiSystemPerformanceProcess+0x2c8>)
 80030fe:	781b      	ldrb	r3, [r3, #0]
 8003100:	b153      	cbz	r3, 8003118 <aiSystemPerformanceProcess+0x130>
    MON_ALLOC_ENABLE();
 8003102:	4d6c      	ldr	r5, [pc, #432]	@ (80032b4 <aiSystemPerformanceProcess+0x2cc>)
    MON_ALLOC_RESET();
 8003104:	f7ff fca4 	bl	8002a50 <_mon_alloc_reset>
    MON_ALLOC_ENABLE();
 8003108:	682b      	ldr	r3, [r5, #0]
    aiObserverInit(&net_exec_ctx[idx]);
 800310a:	485d      	ldr	r0, [pc, #372]	@ (8003280 <aiSystemPerformanceProcess+0x298>)
    MON_ALLOC_ENABLE();
 800310c:	f043 0301 	orr.w	r3, r3, #1
 8003110:	602b      	str	r3, [r5, #0]
    aiObserverInit(&net_exec_ctx[idx]);
 8003112:	f7ff fd7b 	bl	8002c0c <aiObserverInit>
    observer_heap_sz = MON_ALLOC_MAX_USED();
 8003116:	696b      	ldr	r3, [r5, #20]
  int observer_heap_sz = 0UL;
 8003118:	930a      	str	r3, [sp, #40]	@ 0x28
  MON_ALLOC_RESET();
 800311a:	f7ff fc99 	bl	8002a50 <_mon_alloc_reset>
  HAL_Delay(5000);
 800311e:	f241 3088 	movw	r0, #5000	@ 0x1388
 8003122:	f7fe f8f9 	bl	8001318 <HAL_Delay>
  LC_PRINT("\nInitialised");
 8003126:	4864      	ldr	r0, [pc, #400]	@ (80032b8 <aiSystemPerformanceProcess+0x2d0>)
                      in_data[j] = (ai_i8)(v * 127);  // Quantize to int8
 8003128:	ed9f 8a64 	vldr	s16, [pc, #400]	@ 80032bc <aiSystemPerformanceProcess+0x2d4>
  LC_PRINT("\nInitialised");
 800312c:	f000 fcd2 	bl	8003ad4 <lc_print>
  int value_index = 0;  // Index to loop through input values
 8003130:	2300      	movs	r3, #0
  tcumul = 0ULL;
 8003132:	e9cd 3306 	strd	r3, r3, [sp, #24]
 8003136:	9308      	str	r3, [sp, #32]
  for (iter = 0; iter < niter; iter++) {
 8003138:	461d      	mov	r5, r3
 800313a:	9b05      	ldr	r3, [sp, #20]
 800313c:	429d      	cmp	r5, r3
 800313e:	f280 80d2 	bge.w	80032e6 <aiSystemPerformanceProcess+0x2fe>
      for (int i = 0; i < net_exec_ctx[idx].report.n_inputs; i++) {
 8003142:	f8df 913c 	ldr.w	r9, [pc, #316]	@ 8003280 <aiSystemPerformanceProcess+0x298>
 8003146:	f10d 0848 	add.w	r8, sp, #72	@ 0x48
 800314a:	f04f 0a00 	mov.w	sl, #0
 800314e:	e01d      	b.n	800318c <aiSystemPerformanceProcess+0x1a4>
          ai_i8 *in_data = (ai_i8 *)ai_input[i].data;
 8003150:	e9d8 2300 	ldrd	r2, r3, [r8]
              if (AI_BUFFER_FMT_GET_TYPE(fmt) == AI_BUFFER_FMT_TYPE_FLOAT) {
 8003154:	f3c2 4143 	ubfx	r1, r2, #17, #4
                  if (AI_BUFFER_FMT_GET_BITS(fmt) >= 8) {
 8003158:	f3c2 12d1 	ubfx	r2, r2, #7, #18
 800315c:	f002 0278 	and.w	r2, r2, #120	@ 0x78
              if (AI_BUFFER_FMT_GET_TYPE(fmt) == AI_BUFFER_FMT_TYPE_FLOAT) {
 8003160:	9109      	str	r1, [sp, #36]	@ 0x24
                  if (AI_BUFFER_FMT_GET_BITS(fmt) >= 8) {
 8003162:	920b      	str	r2, [sp, #44]	@ 0x2c
          for (ai_size j = 0; j < AI_BUFFER_SIZE(&ai_input[i]); ++j) {
 8003164:	2600      	movs	r6, #0
 8003166:	930d      	str	r3, [sp, #52]	@ 0x34
 8003168:	9b06      	ldr	r3, [sp, #24]
 800316a:	2101      	movs	r1, #1
 800316c:	4640      	mov	r0, r8
 800316e:	eb03 0b06 	add.w	fp, r3, r6
 8003172:	f001 fb69 	bl	8004848 <ai_buffer_get_size>
 8003176:	4286      	cmp	r6, r0
 8003178:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800317a:	f04f 0228 	mov.w	r2, #40	@ 0x28
 800317e:	d356      	bcc.n	800322e <aiSystemPerformanceProcess+0x246>
      for (int i = 0; i < net_exec_ctx[idx].report.n_inputs; i++) {
 8003180:	f10a 0a01 	add.w	sl, sl, #1
 8003184:	f108 081c 	add.w	r8, r8, #28
 8003188:	f8cd b018 	str.w	fp, [sp, #24]
 800318c:	f8b9 3040 	ldrh.w	r3, [r9, #64]	@ 0x40
 8003190:	459a      	cmp	sl, r3
 8003192:	dbdd      	blt.n	8003150 <aiSystemPerformanceProcess+0x168>
    MON_ALLOC_ENABLE();
 8003194:	4a47      	ldr	r2, [pc, #284]	@ (80032b4 <aiSystemPerformanceProcess+0x2cc>)
 8003196:	6813      	ldr	r3, [r2, #0]
 8003198:	f043 0301 	orr.w	r3, r3, #1
 800319c:	6013      	str	r3, [r2, #0]
  cyclesCount.tick_start = port_hal_get_tick();
 800319e:	f7fe f8b5 	bl	800130c <HAL_GetTick>
 80031a2:	4b47      	ldr	r3, [pc, #284]	@ (80032c0 <aiSystemPerformanceProcess+0x2d8>)
  port_dwt_reset();
 80031a4:	4a47      	ldr	r2, [pc, #284]	@ (80032c4 <aiSystemPerformanceProcess+0x2dc>)
  cyclesCount.tick_start = port_hal_get_tick();
 80031a6:	6098      	str	r0, [r3, #8]
  port_dwt_reset();
 80031a8:	f04f 0800 	mov.w	r8, #0
 80031ac:	f8c2 8004 	str.w	r8, [r2, #4]
  cyclesCount.dwt_start = port_dwt_get_cycles();
 80031b0:	6852      	ldr	r2, [r2, #4]
 80031b2:	605a      	str	r2, [r3, #4]
    batch = ai_mnetwork_run(net_exec_ctx[idx].handle, ai_input, ai_output);
 80031b4:	f8d9 0000 	ldr.w	r0, [r9]
 80031b8:	aa19      	add	r2, sp, #100	@ 0x64
 80031ba:	a912      	add	r1, sp, #72	@ 0x48
 80031bc:	f000 fef3 	bl	8003fa6 <ai_mnetwork_run>
    if (batch != 1) {
 80031c0:	2801      	cmp	r0, #1
 80031c2:	f040 8089 	bne.w	80032d8 <aiSystemPerformanceProcess+0x2f0>
        LC_PRINT("\nOutput Tensor %d:\r\n", i);
 80031c6:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 80032d4 <aiSystemPerformanceProcess+0x2ec>
 80031ca:	ae19      	add	r6, sp, #100	@ 0x64
    for (int i = 0; i < net_exec_ctx[idx].report.n_outputs; i++) {
 80031cc:	4b2c      	ldr	r3, [pc, #176]	@ (8003280 <aiSystemPerformanceProcess+0x298>)
 80031ce:	f8b3 3042 	ldrh.w	r3, [r3, #66]	@ 0x42
 80031d2:	4598      	cmp	r8, r3
 80031d4:	f2c0 816e 	blt.w	80034b4 <aiSystemPerformanceProcess+0x4cc>
    LC_PRINT("FINISHED\n");
 80031d8:	483b      	ldr	r0, [pc, #236]	@ (80032c8 <aiSystemPerformanceProcess+0x2e0>)
 80031da:	f000 fc7b 	bl	8003ad4 <lc_print>
    HAL_Delay(1000);
 80031de:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80031e2:	f7fe f899 	bl	8001318 <HAL_Delay>
    tend = cyclesCounterEnd();
 80031e6:	f7ff fc45 	bl	8002a74 <cyclesCounterEnd>
    MON_ALLOC_DISABLE();
 80031ea:	4a32      	ldr	r2, [pc, #200]	@ (80032b4 <aiSystemPerformanceProcess+0x2cc>)
 80031ec:	6813      	ldr	r3, [r2, #0]
 80031ee:	f023 0301 	bic.w	r3, r3, #1
 80031f2:	6013      	str	r3, [r2, #0]
    tcumul += tend;
 80031f4:	9b07      	ldr	r3, [sp, #28]
 80031f6:	18c3      	adds	r3, r0, r3
 80031f8:	9307      	str	r3, [sp, #28]
 80031fa:	9b08      	ldr	r3, [sp, #32]
    dwtCyclesToTime(tend, &t);
 80031fc:	aa0e      	add	r2, sp, #56	@ 0x38
    tcumul += tend;
 80031fe:	eb43 0301 	adc.w	r3, r3, r1
 8003202:	9308      	str	r3, [sp, #32]
    dwtCyclesToTime(tend, &t);
 8003204:	f000 fcf6 	bl	8003bf4 <dwtCyclesToTime>
    if (!profiling_mode) {
 8003208:	4b30      	ldr	r3, [pc, #192]	@ (80032cc <aiSystemPerformanceProcess+0x2e4>)
 800320a:	781b      	ldrb	r3, [r3, #0]
 800320c:	b96b      	cbnz	r3, 800322a <aiSystemPerformanceProcess+0x242>
      if (t.s > 10)
 800320e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8003210:	9a05      	ldr	r2, [sp, #20]
      LC_PRINT(".");
 8003212:	482f      	ldr	r0, [pc, #188]	@ (80032d0 <aiSystemPerformanceProcess+0x2e8>)
 8003214:	2b0a      	cmp	r3, #10
 8003216:	bfc8      	it	gt
 8003218:	462a      	movgt	r2, r5
 800321a:	9205      	str	r2, [sp, #20]
 800321c:	f000 fc5a 	bl	8003ad4 <lc_print>
      fflush(stdout);
 8003220:	4b22      	ldr	r3, [pc, #136]	@ (80032ac <aiSystemPerformanceProcess+0x2c4>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	6898      	ldr	r0, [r3, #8]
 8003226:	f006 f92d 	bl	8009484 <fflush>
  for (iter = 0; iter < niter; iter++) {
 800322a:	3501      	adds	r5, #1
 800322c:	e785      	b.n	800313a <aiSystemPerformanceProcess+0x152>
              float v = input_values[value_index % 40];  // Use the predefined value
 800322e:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8003230:	fbbb f1f2 	udiv	r1, fp, r2
 8003234:	fb02 b111 	mls	r1, r2, r1, fp
 8003238:	f930 1011 	ldrsh.w	r1, [r0, r1, lsl #1]
 800323c:	ee07 1a90 	vmov	s15, r1
              if (AI_BUFFER_FMT_GET_TYPE(fmt) == AI_BUFFER_FMT_TYPE_FLOAT) {
 8003240:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8003242:	2901      	cmp	r1, #1
              float v = input_values[value_index % 40];  // Use the predefined value
 8003244:	eef8 7ae7 	vcvt.f32.s32	s15, s15
              if (AI_BUFFER_FMT_GET_TYPE(fmt) == AI_BUFFER_FMT_TYPE_FLOAT) {
 8003248:	d105      	bne.n	8003256 <aiSystemPerformanceProcess+0x26e>
                  *(ai_float *)(in_data + j * 4) = v;
 800324a:	eb03 0186 	add.w	r1, r3, r6, lsl #2
 800324e:	edc1 7a00 	vstr	s15, [r1]
          for (ai_size j = 0; j < AI_BUFFER_SIZE(&ai_input[i]); ++j) {
 8003252:	3601      	adds	r6, #1
 8003254:	e787      	b.n	8003166 <aiSystemPerformanceProcess+0x17e>
                  if (AI_BUFFER_FMT_GET_BITS(fmt) >= 8) {
 8003256:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8003258:	2900      	cmp	r1, #0
 800325a:	d0fa      	beq.n	8003252 <aiSystemPerformanceProcess+0x26a>
                      in_data[j] = (ai_i8)(v * 127);  // Quantize to int8
 800325c:	ee67 7a88 	vmul.f32	s15, s15, s16
                      if (AI_BUFFER_FMT_GET_TYPE(fmt) == AI_BUFFER_FMT_TYPE_BOOL) {
 8003260:	9809      	ldr	r0, [sp, #36]	@ 0x24
                      in_data[j] = (ai_i8)(v * 127);  // Quantize to int8
 8003262:	eefd 7ae7 	vcvt.s32.f32	s15, s15
                      if (AI_BUFFER_FMT_GET_TYPE(fmt) == AI_BUFFER_FMT_TYPE_BOOL) {
 8003266:	2803      	cmp	r0, #3
                      in_data[j] = (ai_i8)(v * 127);  // Quantize to int8
 8003268:	edcd 7a0d 	vstr	s15, [sp, #52]	@ 0x34
 800326c:	f99d 1034 	ldrsb.w	r1, [sp, #52]	@ 0x34
                      if (AI_BUFFER_FMT_GET_TYPE(fmt) == AI_BUFFER_FMT_TYPE_BOOL) {
 8003270:	d001      	beq.n	8003276 <aiSystemPerformanceProcess+0x28e>
                          in_data[j] = (in_data[j] > 0) ? (ai_i8)1 : (ai_i8)0;
 8003272:	5599      	strb	r1, [r3, r6]
 8003274:	e7ed      	b.n	8003252 <aiSystemPerformanceProcess+0x26a>
 8003276:	2900      	cmp	r1, #0
 8003278:	bfd4      	ite	le
 800327a:	2100      	movle	r1, #0
 800327c:	2101      	movgt	r1, #1
 800327e:	e7f8      	b.n	8003272 <aiSystemPerformanceProcess+0x28a>
 8003280:	20004238 	.word	0x20004238
 8003284:	0800bbff 	.word	0x0800bbff
 8003288:	0800c0be 	.word	0x0800c0be
 800328c:	2000343c 	.word	0x2000343c
 8003290:	0800bc1b 	.word	0x0800bc1b
 8003294:	200042d8 	.word	0x200042d8
 8003298:	0800bc5e 	.word	0x0800bc5e
 800329c:	0800bca2 	.word	0x0800bca2
 80032a0:	2000344c 	.word	0x2000344c
 80032a4:	20003448 	.word	0x20003448
 80032a8:	0800bcd8 	.word	0x0800bcd8
 80032ac:	20003f94 	.word	0x20003f94
 80032b0:	20003440 	.word	0x20003440
 80032b4:	200042f8 	.word	0x200042f8
 80032b8:	0800bcf1 	.word	0x0800bcf1
 80032bc:	42fe0000 	.word	0x42fe0000
 80032c0:	200042cc 	.word	0x200042cc
 80032c4:	e0001000 	.word	0xe0001000
 80032c8:	0800bd2e 	.word	0x0800bd2e
 80032cc:	200042c8 	.word	0x200042c8
 80032d0:	0800bd38 	.word	0x0800bd38
 80032d4:	0800bd0e 	.word	0x0800bd0e
      aiLogErr(ai_mnetwork_get_error(net_exec_ctx[idx].handle),
 80032d8:	f8d9 0000 	ldr.w	r0, [r9]
 80032dc:	f000 fe37 	bl	8003f4e <ai_mnetwork_get_error>
 80032e0:	49b5      	ldr	r1, [pc, #724]	@ (80035b8 <aiSystemPerformanceProcess+0x5d0>)
 80032e2:	f000 f9ed 	bl	80036c0 <aiLogErr>
  LC_PRINT("\r\n");
 80032e6:	48b5      	ldr	r0, [pc, #724]	@ (80035bc <aiSystemPerformanceProcess+0x5d4>)
 80032e8:	f000 fbf4 	bl	8003ad4 <lc_print>
  MON_STACK_EVALUATE();
 80032ec:	4bb4      	ldr	r3, [pc, #720]	@ (80035c0 <aiSystemPerformanceProcess+0x5d8>)
 80032ee:	791e      	ldrb	r6, [r3, #4]
 80032f0:	2000      	movs	r0, #0
 80032f2:	6098      	str	r0, [r3, #8]
 80032f4:	b316      	cbz	r6, 800333c <aiSystemPerformanceProcess+0x354>
 80032f6:	68da      	ldr	r2, [r3, #12]
 80032f8:	6959      	ldr	r1, [r3, #20]
 80032fa:	1a89      	subs	r1, r1, r2
 80032fc:	69da      	ldr	r2, [r3, #28]
 80032fe:	3203      	adds	r2, #3
 8003300:	f022 0203 	bic.w	r2, r2, #3
 8003304:	f102 0c20 	add.w	ip, r2, #32
 8003308:	f852 eb04 	ldr.w	lr, [r2], #4
 800330c:	f1be 3fde 	cmp.w	lr, #3739147998	@ 0xdededede
 8003310:	bf18      	it	ne
 8003312:	4630      	movne	r0, r6
 8003314:	4594      	cmp	ip, r2
 8003316:	d1f7      	bne.n	8003308 <aiSystemPerformanceProcess+0x320>
 8003318:	2800      	cmp	r0, #0
 800331a:	f040 8108 	bne.w	800352e <aiSystemPerformanceProcess+0x546>
 800331e:	4662      	mov	r2, ip
 8003320:	2020      	movs	r0, #32
 8003322:	f8d3 c018 	ldr.w	ip, [r3, #24]
 8003326:	6098      	str	r0, [r3, #8]
 8003328:	6810      	ldr	r0, [r2, #0]
 800332a:	689e      	ldr	r6, [r3, #8]
 800332c:	f1b0 3fde 	cmp.w	r0, #3739147998	@ 0xdededede
 8003330:	d102      	bne.n	8003338 <aiSystemPerformanceProcess+0x350>
 8003332:	4562      	cmp	r2, ip
 8003334:	f0c0 80f7 	bcc.w	8003526 <aiSystemPerformanceProcess+0x53e>
 8003338:	1b8e      	subs	r6, r1, r6
 800333a:	609e      	str	r6, [r3, #8]
  LC_PRINT("\r\n");
 800333c:	489f      	ldr	r0, [pc, #636]	@ (80035bc <aiSystemPerformanceProcess+0x5d4>)
 800333e:	f000 fbc9 	bl	8003ad4 <lc_print>
  tcumul -= u_observer_ctx.u_dur_t;
 8003342:	4aa0      	ldr	r2, [pc, #640]	@ (80035c4 <aiSystemPerformanceProcess+0x5dc>)
 8003344:	9b07      	ldr	r3, [sp, #28]
 8003346:	e9d2 0104 	ldrd	r0, r1, [r2, #16]
 800334a:	1a18      	subs	r0, r3, r0
 800334c:	9b08      	ldr	r3, [sp, #32]
  tcumul /= (uint64_t)iter;
 800334e:	462a      	mov	r2, r5
  tcumul -= u_observer_ctx.u_dur_t;
 8003350:	eb63 0101 	sbc.w	r1, r3, r1
  tcumul /= (uint64_t)iter;
 8003354:	17eb      	asrs	r3, r5, #31
 8003356:	f7fd fc27 	bl	8000ba8 <__aeabi_uldivmod>
  dwtCyclesToTime(tcumul, &t);
 800335a:	aa0e      	add	r2, sp, #56	@ 0x38
  tcumul /= (uint64_t)iter;
 800335c:	4688      	mov	r8, r1
 800335e:	4681      	mov	r9, r0
 8003360:	4606      	mov	r6, r0
  dwtCyclesToTime(tcumul, &t);
 8003362:	f000 fc47 	bl	8003bf4 <dwtCyclesToTime>
  LC_PRINT("Results for \"%s\", %d inferences @%dMHz/%dMHz (complexity: %s MACC)\r\n",
 8003366:	68a3      	ldr	r3, [r4, #8]
 8003368:	9305      	str	r3, [sp, #20]
 800336a:	f7fe fd31 	bl	8001dd0 <HAL_RCC_GetHCLKFreq>
 800336e:	4682      	mov	sl, r0
 8003370:	f7fe fd2e 	bl	8001dd0 <HAL_RCC_GetHCLKFreq>
 8003374:	4683      	mov	fp, r0
 8003376:	e9d4 010e 	ldrd	r0, r1, [r4, #56]	@ 0x38
 800337a:	f000 fb93 	bl	8003aa4 <uint64ToDecimal>
 800337e:	4992      	ldr	r1, [pc, #584]	@ (80035c8 <aiSystemPerformanceProcess+0x5e0>)
 8003380:	9001      	str	r0, [sp, #4]
 8003382:	fbbb f2f1 	udiv	r2, fp, r1
 8003386:	fbba f3f1 	udiv	r3, sl, r1
 800338a:	4890      	ldr	r0, [pc, #576]	@ (80035cc <aiSystemPerformanceProcess+0x5e4>)
 800338c:	9905      	ldr	r1, [sp, #20]
 800338e:	9200      	str	r2, [sp, #0]
 8003390:	462a      	mov	r2, r5
 8003392:	f000 fb9f 	bl	8003ad4 <lc_print>
  LC_PRINT(" duration     : %d.%03d ms (average)\r\n", t.s * 1000 + t.ms, t.us);
 8003396:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8003398:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800339a:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800339c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80033a0:	fb00 3101 	mla	r1, r0, r1, r3
 80033a4:	488a      	ldr	r0, [pc, #552]	@ (80035d0 <aiSystemPerformanceProcess+0x5e8>)
 80033a6:	f000 fb95 	bl	8003ad4 <lc_print>
  LC_PRINT(" CPU cycles   : %s (average)\r\n",  uint64ToDecimal(tcumul));
 80033aa:	4648      	mov	r0, r9
 80033ac:	4641      	mov	r1, r8
 80033ae:	f000 fb79 	bl	8003aa4 <uint64ToDecimal>
  LC_PRINT(" CPU Workload : %d%c (duty cycle = 1s)\r\n", (int)((tcumul * 100) / t.fcpu), '%');
 80033b2:	f04f 0964 	mov.w	r9, #100	@ 0x64
 80033b6:	fba6 6509 	umull	r6, r5, r6, r9
  LC_PRINT(" CPU cycles   : %s (average)\r\n",  uint64ToDecimal(tcumul));
 80033ba:	4601      	mov	r1, r0
  LC_PRINT(" CPU Workload : %d%c (duty cycle = 1s)\r\n", (int)((tcumul * 100) / t.fcpu), '%');
 80033bc:	fb09 5508 	mla	r5, r9, r8, r5
  LC_PRINT(" CPU cycles   : %s (average)\r\n",  uint64ToDecimal(tcumul));
 80033c0:	4884      	ldr	r0, [pc, #528]	@ (80035d4 <aiSystemPerformanceProcess+0x5ec>)
 80033c2:	f000 fb87 	bl	8003ad4 <lc_print>
  LC_PRINT(" CPU Workload : %d%c (duty cycle = 1s)\r\n", (int)((tcumul * 100) / t.fcpu), '%');
 80033c6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80033c8:	2300      	movs	r3, #0
 80033ca:	4630      	mov	r0, r6
 80033cc:	4629      	mov	r1, r5
 80033ce:	f7fd fbeb 	bl	8000ba8 <__aeabi_uldivmod>
 80033d2:	2225      	movs	r2, #37	@ 0x25
 80033d4:	4601      	mov	r1, r0
 80033d6:	4880      	ldr	r0, [pc, #512]	@ (80035d8 <aiSystemPerformanceProcess+0x5f0>)
 80033d8:	f000 fb7c 	bl	8003ad4 <lc_print>
  cmacc = (ai_macc)((tcumul * 100)/ net_exec_ctx[idx].report.n_macc);
 80033dc:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	@ 0x38
 80033e0:	4630      	mov	r0, r6
 80033e2:	4629      	mov	r1, r5
 80033e4:	f7fd fbe0 	bl	8000ba8 <__aeabi_uldivmod>
  LC_PRINT(" cycles/MACC  : %d.%02d (average for all layers)\r\n",
 80033e8:	2300      	movs	r3, #0
 80033ea:	2264      	movs	r2, #100	@ 0x64
  cmacc = (ai_macc)((tcumul * 100)/ net_exec_ctx[idx].report.n_macc);
 80033ec:	4604      	mov	r4, r0
  LC_PRINT(" cycles/MACC  : %d.%02d (average for all layers)\r\n",
 80033ee:	f7fd fbdb 	bl	8000ba8 <__aeabi_uldivmod>
 80033f2:	fb09 4210 	mls	r2, r9, r0, r4
 80033f6:	4601      	mov	r1, r0
 80033f8:	4878      	ldr	r0, [pc, #480]	@ (80035dc <aiSystemPerformanceProcess+0x5f4>)
 80033fa:	f000 fb6b 	bl	8003ad4 <lc_print>
  MON_STACK_REPORT();
 80033fe:	4b70      	ldr	r3, [pc, #448]	@ (80035c0 <aiSystemPerformanceProcess+0x5d8>)
 8003400:	791a      	ldrb	r2, [r3, #4]
 8003402:	2a00      	cmp	r2, #0
 8003404:	f000 809d 	beq.w	8003542 <aiSystemPerformanceProcess+0x55a>
 8003408:	6899      	ldr	r1, [r3, #8]
 800340a:	4875      	ldr	r0, [pc, #468]	@ (80035e0 <aiSystemPerformanceProcess+0x5f8>)
 800340c:	f000 fb62 	bl	8003ad4 <lc_print>
  MON_ALLOC_REPORT();
 8003410:	4974      	ldr	r1, [pc, #464]	@ (80035e4 <aiSystemPerformanceProcess+0x5fc>)
  LC_PRINT(" observer res : %d bytes used from the heap (%d c-nodes)\r\n", observer_heap_sz,
 8003412:	4c75      	ldr	r4, [pc, #468]	@ (80035e8 <aiSystemPerformanceProcess+0x600>)
  MON_ALLOC_REPORT();
 8003414:	680b      	ldr	r3, [r1, #0]
 8003416:	4875      	ldr	r0, [pc, #468]	@ (80035ec <aiSystemPerformanceProcess+0x604>)
 8003418:	f3c3 0341 	ubfx	r3, r3, #1, #2
 800341c:	9303      	str	r3, [sp, #12]
 800341e:	698b      	ldr	r3, [r1, #24]
 8003420:	9302      	str	r3, [sp, #8]
 8003422:	694b      	ldr	r3, [r1, #20]
 8003424:	9301      	str	r3, [sp, #4]
 8003426:	688b      	ldr	r3, [r1, #8]
 8003428:	9300      	str	r3, [sp, #0]
 800342a:	690b      	ldr	r3, [r1, #16]
 800342c:	684a      	ldr	r2, [r1, #4]
 800342e:	68c9      	ldr	r1, [r1, #12]
 8003430:	f000 fb50 	bl	8003ad4 <lc_print>
  LC_PRINT(" observer res : %d bytes used from the heap (%d c-nodes)\r\n", observer_heap_sz,
 8003434:	f8d4 2084 	ldr.w	r2, [r4, #132]	@ 0x84
 8003438:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800343a:	486d      	ldr	r0, [pc, #436]	@ (80035f0 <aiSystemPerformanceProcess+0x608>)
 800343c:	f000 fb4a 	bl	8003ad4 <lc_print>
  aiObserverDone(&net_exec_ctx[idx]);
 8003440:	4620      	mov	r0, r4
 8003442:	f7ff fc21 	bl	8002c88 <aiObserverDone>
      r = aiTestConsole();
 8003446:	f7ff fb9b 	bl	8002b80 <aiTestConsole>
      if (r == CONS_EVT_UNDEFINED) {
 800344a:	2864      	cmp	r0, #100	@ 0x64
      r = aiTestConsole();
 800344c:	4604      	mov	r4, r0
      if (r == CONS_EVT_UNDEFINED) {
 800344e:	d02f      	beq.n	80034b0 <aiSystemPerformanceProcess+0x4c8>
      } else if (r == CONS_EVT_HELP) {
 8003450:	2803      	cmp	r0, #3
 8003452:	d124      	bne.n	800349e <aiSystemPerformanceProcess+0x4b6>
        LC_PRINT("\r\n");
 8003454:	4859      	ldr	r0, [pc, #356]	@ (80035bc <aiSystemPerformanceProcess+0x5d4>)
 8003456:	f000 fb3d 	bl	8003ad4 <lc_print>
        LC_PRINT("Possible key for the interactive console:\r\n");
 800345a:	4866      	ldr	r0, [pc, #408]	@ (80035f4 <aiSystemPerformanceProcess+0x60c>)
 800345c:	f000 fb3a 	bl	8003ad4 <lc_print>
        LC_PRINT("  [q,Q]      quit the application\r\n");
 8003460:	4865      	ldr	r0, [pc, #404]	@ (80035f8 <aiSystemPerformanceProcess+0x610>)
 8003462:	f000 fb37 	bl	8003ad4 <lc_print>
        LC_PRINT("  [r,R]      re-start (NN de-init and re-init)\r\n");
 8003466:	4865      	ldr	r0, [pc, #404]	@ (80035fc <aiSystemPerformanceProcess+0x614>)
 8003468:	f000 fb34 	bl	8003ad4 <lc_print>
        LC_PRINT("  [p,P]      pause\r\n");
 800346c:	4864      	ldr	r0, [pc, #400]	@ (8003600 <aiSystemPerformanceProcess+0x618>)
 800346e:	f000 fb31 	bl	8003ad4 <lc_print>
        LC_PRINT("  [d,D]      hide detailed information ('r' to restore)\r\n");
 8003472:	4864      	ldr	r0, [pc, #400]	@ (8003604 <aiSystemPerformanceProcess+0x61c>)
 8003474:	f000 fb2e 	bl	8003ad4 <lc_print>
        LC_PRINT("  [h,H,?]    this information\r\n");
 8003478:	4863      	ldr	r0, [pc, #396]	@ (8003608 <aiSystemPerformanceProcess+0x620>)
 800347a:	f000 fb2b 	bl	8003ad4 <lc_print>
        LC_PRINT("   xx        continue immediately\r\n");
 800347e:	4863      	ldr	r0, [pc, #396]	@ (800360c <aiSystemPerformanceProcess+0x624>)
 8003480:	f000 fb28 	bl	8003ad4 <lc_print>
        LC_PRINT("\r\n");
 8003484:	484d      	ldr	r0, [pc, #308]	@ (80035bc <aiSystemPerformanceProcess+0x5d4>)
 8003486:	f000 fb25 	bl	8003ad4 <lc_print>
        LC_PRINT("Press any key to continue..\r\n");
 800348a:	4861      	ldr	r0, [pc, #388]	@ (8003610 <aiSystemPerformanceProcess+0x628>)
 800348c:	f000 fb22 	bl	8003ad4 <lc_print>
        while ((r = aiTestConsole()) == CONS_EVT_TIMEOUT) {
 8003490:	f7ff fb76 	bl	8002b80 <aiTestConsole>
 8003494:	4604      	mov	r4, r0
 8003496:	2800      	cmp	r0, #0
 8003498:	d057      	beq.n	800354a <aiSystemPerformanceProcess+0x562>
        if (r == CONS_EVT_UNDEFINED)
 800349a:	2864      	cmp	r0, #100	@ 0x64
 800349c:	d008      	beq.n	80034b0 <aiSystemPerformanceProcess+0x4c8>
      if (r == CONS_EVT_PROF) {
 800349e:	2c05      	cmp	r4, #5
 80034a0:	d158      	bne.n	8003554 <aiSystemPerformanceProcess+0x56c>
        profiling_mode = true;
 80034a2:	4b5c      	ldr	r3, [pc, #368]	@ (8003614 <aiSystemPerformanceProcess+0x62c>)
 80034a4:	2201      	movs	r2, #1
 80034a6:	701a      	strb	r2, [r3, #0]
        profiling_factor *= 2;
 80034a8:	4a5b      	ldr	r2, [pc, #364]	@ (8003618 <aiSystemPerformanceProcess+0x630>)
 80034aa:	6813      	ldr	r3, [r2, #0]
 80034ac:	005b      	lsls	r3, r3, #1
 80034ae:	6013      	str	r3, [r2, #0]
        r = 0;
 80034b0:	2400      	movs	r4, #0
 80034b2:	e5a7      	b.n	8003004 <aiSystemPerformanceProcess+0x1c>
        const ai_buffer_format fmt = AI_BUFFER_FORMAT(&ai_output[i]);
 80034b4:	6833      	ldr	r3, [r6, #0]
        ai_i8 *out_data = (ai_i8 *)ai_output[i].data;
 80034b6:	f8d6 a004 	ldr.w	sl, [r6, #4]
        const ai_buffer_format fmt = AI_BUFFER_FORMAT(&ai_output[i]);
 80034ba:	f023 497e 	bic.w	r9, r3, #4261412864	@ 0xfe000000
        LC_PRINT("\nOutput Tensor %d:\r\n", i);
 80034be:	4641      	mov	r1, r8
 80034c0:	4658      	mov	r0, fp
 80034c2:	f000 fb07 	bl	8003ad4 <lc_print>
            if (AI_BUFFER_FMT_GET_TYPE(fmt) == AI_BUFFER_FMT_TYPE_FLOAT) {
 80034c6:	f3c9 4343 	ubfx	r3, r9, #17, #4
            } else if (AI_BUFFER_FMT_GET_BITS(fmt) >= 8) {
 80034ca:	ea4f 19e9 	mov.w	r9, r9, asr #7
            if (AI_BUFFER_FMT_GET_TYPE(fmt) == AI_BUFFER_FMT_TYPE_FLOAT) {
 80034ce:	9309      	str	r3, [sp, #36]	@ 0x24
            } else if (AI_BUFFER_FMT_GET_BITS(fmt) >= 8) {
 80034d0:	f009 0378 	and.w	r3, r9, #120	@ 0x78
 80034d4:	930b      	str	r3, [sp, #44]	@ 0x2c
        for (ai_size j = 0; j < AI_BUFFER_SIZE(&ai_output[i]); ++j) {
 80034d6:	f04f 0900 	mov.w	r9, #0
 80034da:	2101      	movs	r1, #1
 80034dc:	4630      	mov	r0, r6
 80034de:	f001 f9b3 	bl	8004848 <ai_buffer_get_size>
 80034e2:	4581      	cmp	r9, r0
 80034e4:	d306      	bcc.n	80034f4 <aiSystemPerformanceProcess+0x50c>
        LC_PRINT("\r\n");  // Newline after each tensor's output
 80034e6:	4835      	ldr	r0, [pc, #212]	@ (80035bc <aiSystemPerformanceProcess+0x5d4>)
 80034e8:	f000 faf4 	bl	8003ad4 <lc_print>
    for (int i = 0; i < net_exec_ctx[idx].report.n_outputs; i++) {
 80034ec:	f108 0801 	add.w	r8, r8, #1
 80034f0:	361c      	adds	r6, #28
 80034f2:	e66b      	b.n	80031cc <aiSystemPerformanceProcess+0x1e4>
            if (AI_BUFFER_FMT_GET_TYPE(fmt) == AI_BUFFER_FMT_TYPE_FLOAT) {
 80034f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80034f6:	2b01      	cmp	r3, #1
 80034f8:	d10c      	bne.n	8003514 <aiSystemPerformanceProcess+0x52c>
                ai_float value = *(ai_float *)(out_data + j * 4);
 80034fa:	eb0a 0389 	add.w	r3, sl, r9, lsl #2
                LC_PRINT(" %f", value);  // Print float value
 80034fe:	6818      	ldr	r0, [r3, #0]
 8003500:	f7fd f822 	bl	8000548 <__aeabi_f2d>
 8003504:	4602      	mov	r2, r0
 8003506:	460b      	mov	r3, r1
 8003508:	4844      	ldr	r0, [pc, #272]	@ (800361c <aiSystemPerformanceProcess+0x634>)
 800350a:	f000 fae3 	bl	8003ad4 <lc_print>
        for (ai_size j = 0; j < AI_BUFFER_SIZE(&ai_output[i]); ++j) {
 800350e:	f109 0901 	add.w	r9, r9, #1
 8003512:	e7e2      	b.n	80034da <aiSystemPerformanceProcess+0x4f2>
            } else if (AI_BUFFER_FMT_GET_BITS(fmt) >= 8) {
 8003514:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8003516:	2b00      	cmp	r3, #0
 8003518:	d0f9      	beq.n	800350e <aiSystemPerformanceProcess+0x526>
                LC_PRINT(" %d", value);  // Print int8 value
 800351a:	f91a 1009 	ldrsb.w	r1, [sl, r9]
 800351e:	4840      	ldr	r0, [pc, #256]	@ (8003620 <aiSystemPerformanceProcess+0x638>)
 8003520:	f000 fad8 	bl	8003ad4 <lc_print>
 8003524:	e7f3      	b.n	800350e <aiSystemPerformanceProcess+0x526>
  MON_STACK_EVALUATE();
 8003526:	3604      	adds	r6, #4
 8003528:	3204      	adds	r2, #4
 800352a:	609e      	str	r6, [r3, #8]
 800352c:	e6fc      	b.n	8003328 <aiSystemPerformanceProcess+0x340>
 800352e:	f04f 32ff 	mov.w	r2, #4294967295
 8003532:	483c      	ldr	r0, [pc, #240]	@ (8003624 <aiSystemPerformanceProcess+0x63c>)
 8003534:	609a      	str	r2, [r3, #8]
 8003536:	f000 facd 	bl	8003ad4 <lc_print>
 800353a:	483b      	ldr	r0, [pc, #236]	@ (8003628 <aiSystemPerformanceProcess+0x640>)
 800353c:	f000 faca 	bl	8003ad4 <lc_print>
 8003540:	e6fc      	b.n	800333c <aiSystemPerformanceProcess+0x354>
  MON_STACK_REPORT();
 8003542:	483a      	ldr	r0, [pc, #232]	@ (800362c <aiSystemPerformanceProcess+0x644>)
 8003544:	f000 fac6 	bl	8003ad4 <lc_print>
 8003548:	e762      	b.n	8003410 <aiSystemPerformanceProcess+0x428>
          port_hal_delay(1000);
 800354a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800354e:	f7fd fee3 	bl	8001318 <HAL_Delay>
 8003552:	e79d      	b.n	8003490 <aiSystemPerformanceProcess+0x4a8>
      if (r == CONS_EVT_HIDE) {
 8003554:	2c06      	cmp	r4, #6
 8003556:	d103      	bne.n	8003560 <aiSystemPerformanceProcess+0x578>
        observer_mode = false;
 8003558:	4b35      	ldr	r3, [pc, #212]	@ (8003630 <aiSystemPerformanceProcess+0x648>)
 800355a:	2200      	movs	r2, #0
 800355c:	701a      	strb	r2, [r3, #0]
      if (r == CONS_EVT_PAUSE) {
 800355e:	e7a7      	b.n	80034b0 <aiSystemPerformanceProcess+0x4c8>
      if (r == CONS_EVT_RESTART) {
 8003560:	2c02      	cmp	r4, #2
 8003562:	d110      	bne.n	8003586 <aiSystemPerformanceProcess+0x59e>
        profiling_mode = false;
 8003564:	4b2b      	ldr	r3, [pc, #172]	@ (8003614 <aiSystemPerformanceProcess+0x62c>)
        LC_PRINT("\r\n");
 8003566:	4815      	ldr	r0, [pc, #84]	@ (80035bc <aiSystemPerformanceProcess+0x5d4>)
        profiling_mode = false;
 8003568:	2200      	movs	r2, #0
 800356a:	701a      	strb	r2, [r3, #0]
        observer_mode = true;
 800356c:	4b30      	ldr	r3, [pc, #192]	@ (8003630 <aiSystemPerformanceProcess+0x648>)
 800356e:	2201      	movs	r2, #1
 8003570:	701a      	strb	r2, [r3, #0]
        profiling_factor = 5;
 8003572:	4b29      	ldr	r3, [pc, #164]	@ (8003618 <aiSystemPerformanceProcess+0x630>)
 8003574:	2205      	movs	r2, #5
 8003576:	601a      	str	r2, [r3, #0]
        LC_PRINT("\r\n");
 8003578:	f000 faac 	bl	8003ad4 <lc_print>
        aiDeInit();
 800357c:	f7ff fae6 	bl	8002b4c <aiDeInit>
        aiSystemPerformanceInit();
 8003580:	f7ff fc7a 	bl	8002e78 <aiSystemPerformanceInit>
      if (r == CONS_EVT_PAUSE) {
 8003584:	e794      	b.n	80034b0 <aiSystemPerformanceProcess+0x4c8>
      if (r == CONS_EVT_QUIT) {
 8003586:	2c01      	cmp	r4, #1
 8003588:	d156      	bne.n	8003638 <aiSystemPerformanceProcess+0x650>
        profiling_mode = false;
 800358a:	4b22      	ldr	r3, [pc, #136]	@ (8003614 <aiSystemPerformanceProcess+0x62c>)
        LC_PRINT("\r\n");
 800358c:	480b      	ldr	r0, [pc, #44]	@ (80035bc <aiSystemPerformanceProcess+0x5d4>)
        profiling_mode = false;
 800358e:	2200      	movs	r2, #0
 8003590:	701a      	strb	r2, [r3, #0]
        LC_PRINT("\r\n");
 8003592:	f000 fa9f 	bl	8003ad4 <lc_print>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003596:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800359a:	b672      	cpsid	i
        aiDeInit();
 800359c:	f7ff fad6 	bl	8002b4c <aiDeInit>
        LC_PRINT("\r\n");
 80035a0:	4806      	ldr	r0, [pc, #24]	@ (80035bc <aiSystemPerformanceProcess+0x5d4>)
 80035a2:	f000 fa97 	bl	8003ad4 <lc_print>
        LC_PRINT("Board should be reseted...\r\n");
 80035a6:	4823      	ldr	r0, [pc, #140]	@ (8003634 <aiSystemPerformanceProcess+0x64c>)
 80035a8:	f000 fa94 	bl	8003ad4 <lc_print>
          port_hal_delay(1000);
 80035ac:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80035b0:	f7fd feb2 	bl	8001318 <HAL_Delay>
        while (1) {
 80035b4:	e7fa      	b.n	80035ac <aiSystemPerformanceProcess+0x5c4>
 80035b6:	bf00      	nop
 80035b8:	0800bcfe 	.word	0x0800bcfe
 80035bc:	0800bd2b 	.word	0x0800bd2b
 80035c0:	200042d8 	.word	0x200042d8
 80035c4:	20004210 	.word	0x20004210
 80035c8:	000f4240 	.word	0x000f4240
 80035cc:	0800bdb7 	.word	0x0800bdb7
 80035d0:	0800bdfc 	.word	0x0800bdfc
 80035d4:	0800be23 	.word	0x0800be23
 80035d8:	0800be42 	.word	0x0800be42
 80035dc:	0800be6b 	.word	0x0800be6b
 80035e0:	0800be9e 	.word	0x0800be9e
 80035e4:	200042f8 	.word	0x200042f8
 80035e8:	20004238 	.word	0x20004238
 80035ec:	0800bedb 	.word	0x0800bedb
 80035f0:	0800bf34 	.word	0x0800bf34
 80035f4:	0800bf6f 	.word	0x0800bf6f
 80035f8:	0800bf9b 	.word	0x0800bf9b
 80035fc:	0800bfbf 	.word	0x0800bfbf
 8003600:	0800bff0 	.word	0x0800bff0
 8003604:	0800c005 	.word	0x0800c005
 8003608:	0800c03f 	.word	0x0800c03f
 800360c:	0800c05f 	.word	0x0800c05f
 8003610:	0800c083 	.word	0x0800c083
 8003614:	200042c8 	.word	0x200042c8
 8003618:	2000343c 	.word	0x2000343c
 800361c:	0800bd23 	.word	0x0800bd23
 8003620:	0800bd27 	.word	0x0800bd27
 8003624:	0800bd3a 	.word	0x0800bd3a
 8003628:	0800bd5e 	.word	0x0800bd5e
 800362c:	0800beba 	.word	0x0800beba
 8003630:	20003440 	.word	0x20003440
 8003634:	0800c0a1 	.word	0x0800c0a1
      if (r == CONS_EVT_PAUSE) {
 8003638:	2c04      	cmp	r4, #4
 800363a:	f47f ace3 	bne.w	8003004 <aiSystemPerformanceProcess+0x1c>
        LC_PRINT("\r\n");
 800363e:	4808      	ldr	r0, [pc, #32]	@ (8003660 <aiSystemPerformanceProcess+0x678>)
 8003640:	f000 fa48 	bl	8003ad4 <lc_print>
        LC_PRINT("Press any key to continue..\r\n");
 8003644:	4807      	ldr	r0, [pc, #28]	@ (8003664 <aiSystemPerformanceProcess+0x67c>)
 8003646:	f000 fa45 	bl	8003ad4 <lc_print>
        while ((r = aiTestConsole()) == CONS_EVT_TIMEOUT) {
 800364a:	f7ff fa99 	bl	8002b80 <aiTestConsole>
 800364e:	2800      	cmp	r0, #0
 8003650:	f47f af2e 	bne.w	80034b0 <aiSystemPerformanceProcess+0x4c8>
          port_hal_delay(1000);
 8003654:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003658:	f7fd fe5e 	bl	8001318 <HAL_Delay>
 800365c:	e7f5      	b.n	800364a <aiSystemPerformanceProcess+0x662>
 800365e:	bf00      	nop
 8003660:	0800bd2b 	.word	0x0800bd2b
 8003664:	0800c083 	.word	0x0800c083

08003668 <_aiPrintDataInfo>:
    );
}


static void _aiPrintDataInfo(const int idx, const ai_buffer *buffer)
{
 8003668:	b570      	push	{r4, r5, r6, lr}
  const ai_buffer_format fmt = buffer->format;
  LC_PRINT("  [%d]  @0x%X/%d\r\n",
 800366a:	e9d1 6500 	ldrd	r6, r5, [r1]
{
 800366e:	4604      	mov	r4, r0
 8003670:	4608      	mov	r0, r1
  LC_PRINT("  [%d]  @0x%X/%d\r\n",
 8003672:	2101      	movs	r1, #1
 8003674:	f001 f8e8 	bl	8004848 <ai_buffer_get_size>
 8003678:	4631      	mov	r1, r6
 800367a:	f001 f919 	bl	80048b0 <ai_buffer_get_byte_size>
 800367e:	462a      	mov	r2, r5
 8003680:	4603      	mov	r3, r0
 8003682:	4621      	mov	r1, r4
 8003684:	4802      	ldr	r0, [pc, #8]	@ (8003690 <_aiPrintDataInfo+0x28>)
      idx,
      (int)buffer->data,
      (int)AI_BUFFER_BYTE_SIZE(AI_BUFFER_SIZE(buffer), fmt)
  );
}
 8003686:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  LC_PRINT("  [%d]  @0x%X/%d\r\n",
 800368a:	f000 ba23 	b.w	8003ad4 <lc_print>
 800368e:	bf00      	nop
 8003690:	0800c0d0 	.word	0x0800c0d0

08003694 <aiPlatformVersion>:
{
 8003694:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  const ai_platform_version rt_ver = ai_platform_runtime_get_version();
 8003696:	f001 fa69 	bl	8004b6c <ai_platform_runtime_get_version>
  LC_PRINT("\r\nAI platform (API %d.%d.%d - RUNTIME %d.%d.%d)\r\n",
 800369a:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800369e:	9302      	str	r3, [sp, #8]
 80036a0:	2201      	movs	r2, #1
 80036a2:	f3c0 2307 	ubfx	r3, r0, #8, #8
 80036a6:	b2c0      	uxtb	r0, r0
 80036a8:	9301      	str	r3, [sp, #4]
 80036aa:	9000      	str	r0, [sp, #0]
 80036ac:	2300      	movs	r3, #0
 80036ae:	4803      	ldr	r0, [pc, #12]	@ (80036bc <aiPlatformVersion+0x28>)
 80036b0:	4611      	mov	r1, r2
 80036b2:	f000 fa0f 	bl	8003ad4 <lc_print>
}
 80036b6:	b007      	add	sp, #28
 80036b8:	f85d fb04 	ldr.w	pc, [sp], #4
 80036bc:	0800c0e3 	.word	0x0800c0e3

080036c0 <aiLogErr>:
{
 80036c0:	b410      	push	{r4}
    LC_PRINT("E: AI error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 80036c2:	f3c0 2317 	ubfx	r3, r0, #8, #24
 80036c6:	b2c4      	uxtb	r4, r0
  if (fct)
 80036c8:	b129      	cbz	r1, 80036d6 <aiLogErr+0x16>
    LC_PRINT("E: AI error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 80036ca:	4622      	mov	r2, r4
 80036cc:	4805      	ldr	r0, [pc, #20]	@ (80036e4 <aiLogErr+0x24>)
}
 80036ce:	f85d 4b04 	ldr.w	r4, [sp], #4
    LC_PRINT("E: AI error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 80036d2:	f000 b9ff 	b.w	8003ad4 <lc_print>
    LC_PRINT("E: AI error - type=0x%02x code=0x%02x\r\n", err.type, err.code);
 80036d6:	4621      	mov	r1, r4
 80036d8:	4803      	ldr	r0, [pc, #12]	@ (80036e8 <aiLogErr+0x28>)
}
 80036da:	f85d 4b04 	ldr.w	r4, [sp], #4
    LC_PRINT("E: AI error - type=0x%02x code=0x%02x\r\n", err.type, err.code);
 80036de:	461a      	mov	r2, r3
 80036e0:	f000 b9f8 	b.w	8003ad4 <lc_print>
 80036e4:	0800c115 	.word	0x0800c115
 80036e8:	0800c142 	.word	0x0800c142

080036ec <aiPrintBufferInfo>:
{
 80036ec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LC_PRINT("(%d,%d,%d,",
 80036f0:	6981      	ldr	r1, [r0, #24]
  const ai_buffer_format fmt = buffer->format;
 80036f2:	6807      	ldr	r7, [r0, #0]
{
 80036f4:	4605      	mov	r5, r0
  LC_PRINT("(%d,%d,%d,",
 80036f6:	e9d1 3202 	ldrd	r3, r2, [r1, #8]
 80036fa:	4868      	ldr	r0, [pc, #416]	@ (800389c <aiPrintBufferInfo+0x1b0>)
 80036fc:	6809      	ldr	r1, [r1, #0]
 80036fe:	f000 f9e9 	bl	8003ad4 <lc_print>
  if (AI_BUFFER_SHAPE_SIZE(buffer) == 5)
 8003702:	696a      	ldr	r2, [r5, #20]
 8003704:	69a8      	ldr	r0, [r5, #24]
 8003706:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800370a:	f5b2 6fa0 	cmp.w	r2, #1280	@ 0x500
 800370e:	d119      	bne.n	8003744 <aiPrintBufferInfo+0x58>
    LC_PRINT("%d,%d)",
 8003710:	6842      	ldr	r2, [r0, #4]
 8003712:	6901      	ldr	r1, [r0, #16]
 8003714:	4862      	ldr	r0, [pc, #392]	@ (80038a0 <aiPrintBufferInfo+0x1b4>)
 8003716:	f000 f9dd 	bl	8003ad4 <lc_print>
  LC_PRINT("%d/", (int)AI_BUFFER_SIZE(buffer));
 800371a:	2101      	movs	r1, #1
 800371c:	4628      	mov	r0, r5
 800371e:	f001 f893 	bl	8004848 <ai_buffer_get_size>
    if (AI_BUFFER_FMT_GET_TYPE(fmt) == AI_BUFFER_FMT_TYPE_FLOAT)
 8003722:	f3c7 4643 	ubfx	r6, r7, #17, #4
  LC_PRINT("%d/", (int)AI_BUFFER_SIZE(buffer));
 8003726:	4601      	mov	r1, r0
 8003728:	485e      	ldr	r0, [pc, #376]	@ (80038a4 <aiPrintBufferInfo+0x1b8>)
 800372a:	f000 f9d3 	bl	8003ad4 <lc_print>
    if (AI_BUFFER_FMT_GET_TYPE(fmt) == AI_BUFFER_FMT_TYPE_FLOAT)
 800372e:	2e01      	cmp	r6, #1
      LC_PRINT("float%d", (int)AI_BUFFER_FMT_GET_BITS(fmt));
 8003730:	ea4f 19e7 	mov.w	r9, r7, asr #7
 8003734:	f3c7 14c6 	ubfx	r4, r7, #7, #7
    if (AI_BUFFER_FMT_GET_TYPE(fmt) == AI_BUFFER_FMT_TYPE_FLOAT)
 8003738:	d113      	bne.n	8003762 <aiPrintBufferInfo+0x76>
      LC_PRINT("float%d", (int)AI_BUFFER_FMT_GET_BITS(fmt));
 800373a:	485b      	ldr	r0, [pc, #364]	@ (80038a8 <aiPrintBufferInfo+0x1bc>)
 800373c:	4621      	mov	r1, r4
      LC_PRINT(" int32-%db", (int)AI_BUFFER_FMT_GET_BITS(fmt));
 800373e:	f000 f9c9 	bl	8003ad4 <lc_print>
 8003742:	e046      	b.n	80037d2 <aiPrintBufferInfo+0xe6>
  else if (AI_BUFFER_SHAPE_SIZE(buffer) == 6)
 8003744:	f5b2 6fc0 	cmp.w	r2, #1536	@ 0x600
    LC_PRINT("%d,%d,%d)",
 8003748:	6843      	ldr	r3, [r0, #4]
  else if (AI_BUFFER_SHAPE_SIZE(buffer) == 6)
 800374a:	d105      	bne.n	8003758 <aiPrintBufferInfo+0x6c>
    LC_PRINT("%d,%d,%d)",
 800374c:	e9d0 1204 	ldrd	r1, r2, [r0, #16]
 8003750:	4856      	ldr	r0, [pc, #344]	@ (80038ac <aiPrintBufferInfo+0x1c0>)
 8003752:	f000 f9bf 	bl	8003ad4 <lc_print>
 8003756:	e7e0      	b.n	800371a <aiPrintBufferInfo+0x2e>
    LC_PRINT("%d)", (int)AI_BUFFER_SHAPE_ELEM(buffer, AI_SHAPE_CHANNEL));
 8003758:	4855      	ldr	r0, [pc, #340]	@ (80038b0 <aiPrintBufferInfo+0x1c4>)
 800375a:	4619      	mov	r1, r3
 800375c:	f000 f9ba 	bl	8003ad4 <lc_print>
 8003760:	e7db      	b.n	800371a <aiPrintBufferInfo+0x2e>
    else if (AI_BUFFER_FMT_GET_TYPE(fmt) == AI_BUFFER_FMT_TYPE_BOOL) {
 8003762:	2e03      	cmp	r6, #3
 8003764:	d102      	bne.n	800376c <aiPrintBufferInfo+0x80>
      LC_PRINT("bool%d", (int)AI_BUFFER_FMT_GET_BITS(fmt));
 8003766:	4853      	ldr	r0, [pc, #332]	@ (80038b4 <aiPrintBufferInfo+0x1c8>)
 8003768:	4621      	mov	r1, r4
 800376a:	e7e8      	b.n	800373e <aiPrintBufferInfo+0x52>
      LC_PRINT("%s%d", AI_BUFFER_FMT_GET_SIGN(fmt)?"i":"u",
 800376c:	f8df 815c 	ldr.w	r8, [pc, #348]	@ 80038cc <aiPrintBufferInfo+0x1e0>
 8003770:	f417 0f00 	tst.w	r7, #8388608	@ 0x800000
 8003774:	f108 0102 	add.w	r1, r8, #2
 8003778:	4622      	mov	r2, r4
 800377a:	bf18      	it	ne
 800377c:	4641      	movne	r1, r8
 800377e:	f108 003b 	add.w	r0, r8, #59	@ 0x3b
 8003782:	f000 f9a7 	bl	8003ad4 <lc_print>
  if (AI_BUFFER_FMT_GET_TYPE(fmt) == AI_BUFFER_FMT_TYPE_Q) {
 8003786:	2e02      	cmp	r6, #2
 8003788:	d123      	bne.n	80037d2 <aiPrintBufferInfo+0xe6>
    if (AI_BUFFER_META_INFO_INTQ(buffer->meta_info)) {
 800378a:	68ab      	ldr	r3, [r5, #8]
 800378c:	2b00      	cmp	r3, #0
 800378e:	d068      	beq.n	8003862 <aiPrintBufferInfo+0x176>
 8003790:	681a      	ldr	r2, [r3, #0]
 8003792:	07d2      	lsls	r2, r2, #31
 8003794:	d565      	bpl.n	8003862 <aiPrintBufferInfo+0x176>
 8003796:	685b      	ldr	r3, [r3, #4]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d062      	beq.n	8003862 <aiPrintBufferInfo+0x176>
      ai_u16 s_ = AI_BUFFER_META_INFO_INTQ_GET_SIZE(buffer->meta_info);
 800379c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
      LC_PRINT(" %d:", s_);
 80037a0:	f108 0040 	add.w	r0, r8, #64	@ 0x40
      const int max_ = s_> 4?4:s_;
 80037a4:	f1b9 0f04 	cmp.w	r9, #4
      LC_PRINT(" %d:", s_);
 80037a8:	4649      	mov	r1, r9
      const int max_ = s_> 4?4:s_;
 80037aa:	46ca      	mov	sl, r9
 80037ac:	bf28      	it	cs
 80037ae:	f04f 0a04 	movcs.w	sl, #4
      LC_PRINT(" %d:", s_);
 80037b2:	f000 f98f 	bl	8003ad4 <lc_print>
      for (int idx=0; idx<max_; idx++) {
 80037b6:	2600      	movs	r6, #0
        ai_float scale = AI_BUFFER_META_INFO_INTQ_GET_SCALE(buffer->meta_info, idx);
 80037b8:	f04f 0b00 	mov.w	fp, #0
        LC_PRINT("(%f,%d),", (double)scale, zero_point);
 80037bc:	f108 0845 	add.w	r8, r8, #69	@ 0x45
      for (int idx=0; idx<max_; idx++) {
 80037c0:	4556      	cmp	r6, sl
 80037c2:	db18      	blt.n	80037f6 <aiPrintBufferInfo+0x10a>
      LC_PRINT((s_ > max_)?"..":"");
 80037c4:	4b3c      	ldr	r3, [pc, #240]	@ (80038b8 <aiPrintBufferInfo+0x1cc>)
 80037c6:	1ed8      	subs	r0, r3, #3
 80037c8:	45ca      	cmp	sl, r9
 80037ca:	bf28      	it	cs
 80037cc:	4618      	movcs	r0, r3
 80037ce:	f000 f981 	bl	8003ad4 <lc_print>
  if (buffer->data)
 80037d2:	686c      	ldr	r4, [r5, #4]
    LC_PRINT(" @0x%X/%d",
 80037d4:	2101      	movs	r1, #1
 80037d6:	4628      	mov	r0, r5
  if (buffer->data)
 80037d8:	2c00      	cmp	r4, #0
 80037da:	d053      	beq.n	8003884 <aiPrintBufferInfo+0x198>
    LC_PRINT(" @0x%X/%d",
 80037dc:	f001 f834 	bl	8004848 <ai_buffer_get_size>
 80037e0:	4639      	mov	r1, r7
 80037e2:	f001 f865 	bl	80048b0 <ai_buffer_get_byte_size>
 80037e6:	4602      	mov	r2, r0
 80037e8:	4834      	ldr	r0, [pc, #208]	@ (80038bc <aiPrintBufferInfo+0x1d0>)
 80037ea:	4621      	mov	r1, r4
}
 80037ec:	b003      	add	sp, #12
 80037ee:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    LC_PRINT(" @0x%X/%d",
 80037f2:	f000 b96f 	b.w	8003ad4 <lc_print>
        ai_float scale = AI_BUFFER_META_INFO_INTQ_GET_SCALE(buffer->meta_info, idx);
 80037f6:	68ab      	ldr	r3, [r5, #8]
 80037f8:	b35b      	cbz	r3, 8003852 <aiPrintBufferInfo+0x166>
 80037fa:	681c      	ldr	r4, [r3, #0]
 80037fc:	f014 0401 	ands.w	r4, r4, #1
 8003800:	d02a      	beq.n	8003858 <aiPrintBufferInfo+0x16c>
 8003802:	685a      	ldr	r2, [r3, #4]
 8003804:	b352      	cbz	r2, 800385c <aiPrintBufferInfo+0x170>
 8003806:	6853      	ldr	r3, [r2, #4]
 8003808:	b1d3      	cbz	r3, 8003840 <aiPrintBufferInfo+0x154>
 800380a:	8851      	ldrh	r1, [r2, #2]
 800380c:	42b1      	cmp	r1, r6
 800380e:	dd17      	ble.n	8003840 <aiPrintBufferInfo+0x154>
 8003810:	6819      	ldr	r1, [r3, #0]
 8003812:	eb01 0186 	add.w	r1, r1, r6, lsl #2
 8003816:	6808      	ldr	r0, [r1, #0]
        int zero_point = AI_BUFFER_META_INFO_INTQ_GET_ZEROPOINT(buffer->meta_info, idx);
 8003818:	8814      	ldrh	r4, [r2, #0]
 800381a:	f014 0402 	ands.w	r4, r4, #2
 800381e:	d011      	beq.n	8003844 <aiPrintBufferInfo+0x158>
 8003820:	b1c3      	cbz	r3, 8003854 <aiPrintBufferInfo+0x168>
 8003822:	8852      	ldrh	r2, [r2, #2]
 8003824:	42b2      	cmp	r2, r6
 8003826:	dd1a      	ble.n	800385e <aiPrintBufferInfo+0x172>
 8003828:	685b      	ldr	r3, [r3, #4]
 800382a:	5d9c      	ldrb	r4, [r3, r6]
        LC_PRINT("(%f,%d),", (double)scale, zero_point);
 800382c:	f7fc fe8c 	bl	8000548 <__aeabi_f2d>
 8003830:	9400      	str	r4, [sp, #0]
 8003832:	4602      	mov	r2, r0
 8003834:	460b      	mov	r3, r1
 8003836:	4640      	mov	r0, r8
 8003838:	f000 f94c 	bl	8003ad4 <lc_print>
      for (int idx=0; idx<max_; idx++) {
 800383c:	3601      	adds	r6, #1
 800383e:	e7bf      	b.n	80037c0 <aiPrintBufferInfo+0xd4>
        ai_float scale = AI_BUFFER_META_INFO_INTQ_GET_SCALE(buffer->meta_info, idx);
 8003840:	2000      	movs	r0, #0
 8003842:	e7e9      	b.n	8003818 <aiPrintBufferInfo+0x12c>
        int zero_point = AI_BUFFER_META_INFO_INTQ_GET_ZEROPOINT(buffer->meta_info, idx);
 8003844:	b133      	cbz	r3, 8003854 <aiPrintBufferInfo+0x168>
 8003846:	8852      	ldrh	r2, [r2, #2]
 8003848:	42b2      	cmp	r2, r6
 800384a:	ddef      	ble.n	800382c <aiPrintBufferInfo+0x140>
 800384c:	685b      	ldr	r3, [r3, #4]
 800384e:	579c      	ldrsb	r4, [r3, r6]
 8003850:	e7ec      	b.n	800382c <aiPrintBufferInfo+0x140>
        ai_float scale = AI_BUFFER_META_INFO_INTQ_GET_SCALE(buffer->meta_info, idx);
 8003852:	4658      	mov	r0, fp
        int zero_point = AI_BUFFER_META_INFO_INTQ_GET_ZEROPOINT(buffer->meta_info, idx);
 8003854:	461c      	mov	r4, r3
 8003856:	e7e9      	b.n	800382c <aiPrintBufferInfo+0x140>
        ai_float scale = AI_BUFFER_META_INFO_INTQ_GET_SCALE(buffer->meta_info, idx);
 8003858:	4658      	mov	r0, fp
 800385a:	e7e7      	b.n	800382c <aiPrintBufferInfo+0x140>
 800385c:	2000      	movs	r0, #0
        int zero_point = AI_BUFFER_META_INFO_INTQ_GET_ZEROPOINT(buffer->meta_info, idx);
 800385e:	2400      	movs	r4, #0
 8003860:	e7e4      	b.n	800382c <aiPrintBufferInfo+0x140>
    } else if (AI_BUFFER_FMT_GET_BITS(fmt) < 8) {
 8003862:	f019 0f78 	tst.w	r9, #120	@ 0x78
 8003866:	d102      	bne.n	800386e <aiPrintBufferInfo+0x182>
      LC_PRINT(" int32-%db", (int)AI_BUFFER_FMT_GET_BITS(fmt));
 8003868:	4815      	ldr	r0, [pc, #84]	@ (80038c0 <aiPrintBufferInfo+0x1d4>)
 800386a:	4621      	mov	r1, r4
 800386c:	e767      	b.n	800373e <aiPrintBufferInfo+0x52>
      LC_PRINT(" Q%d.%d",
 800386e:	f007 027f 	and.w	r2, r7, #127	@ 0x7f
 8003872:	3a40      	subs	r2, #64	@ 0x40
 8003874:	f3c7 51c0 	ubfx	r1, r7, #23, #1
 8003878:	4411      	add	r1, r2
 800387a:	4812      	ldr	r0, [pc, #72]	@ (80038c4 <aiPrintBufferInfo+0x1d8>)
 800387c:	1a61      	subs	r1, r4, r1
 800387e:	f000 f929 	bl	8003ad4 <lc_print>
 8003882:	e7a6      	b.n	80037d2 <aiPrintBufferInfo+0xe6>
    LC_PRINT(" (User Domain)/%d",
 8003884:	f000 ffe0 	bl	8004848 <ai_buffer_get_size>
 8003888:	4639      	mov	r1, r7
 800388a:	f001 f811 	bl	80048b0 <ai_buffer_get_byte_size>
 800388e:	4601      	mov	r1, r0
 8003890:	480d      	ldr	r0, [pc, #52]	@ (80038c8 <aiPrintBufferInfo+0x1dc>)
}
 8003892:	b003      	add	sp, #12
 8003894:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    LC_PRINT(" (User Domain)/%d",
 8003898:	f000 b91c 	b.w	8003ad4 <lc_print>
 800389c:	0800c172 	.word	0x0800c172
 80038a0:	0800c17d 	.word	0x0800c17d
 80038a4:	0800c192 	.word	0x0800c192
 80038a8:	0800c196 	.word	0x0800c196
 80038ac:	0800c184 	.word	0x0800c184
 80038b0:	0800c18e 	.word	0x0800c18e
 80038b4:	0800c19e 	.word	0x0800c19e
 80038b8:	0800c171 	.word	0x0800c171
 80038bc:	0800c1cb 	.word	0x0800c1cb
 80038c0:	0800c1b8 	.word	0x0800c1b8
 80038c4:	0800c1c3 	.word	0x0800c1c3
 80038c8:	0800c1d5 	.word	0x0800c1d5
 80038cc:	0800c16a 	.word	0x0800c16a

080038d0 <aiPrintNetworkInfo>:


void aiPrintNetworkInfo(const ai_network_report* report)
{
 80038d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80038d4:	4604      	mov	r4, r0
  LC_PRINT("Network informations...\r\n");
 80038d6:	4842      	ldr	r0, [pc, #264]	@ (80039e0 <aiPrintNetworkInfo+0x110>)
 80038d8:	f000 f8fc 	bl	8003ad4 <lc_print>
  LC_PRINT(" model name         : %s\r\n", report->model_name);
 80038dc:	6821      	ldr	r1, [r4, #0]
 80038de:	4841      	ldr	r0, [pc, #260]	@ (80039e4 <aiPrintNetworkInfo+0x114>)
 80038e0:	f000 f8f8 	bl	8003ad4 <lc_print>
  LC_PRINT(" model signature    : %s\r\n", report->model_signature);
 80038e4:	6861      	ldr	r1, [r4, #4]
 80038e6:	4840      	ldr	r0, [pc, #256]	@ (80039e8 <aiPrintNetworkInfo+0x118>)
 80038e8:	f000 f8f4 	bl	8003ad4 <lc_print>
  LC_PRINT(" model datetime     : %s\r\n", report->model_datetime);
 80038ec:	68a1      	ldr	r1, [r4, #8]
 80038ee:	483f      	ldr	r0, [pc, #252]	@ (80039ec <aiPrintNetworkInfo+0x11c>)
 80038f0:	f000 f8f0 	bl	8003ad4 <lc_print>
  LC_PRINT(" compile datetime   : %s\r\n", report->compile_datetime);
 80038f4:	68e1      	ldr	r1, [r4, #12]
 80038f6:	483e      	ldr	r0, [pc, #248]	@ (80039f0 <aiPrintNetworkInfo+0x120>)
 80038f8:	f000 f8ec 	bl	8003ad4 <lc_print>

  if (report->tool_revision[0])
 80038fc:	69a1      	ldr	r1, [r4, #24]
 80038fe:	780b      	ldrb	r3, [r1, #0]
 8003900:	b113      	cbz	r3, 8003908 <aiPrintNetworkInfo+0x38>
    LC_PRINT(" Tool revision      : %s\r\n", (report->tool_revision[0])?report->tool_revision:"");
 8003902:	483c      	ldr	r0, [pc, #240]	@ (80039f4 <aiPrintNetworkInfo+0x124>)
 8003904:	f000 f8e6 	bl	8003ad4 <lc_print>
  LC_PRINT(" tools version      : %d.%d.%d\r\n",
 8003908:	7fa3      	ldrb	r3, [r4, #30]
 800390a:	7f62      	ldrb	r2, [r4, #29]
 800390c:	7f21      	ldrb	r1, [r4, #28]
 800390e:	483a      	ldr	r0, [pc, #232]	@ (80039f8 <aiPrintNetworkInfo+0x128>)
 8003910:	f000 f8e0 	bl	8003ad4 <lc_print>
      report->tool_version.major,
      report->tool_version.minor,
      report->tool_version.micro);
  LC_PRINT(" complexity         : %s MACC\r\n", uint64ToDecimal(report->n_macc));
 8003914:	e9d4 010c 	ldrd	r0, r1, [r4, #48]	@ 0x30
 8003918:	f000 f8c4 	bl	8003aa4 <uint64ToDecimal>
 800391c:	4601      	mov	r1, r0
 800391e:	4837      	ldr	r0, [pc, #220]	@ (80039fc <aiPrintNetworkInfo+0x12c>)
 8003920:	f000 f8d8 	bl	8003ad4 <lc_print>
  LC_PRINT(" c-nodes            : %d\r\n", (int)report->n_nodes);
 8003924:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
 8003926:	4836      	ldr	r0, [pc, #216]	@ (8003a00 <aiPrintNetworkInfo+0x130>)
 8003928:	f000 f8d4 	bl	8003ad4 <lc_print>

  LC_PRINT(" map_activations    : %d\r\n", report->map_activations.size);
 800392c:	f8b4 1052 	ldrh.w	r1, [r4, #82]	@ 0x52
 8003930:	4834      	ldr	r0, [pc, #208]	@ (8003a04 <aiPrintNetworkInfo+0x134>)
 8003932:	f000 f8cf 	bl	8003ad4 <lc_print>
  for (int idx=0; idx<report->map_activations.size;idx++) {
 8003936:	2500      	movs	r5, #0
      const ai_buffer *buffer = &report->map_activations.buffer[idx];
 8003938:	261c      	movs	r6, #28
  for (int idx=0; idx<report->map_activations.size;idx++) {
 800393a:	f8b4 3052 	ldrh.w	r3, [r4, #82]	@ 0x52
 800393e:	42ab      	cmp	r3, r5
 8003940:	dc21      	bgt.n	8003986 <aiPrintNetworkInfo+0xb6>
      _aiPrintDataInfo(idx, buffer);
  }

  LC_PRINT(" map_weights        : %d\r\n", report->map_weights.size);
 8003942:	f8b4 104a 	ldrh.w	r1, [r4, #74]	@ 0x4a
 8003946:	4830      	ldr	r0, [pc, #192]	@ (8003a08 <aiPrintNetworkInfo+0x138>)
 8003948:	f000 f8c4 	bl	8003ad4 <lc_print>
  for (int idx=0; idx<report->map_weights.size;idx++) {
 800394c:	2500      	movs	r5, #0
      const ai_buffer *buffer = &report->map_weights.buffer[idx];
 800394e:	261c      	movs	r6, #28
  for (int idx=0; idx<report->map_weights.size;idx++) {
 8003950:	f8b4 304a 	ldrh.w	r3, [r4, #74]	@ 0x4a
 8003954:	42ab      	cmp	r3, r5
 8003956:	dc1e      	bgt.n	8003996 <aiPrintNetworkInfo+0xc6>
      _aiPrintDataInfo(idx, buffer);
  }

  LC_PRINT(" n_inputs/n_outputs : %u/%u\r\n", report->n_inputs,
 8003958:	8f62      	ldrh	r2, [r4, #58]	@ 0x3a
 800395a:	8f21      	ldrh	r1, [r4, #56]	@ 0x38
 800395c:	482b      	ldr	r0, [pc, #172]	@ (8003a0c <aiPrintNetworkInfo+0x13c>)
          report->n_outputs);

  for (int i=0; i<report->n_inputs; i++) {
    LC_PRINT("  I[%d] ", i);
 800395e:	4e2c      	ldr	r6, [pc, #176]	@ (8003a10 <aiPrintNetworkInfo+0x140>)
  LC_PRINT(" n_inputs/n_outputs : %u/%u\r\n", report->n_inputs,
 8003960:	f000 f8b8 	bl	8003ad4 <lc_print>
  for (int i=0; i<report->n_inputs; i++) {
 8003964:	2500      	movs	r5, #0
    aiPrintBufferInfo(&report->inputs[i]);
 8003966:	271c      	movs	r7, #28
    LC_PRINT("\r\n");
 8003968:	f106 0809 	add.w	r8, r6, #9
  for (int i=0; i<report->n_inputs; i++) {
 800396c:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 800396e:	42ab      	cmp	r3, r5
 8003970:	dc19      	bgt.n	80039a6 <aiPrintNetworkInfo+0xd6>
  }

  for (int i=0; i<report->n_outputs; i++) {
    LC_PRINT("  O[%d] ", i);
 8003972:	4e28      	ldr	r6, [pc, #160]	@ (8003a14 <aiPrintNetworkInfo+0x144>)
  for (int i=0; i<report->n_outputs; i++) {
 8003974:	2500      	movs	r5, #0
    aiPrintBufferInfo(&report->outputs[i]);
 8003976:	271c      	movs	r7, #28
    LC_PRINT("\r\n");
 8003978:	f1a6 0803 	sub.w	r8, r6, #3
  for (int i=0; i<report->n_outputs; i++) {
 800397c:	8f63      	ldrh	r3, [r4, #58]	@ 0x3a
 800397e:	42ab      	cmp	r3, r5
 8003980:	dc1f      	bgt.n	80039c2 <aiPrintNetworkInfo+0xf2>
  }
}
 8003982:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      const ai_buffer *buffer = &report->map_activations.buffer[idx];
 8003986:	6d61      	ldr	r1, [r4, #84]	@ 0x54
      _aiPrintDataInfo(idx, buffer);
 8003988:	4628      	mov	r0, r5
 800398a:	fb06 1105 	mla	r1, r6, r5, r1
 800398e:	f7ff fe6b 	bl	8003668 <_aiPrintDataInfo>
  for (int idx=0; idx<report->map_activations.size;idx++) {
 8003992:	3501      	adds	r5, #1
 8003994:	e7d1      	b.n	800393a <aiPrintNetworkInfo+0x6a>
      const ai_buffer *buffer = &report->map_weights.buffer[idx];
 8003996:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
      _aiPrintDataInfo(idx, buffer);
 8003998:	4628      	mov	r0, r5
 800399a:	fb06 1105 	mla	r1, r6, r5, r1
 800399e:	f7ff fe63 	bl	8003668 <_aiPrintDataInfo>
  for (int idx=0; idx<report->map_weights.size;idx++) {
 80039a2:	3501      	adds	r5, #1
 80039a4:	e7d4      	b.n	8003950 <aiPrintNetworkInfo+0x80>
    LC_PRINT("  I[%d] ", i);
 80039a6:	4629      	mov	r1, r5
 80039a8:	4630      	mov	r0, r6
 80039aa:	f000 f893 	bl	8003ad4 <lc_print>
    aiPrintBufferInfo(&report->inputs[i]);
 80039ae:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 80039b0:	fb07 0005 	mla	r0, r7, r5, r0
 80039b4:	f7ff fe9a 	bl	80036ec <aiPrintBufferInfo>
    LC_PRINT("\r\n");
 80039b8:	4640      	mov	r0, r8
 80039ba:	f000 f88b 	bl	8003ad4 <lc_print>
  for (int i=0; i<report->n_inputs; i++) {
 80039be:	3501      	adds	r5, #1
 80039c0:	e7d4      	b.n	800396c <aiPrintNetworkInfo+0x9c>
    LC_PRINT("  O[%d] ", i);
 80039c2:	4629      	mov	r1, r5
 80039c4:	4630      	mov	r0, r6
 80039c6:	f000 f885 	bl	8003ad4 <lc_print>
    aiPrintBufferInfo(&report->outputs[i]);
 80039ca:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 80039cc:	fb07 0005 	mla	r0, r7, r5, r0
 80039d0:	f7ff fe8c 	bl	80036ec <aiPrintBufferInfo>
    LC_PRINT("\r\n");
 80039d4:	4640      	mov	r0, r8
 80039d6:	f000 f87d 	bl	8003ad4 <lc_print>
  for (int i=0; i<report->n_outputs; i++) {
 80039da:	3501      	adds	r5, #1
 80039dc:	e7ce      	b.n	800397c <aiPrintNetworkInfo+0xac>
 80039de:	bf00      	nop
 80039e0:	0800c1e7 	.word	0x0800c1e7
 80039e4:	0800c201 	.word	0x0800c201
 80039e8:	0800c21c 	.word	0x0800c21c
 80039ec:	0800c237 	.word	0x0800c237
 80039f0:	0800c252 	.word	0x0800c252
 80039f4:	0800c26d 	.word	0x0800c26d
 80039f8:	0800c288 	.word	0x0800c288
 80039fc:	0800c2a9 	.word	0x0800c2a9
 8003a00:	0800c2c9 	.word	0x0800c2c9
 8003a04:	0800c2e4 	.word	0x0800c2e4
 8003a08:	0800c2ff 	.word	0x0800c2ff
 8003a0c:	0800c31a 	.word	0x0800c31a
 8003a10:	0800c338 	.word	0x0800c338
 8003a14:	0800c344 	.word	0x0800c344

08003a18 <_put_c_driver>:
#if !defined(USE_PRINTF_FROM_TOOL) || USE_PRINTF_FROM_TOOL != 1

#include "lc_print.h"

static void _put_c_driver(void *user, const char c)
{
 8003a18:	b507      	push	{r0, r1, r2, lr}
#if defined(HAS_DEDICATED_PRINT_PORT) && HAS_DEDICATED_PRINT_PORT == 1
  port_io_dedicated_putc(c);
#else
  if (_ioWriteAllowed)
 8003a1a:	4b08      	ldr	r3, [pc, #32]	@ (8003a3c <_put_c_driver+0x24>)
{
 8003a1c:	f88d 1007 	strb.w	r1, [sp, #7]
  if (_ioWriteAllowed)
 8003a20:	781b      	ldrb	r3, [r3, #0]
 8003a22:	b13b      	cbz	r3, 8003a34 <_put_c_driver+0x1c>

__STATIC_INLINE bool port_io_write(uint8_t *buff, int count)
{
  HAL_StatusTypeDef status;

  status = HAL_UART_Transmit(&UartHandle, buff, count, HAL_MAX_DELAY);
 8003a24:	4806      	ldr	r0, [pc, #24]	@ (8003a40 <_put_c_driver+0x28>)
 8003a26:	f04f 33ff 	mov.w	r3, #4294967295
 8003a2a:	2201      	movs	r2, #1
 8003a2c:	f10d 0107 	add.w	r1, sp, #7
 8003a30:	f7fe feca 	bl	80027c8 <HAL_UART_Transmit>
  }
#ifdef SWO_OUTPUT
  ITM_SendChar(c);
#endif 
#endif
}
 8003a34:	b003      	add	sp, #12
 8003a36:	f85d fb04 	ldr.w	pc, [sp], #4
 8003a3a:	bf00      	nop
 8003a3c:	20003441 	.word	0x20003441
 8003a40:	2000417c 	.word	0x2000417c

08003a44 <ioRawGetUint8>:
 {
 8003a44:	b508      	push	{r3, lr}
 8003a46:	460b      	mov	r3, r1
  if (!c)
 8003a48:	4601      	mov	r1, r0
 8003a4a:	b120      	cbz	r0, 8003a56 <ioRawGetUint8+0x12>
  status = HAL_UART_Receive(&UartHandle, (uint8_t *)c, 1, timeout);
 8003a4c:	4804      	ldr	r0, [pc, #16]	@ (8003a60 <ioRawGetUint8+0x1c>)
 8003a4e:	2201      	movs	r2, #1
 8003a50:	f7fe ff0b 	bl	800286a <HAL_UART_Receive>
  if (status == HAL_TIMEOUT)
 8003a54:	b110      	cbz	r0, 8003a5c <ioRawGetUint8+0x18>
   return port_io_get(c, timeout) == true?1:-1;
 8003a56:	f04f 30ff 	mov.w	r0, #4294967295
 }
 8003a5a:	bd08      	pop	{r3, pc}
   return port_io_get(c, timeout) == true?1:-1;
 8003a5c:	2001      	movs	r0, #1
 8003a5e:	e7fc      	b.n	8003a5a <ioRawGetUint8+0x16>
 8003a60:	2000417c 	.word	0x2000417c

08003a64 <_write>:
{
 8003a64:	b510      	push	{r4, lr}
  if ((count < 0) && (fd != STDOUT_FILENO) && (fd != STDERR_FILENO)) {
 8003a66:	1e14      	subs	r4, r2, #0
 8003a68:	da0a      	bge.n	8003a80 <_write+0x1c>
 8003a6a:	3801      	subs	r0, #1
 8003a6c:	2801      	cmp	r0, #1
 8003a6e:	d907      	bls.n	8003a80 <_write+0x1c>
    errno = EBADF;
 8003a70:	f005 fef2 	bl	8009858 <__errno>
 8003a74:	2309      	movs	r3, #9
 8003a76:	6003      	str	r3, [r0, #0]
    return -1;
 8003a78:	f04f 34ff 	mov.w	r4, #4294967295
}
 8003a7c:	4620      	mov	r0, r4
 8003a7e:	bd10      	pop	{r4, pc}
  if (_ioWriteAllowed)
 8003a80:	4b06      	ldr	r3, [pc, #24]	@ (8003a9c <_write+0x38>)
 8003a82:	781b      	ldrb	r3, [r3, #0]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d0f9      	beq.n	8003a7c <_write+0x18>
  status = HAL_UART_Transmit(&UartHandle, buff, count, HAL_MAX_DELAY);
 8003a88:	b2a2      	uxth	r2, r4
 8003a8a:	4805      	ldr	r0, [pc, #20]	@ (8003aa0 <_write+0x3c>)
 8003a8c:	f04f 33ff 	mov.w	r3, #4294967295
 8003a90:	f7fe fe9a 	bl	80027c8 <HAL_UART_Transmit>
  return (status ? count : 0);
 8003a94:	2800      	cmp	r0, #0
 8003a96:	bf18      	it	ne
 8003a98:	2400      	movne	r4, #0
 8003a9a:	e7ef      	b.n	8003a7c <_write+0x18>
 8003a9c:	20003441 	.word	0x20003441
 8003aa0:	2000417c 	.word	0x2000417c

08003aa4 <uint64ToDecimal>:
{ /* see https://www.eevblog.com/forum/microcontrollers/printf-uint64_t-with-arm-gcc/ */
 8003aa4:	b510      	push	{r4, lr}
  *(--p) = '\0';
 8003aa6:	4c0a      	ldr	r4, [pc, #40]	@ (8003ad0 <uint64ToDecimal+0x2c>)
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	f804 3f14 	strb.w	r3, [r4, #20]!
  for (bool first = true; v || first; first = false) {
 8003aae:	2301      	movs	r3, #1
 8003ab0:	ea50 0201 	orrs.w	r2, r0, r1
 8003ab4:	d102      	bne.n	8003abc <uint64ToDecimal+0x18>
 8003ab6:	b90b      	cbnz	r3, 8003abc <uint64ToDecimal+0x18>
}
 8003ab8:	4620      	mov	r0, r4
 8003aba:	bd10      	pop	{r4, pc}
    const uint32_t digit = v % 10;
 8003abc:	220a      	movs	r2, #10
 8003abe:	2300      	movs	r3, #0
 8003ac0:	f7fd f872 	bl	8000ba8 <__aeabi_uldivmod>
    const char c = '0' + digit;
 8003ac4:	3230      	adds	r2, #48	@ 0x30
    *(--p) = c;
 8003ac6:	f804 2d01 	strb.w	r2, [r4, #-1]!
  for (bool first = true; v || first; first = false) {
 8003aca:	2300      	movs	r3, #0
 8003acc:	e7f0      	b.n	8003ab0 <uint64ToDecimal+0xc>
 8003ace:	bf00      	nop
 8003ad0:	20004314 	.word	0x20004314

08003ad4 <lc_print>:

void lc_print(const char* fmt, ... )
{
 8003ad4:	b40f      	push	{r0, r1, r2, r3}
 8003ad6:	b507      	push	{r0, r1, r2, lr}
 8003ad8:	ab04      	add	r3, sp, #16
  va_list ap;
  va_start(ap, fmt);
  vlc_print(&_put_c_driver, NULL, fmt, ap);
 8003ada:	2100      	movs	r1, #0
{
 8003adc:	f853 2b04 	ldr.w	r2, [r3], #4
  vlc_print(&_put_c_driver, NULL, fmt, ap);
 8003ae0:	4804      	ldr	r0, [pc, #16]	@ (8003af4 <lc_print+0x20>)
  va_start(ap, fmt);
 8003ae2:	9301      	str	r3, [sp, #4]
  vlc_print(&_put_c_driver, NULL, fmt, ap);
 8003ae4:	f000 fb1c 	bl	8004120 <vlc_print>
  va_end(ap);
}
 8003ae8:	b003      	add	sp, #12
 8003aea:	f85d eb04 	ldr.w	lr, [sp], #4
 8003aee:	b004      	add	sp, #16
 8003af0:	4770      	bx	lr
 8003af2:	bf00      	nop
 8003af4:	08003a19 	.word	0x08003a19

08003af8 <__wrap_malloc>:

void* __real_malloc(size_t bytes);
void __real_free(void *ptr);

void* __wrap_malloc(size_t bytes)
{
 8003af8:	b538      	push	{r3, r4, r5, lr}
  uint8_t *ptr;

  io_malloc.cfg |= 1 << 1;
 8003afa:	4d11      	ldr	r5, [pc, #68]	@ (8003b40 <__wrap_malloc+0x48>)

  /* ensure alignment for magic number */
  bytes = (bytes + 3) & ~3;
 8003afc:	1cc4      	adds	r4, r0, #3
  io_malloc.cfg |= 1 << 1;
 8003afe:	682b      	ldr	r3, [r5, #0]
  bytes = (bytes + 3) & ~3;
 8003b00:	f024 0403 	bic.w	r4, r4, #3
  io_malloc.cfg |= 1 << 1;
 8003b04:	f043 0302 	orr.w	r3, r3, #2

  /* add 2x32-bit for size and magic  number */
  ptr = (uint8_t*)__real_malloc(bytes + 8);
 8003b08:	f104 0008 	add.w	r0, r4, #8
  io_malloc.cfg |= 1 << 1;
 8003b0c:	602b      	str	r3, [r5, #0]
  ptr = (uint8_t*)__real_malloc(bytes + 8);
 8003b0e:	f004 fe45 	bl	800879c <malloc>

  /* remember size */
  if (ptr) {
 8003b12:	b1a0      	cbz	r0, 8003b3e <__wrap_malloc+0x46>
    *((uint32_t*)ptr) = bytes;
    *((uint32_t*)(ptr + 4 + bytes)) = MAGIC_MALLOC_NUMBER;
 8003b14:	1903      	adds	r3, r0, r4
 8003b16:	4a0b      	ldr	r2, [pc, #44]	@ (8003b44 <__wrap_malloc+0x4c>)
    *((uint32_t*)ptr) = bytes;
 8003b18:	6004      	str	r4, [r0, #0]
    *((uint32_t*)(ptr + 4 + bytes)) = MAGIC_MALLOC_NUMBER;
 8003b1a:	605a      	str	r2, [r3, #4]
  }

  if ((ptr) && (io_malloc.cfg & 1UL)) {
 8003b1c:	682b      	ldr	r3, [r5, #0]
 8003b1e:	07db      	lsls	r3, r3, #31
 8003b20:	d50c      	bpl.n	8003b3c <__wrap_malloc+0x44>
    io_malloc.alloc_req++;
 8003b22:	68eb      	ldr	r3, [r5, #12]
 8003b24:	3301      	adds	r3, #1
 8003b26:	60eb      	str	r3, [r5, #12]
    io_malloc.alloc += bytes;
 8003b28:	686b      	ldr	r3, [r5, #4]
 8003b2a:	4423      	add	r3, r4
 8003b2c:	606b      	str	r3, [r5, #4]

    io_malloc.used += bytes;
 8003b2e:	69ab      	ldr	r3, [r5, #24]
 8003b30:	441c      	add	r4, r3

    if (io_malloc.used > io_malloc.max) {
 8003b32:	696b      	ldr	r3, [r5, #20]
    io_malloc.used += bytes;
 8003b34:	61ac      	str	r4, [r5, #24]
    if (io_malloc.used > io_malloc.max) {
 8003b36:	429c      	cmp	r4, r3
      io_malloc.max = io_malloc.used;
 8003b38:	bf88      	it	hi
 8003b3a:	616c      	strhi	r4, [r5, #20]

    if (io_malloc.a_idx >= _IO_MALLOC_TRACK_MODE)
      io_malloc.a_idx = 0;
#endif
  }
  return ptr?(ptr + 4):NULL;
 8003b3c:	3004      	adds	r0, #4
}
 8003b3e:	bd38      	pop	{r3, r4, r5, pc}
 8003b40:	200042f8 	.word	0x200042f8
 8003b44:	efdcba98 	.word	0xefdcba98

08003b48 <__wrap_free>:
void __wrap_free(void *ptr)
{
  uint8_t* p;
  uint32_t bytes;

  io_malloc.cfg |= 1 << 2;
 8003b48:	4b11      	ldr	r3, [pc, #68]	@ (8003b90 <__wrap_free+0x48>)
 8003b4a:	681a      	ldr	r2, [r3, #0]
 8003b4c:	f042 0204 	orr.w	r2, r2, #4
{
 8003b50:	b430      	push	{r4, r5}
  io_malloc.cfg |= 1 << 2;
 8003b52:	601a      	str	r2, [r3, #0]

  if (!ptr)
 8003b54:	4602      	mov	r2, r0
 8003b56:	b1c0      	cbz	r0, 8003b8a <__wrap_free+0x42>
    return;

  p = (uint8_t*)ptr - 4;
  bytes = *((uint32_t*)p);
 8003b58:	f852 1c04 	ldr.w	r1, [r2, #-4]

  if (*((uint32_t*)(p + 4 + bytes)) == MAGIC_MALLOC_NUMBER) {
 8003b5c:	4c0d      	ldr	r4, [pc, #52]	@ (8003b94 <__wrap_free+0x4c>)
 8003b5e:	5855      	ldr	r5, [r2, r1]
 8003b60:	42a5      	cmp	r5, r4
    *((uint32_t*)(p + 4 + bytes)) = 0;
 8003b62:	bf04      	itt	eq
 8003b64:	2400      	moveq	r4, #0
 8003b66:	5054      	streq	r4, [r2, r1]
  }

  if (io_malloc.cfg & 1UL) {
 8003b68:	681a      	ldr	r2, [r3, #0]
 8003b6a:	07d2      	lsls	r2, r2, #31
  p = (uint8_t*)ptr - 4;
 8003b6c:	f1a0 0004 	sub.w	r0, r0, #4
  if (io_malloc.cfg & 1UL) {
 8003b70:	d508      	bpl.n	8003b84 <__wrap_free+0x3c>
    io_malloc.free_req++;
 8003b72:	691a      	ldr	r2, [r3, #16]
 8003b74:	3201      	adds	r2, #1
 8003b76:	611a      	str	r2, [r3, #16]
    io_malloc.free += bytes;
 8003b78:	689a      	ldr	r2, [r3, #8]
 8003b7a:	440a      	add	r2, r1
 8003b7c:	609a      	str	r2, [r3, #8]
    io_malloc.used -= bytes;
 8003b7e:	699a      	ldr	r2, [r3, #24]
 8003b80:	1a52      	subs	r2, r2, r1
 8003b82:	619a      	str	r2, [r3, #24]
    if (io_malloc.f_idx >= _IO_MALLOC_TRACK_MODE)
      io_malloc.f_idx = 0;
#endif
  }
  __real_free(p);
}
 8003b84:	bc30      	pop	{r4, r5}
  __real_free(p);
 8003b86:	f004 be11 	b.w	80087ac <free>
}
 8003b8a:	bc30      	pop	{r4, r5}
 8003b8c:	4770      	bx	lr
 8003b8e:	bf00      	nop
 8003b90:	200042f8 	.word	0x200042f8
 8003b94:	efdcba98 	.word	0xefdcba98

08003b98 <stackMonInit>:
#endif

struct io_stack io_stack;

void stackMonInit(uint32_t ctrl, uint32_t cstack, uint32_t msize)
{
 8003b98:	b538      	push	{r3, r4, r5, lr}
  memset(&io_stack, 0, sizeof(struct io_stack));
 8003b9a:	4b12      	ldr	r3, [pc, #72]	@ (8003be4 <stackMonInit+0x4c>)
 8003b9c:	2500      	movs	r5, #0

  /* Reading ARM Core registers */
  io_stack.ctrl = ctrl;
 8003b9e:	1f1c      	subs	r4, r3, #4
  memset(&io_stack, 0, sizeof(struct io_stack));
 8003ba0:	609d      	str	r5, [r3, #8]
 8003ba2:	e9c3 5500 	strd	r5, r5, [r3]
  io_stack.ctrl = ctrl;
 8003ba6:	f843 0c04 	str.w	r0, [r3, #-4]
  io_stack.cstack = cstack;

#if defined(_IS_GCC_COMPILER) && _IS_GCC_COMPILER
  io_stack.estack = (uint32_t)_estack;
 8003baa:	4b0f      	ldr	r3, [pc, #60]	@ (8003be8 <stackMonInit+0x50>)
 8003bac:	6123      	str	r3, [r4, #16]
  io_stack.bstack = io_stack.estack - msize;
 8003bae:	1a9b      	subs	r3, r3, r2
 8003bb0:	61e3      	str	r3, [r4, #28]
#elif defined(_IS_HTC_COMPILER) && _IS_HTC_COMPILER
  (void)msize;
#endif

  /* Check that MSP is the active stack */
  if (io_stack.ctrl & CONTROL_SPSEL_Msk) {
 8003bb2:	0783      	lsls	r3, r0, #30
  io_stack.mstack_size = msize;
 8003bb4:	6162      	str	r2, [r4, #20]
  io_stack.cstack = cstack;
 8003bb6:	61a1      	str	r1, [r4, #24]
  if (io_stack.ctrl & CONTROL_SPSEL_Msk) {
 8003bb8:	d511      	bpl.n	8003bde <stackMonInit+0x46>
    LC_PRINT("E: MSP is not the active stack (stack monitoring is disabled)\r\n");
 8003bba:	480c      	ldr	r0, [pc, #48]	@ (8003bec <stackMonInit+0x54>)
 8003bbc:	f7ff ff8a 	bl	8003ad4 <lc_print>
    io_stack.stack_mon = false;
  } else
    io_stack.stack_mon = true;

  /* Calculating used stack before test */
  io_stack.ustack_size = io_stack.estack - io_stack.cstack;
 8003bc0:	6921      	ldr	r1, [r4, #16]
 8003bc2:	69a3      	ldr	r3, [r4, #24]
    io_stack.stack_mon = false;
 8003bc4:	7125      	strb	r5, [r4, #4]
  io_stack.ustack_size = io_stack.estack - io_stack.cstack;
 8003bc6:	1ac9      	subs	r1, r1, r3
 8003bc8:	60e1      	str	r1, [r4, #12]

  if ((io_stack.stack_mon) && (io_stack.ustack_size > io_stack.mstack_size)) {
 8003bca:	b13d      	cbz	r5, 8003bdc <stackMonInit+0x44>
 8003bcc:	6962      	ldr	r2, [r4, #20]
 8003bce:	4291      	cmp	r1, r2
 8003bd0:	d904      	bls.n	8003bdc <stackMonInit+0x44>
    LC_PRINT("E: !stack overflow detected %d > %d\r\n", (int)io_stack.ustack_size,
 8003bd2:	4807      	ldr	r0, [pc, #28]	@ (8003bf0 <stackMonInit+0x58>)
 8003bd4:	f7ff ff7e 	bl	8003ad4 <lc_print>
        (int)io_stack.mstack_size);
    io_stack.stack_mon = false;
 8003bd8:	2300      	movs	r3, #0
 8003bda:	7123      	strb	r3, [r4, #4]
  }
}
 8003bdc:	bd38      	pop	{r3, r4, r5, pc}
 8003bde:	2501      	movs	r5, #1
 8003be0:	e7ee      	b.n	8003bc0 <stackMonInit+0x28>
 8003be2:	bf00      	nop
 8003be4:	200042dc 	.word	0x200042dc
 8003be8:	20018000 	.word	0x20018000
 8003bec:	0800c34d 	.word	0x0800c34d
 8003bf0:	0800c38d 	.word	0x0800c38d

08003bf4 <dwtCyclesToTime>:
 */

struct cyclesCount cyclesCount;

int dwtCyclesToTime(uint64_t clks, struct dwtTime *t)
{
 8003bf4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003bf8:	4604      	mov	r4, r0
 8003bfa:	468a      	mov	sl, r1
  if (!t)
 8003bfc:	4616      	mov	r6, r2
 8003bfe:	b38a      	cbz	r2, 8003c64 <dwtCyclesToTime+0x70>
    return -1;
  uint32_t fcpu = port_hal_get_cpu_freq();
 8003c00:	f7fe f8e6 	bl	8001dd0 <HAL_RCC_GetHCLKFreq>
  uint64_t s  = clks / fcpu;
 8003c04:	2300      	movs	r3, #0
  uint32_t fcpu = port_hal_get_cpu_freq();
 8003c06:	4607      	mov	r7, r0
  uint64_t s  = clks / fcpu;
 8003c08:	4602      	mov	r2, r0
 8003c0a:	4651      	mov	r1, sl
 8003c0c:	4620      	mov	r0, r4
 8003c0e:	f7fc ffcb 	bl	8000ba8 <__aeabi_uldivmod>
  uint64_t ms = (clks * 1000) / fcpu;
 8003c12:	f44f 757a 	mov.w	r5, #1000	@ 0x3e8
  uint64_t s  = clks / fcpu;
 8003c16:	4683      	mov	fp, r0
  uint64_t ms = (clks * 1000) / fcpu;
 8003c18:	fba4 0105 	umull	r0, r1, r4, r5
 8003c1c:	463a      	mov	r2, r7
 8003c1e:	2300      	movs	r3, #0
 8003c20:	fb05 110a 	mla	r1, r5, sl, r1
 8003c24:	f7fc ffc0 	bl	8000ba8 <__aeabi_uldivmod>
  uint64_t us = (clks * 1000 * 1000) / fcpu;
 8003c28:	f8df 9040 	ldr.w	r9, [pc, #64]	@ 8003c6c <dwtCyclesToTime+0x78>
  ms -= (s * 1000);
 8003c2c:	fbab 3205 	umull	r3, r2, fp, r5
 8003c30:	1ac3      	subs	r3, r0, r3
  uint64_t us = (clks * 1000 * 1000) / fcpu;
 8003c32:	fba4 0109 	umull	r0, r1, r4, r9
  ms -= (s * 1000);
 8003c36:	9301      	str	r3, [sp, #4]
  uint64_t us = (clks * 1000 * 1000) / fcpu;
 8003c38:	fb09 110a 	mla	r1, r9, sl, r1
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	463a      	mov	r2, r7
 8003c40:	f7fc ffb2 	bl	8000ba8 <__aeabi_uldivmod>
  us -= (ms * 1000 + s * 1000000);
  t->fcpu = fcpu;
  t->s = s;
  t->ms = ms;
 8003c44:	9b01      	ldr	r3, [sp, #4]
 8003c46:	60b3      	str	r3, [r6, #8]
  us -= (ms * 1000 + s * 1000000);
 8003c48:	fbab 8909 	umull	r8, r9, fp, r9
 8003c4c:	eba0 0008 	sub.w	r0, r0, r8
 8003c50:	fba3 3505 	umull	r3, r5, r3, r5
  t->s = s;
 8003c54:	e9c6 7b00 	strd	r7, fp, [r6]
  us -= (ms * 1000 + s * 1000000);
 8003c58:	1ac0      	subs	r0, r0, r3
  t->us = us;
 8003c5a:	60f0      	str	r0, [r6, #12]
  return 0;
 8003c5c:	2000      	movs	r0, #0
}
 8003c5e:	b003      	add	sp, #12
 8003c60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return -1;
 8003c64:	f04f 30ff 	mov.w	r0, #4294967295
 8003c68:	e7f9      	b.n	8003c5e <dwtCyclesToTime+0x6a>
 8003c6a:	bf00      	nop
 8003c6c:	000f4240 	.word	0x000f4240

08003c70 <getFlashCacheConf>:

#if defined(STM32L4) || defined(STM32F4)

  mconf |= MCONF_L4_F4;

  __I uint32_t acr = FLASH->ACR ;
 8003c70:	4b0d      	ldr	r3, [pc, #52]	@ (8003ca8 <getFlashCacheConf+0x38>)
{
 8003c72:	b082      	sub	sp, #8
  __I uint32_t acr = FLASH->ACR ;
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	9301      	str	r3, [sp, #4]

  mconf |= ((acr & FLASH_ACR_LATENCY_Msk) >> FLASH_ACR_LATENCY_Pos);
 8003c78:	9801      	ldr	r0, [sp, #4]

  if ((acr & FLASH_ACR_PRFTEN_Msk) >> FLASH_ACR_PRFTEN_Pos)
 8003c7a:	9b01      	ldr	r3, [sp, #4]
 8003c7c:	05d9      	lsls	r1, r3, #23
    mconf |= MCONF_ART_DCACHE;
  if ((acr & FLASH_ACR_ICEN_Msk) >> FLASH_ACR_ICEN_Pos)
 8003c7e:	9b01      	ldr	r3, [sp, #4]
  mconf |= ((acr & FLASH_ACR_LATENCY_Msk) >> FLASH_ACR_LATENCY_Pos);
 8003c80:	f000 0007 	and.w	r0, r0, #7
    mconf |= MCONF_ART_DCACHE;
 8003c84:	bf4c      	ite	mi
 8003c86:	f040 2001 	orrmi.w	r0, r0, #16777472	@ 0x1000100
  mconf |= ((acr & FLASH_ACR_LATENCY_Msk) >> FLASH_ACR_LATENCY_Pos);
 8003c8a:	f040 7080 	orrpl.w	r0, r0, #16777216	@ 0x1000000
  if ((acr & FLASH_ACR_ICEN_Msk) >> FLASH_ACR_ICEN_Pos)
 8003c8e:	059a      	lsls	r2, r3, #22
    mconf |= MCONF_ART_ICACHE;
  if ((acr & FLASH_ACR_DCEN_Msk) >> FLASH_ACR_DCEN_Pos)
 8003c90:	9b01      	ldr	r3, [sp, #4]
    mconf |= MCONF_ART_ICACHE;
 8003c92:	bf48      	it	mi
 8003c94:	f440 7000 	orrmi.w	r0, r0, #512	@ 0x200
  if ((acr & FLASH_ACR_DCEN_Msk) >> FLASH_ACR_DCEN_Pos)
 8003c98:	055b      	lsls	r3, r3, #21
    mconf |= MCONF_ART_PREFETCH;
 8003c9a:	bf48      	it	mi
 8003c9c:	f440 6080 	orrmi.w	r0, r0, #1024	@ 0x400
    mconf |= MCONF_CORE_DCACHE;

#endif

  return mconf;
}
 8003ca0:	f440 3080 	orr.w	r0, r0, #65536	@ 0x10000
 8003ca4:	b002      	add	sp, #8
 8003ca6:	4770      	bx	lr
 8003ca8:	40022000 	.word	0x40022000

08003cac <getSysConf.part.0>:
void getSysConf(struct mcu_conf *conf)
 8003cac:	b510      	push	{r4, lr}
 8003cae:	4604      	mov	r4, r0
  conf->sclk = port_hal_get_cpu_freq();
 8003cb0:	f7fe f88e 	bl	8001dd0 <HAL_RCC_GetHCLKFreq>
 8003cb4:	6020      	str	r0, [r4, #0]
  conf->hclk = port_hal_get_sys_freq();
 8003cb6:	f7fe f88b 	bl	8001dd0 <HAL_RCC_GetHCLKFreq>
 8003cba:	6060      	str	r0, [r4, #4]
  conf->conf = getFlashCacheConf();
 8003cbc:	f7ff ffd8 	bl	8003c70 <getFlashCacheConf>
 8003cc0:	60a0      	str	r0, [r4, #8]
  conf->devid = port_hal_get_dev_id();
 8003cc2:	f7fd fb47 	bl	8001354 <HAL_GetDEVID>
 8003cc6:	60e0      	str	r0, [r4, #12]
  conf->revid = port_hal_get_rev_id();
 8003cc8:	f7fd fb3e 	bl	8001348 <HAL_GetREVID>
 8003ccc:	6120      	str	r0, [r4, #16]
}
 8003cce:	bd10      	pop	{r4, pc}

08003cd0 <systemSettingLog>:

void systemSettingLog(void)
{
 8003cd0:	b530      	push	{r4, r5, lr}
  LC_PRINT("Compiled with GHS-ARM Compiler %d\r\n", __GHS_VERSION_NUMBER);
#elif defined(_IS_HTC_COMPILER) && _IS_HTC_COMPILER
  LC_PRINT("Compiled with HIGHTEC Clang %d.%d.%d\r\n", __clang_major__, __clang_minor__,
      __clang_patchlevel__);
#elif defined(_IS_GCC_COMPILER) && _IS_GCC_COMPILER
  LC_PRINT("Compiled with GCC %d.%d.%d\r\n", __GNUC__, __GNUC_MINOR__,
 8003cd2:	2301      	movs	r3, #1
{
 8003cd4:	b089      	sub	sp, #36	@ 0x24
  LC_PRINT("Compiled with GCC %d.%d.%d\r\n", __GNUC__, __GNUC_MINOR__,
 8003cd6:	2203      	movs	r2, #3
 8003cd8:	210c      	movs	r1, #12
 8003cda:	4838      	ldr	r0, [pc, #224]	@ (8003dbc <systemSettingLog+0xec>)
 8003cdc:	f7ff fefa 	bl	8003ad4 <lc_print>
  if (!conf)
 8003ce0:	a803      	add	r0, sp, #12
 8003ce2:	f7ff ffe3 	bl	8003cac <getSysConf.part.0>


  /* Display Device configuration */
  getSysConf(&sys_conf);

  LC_PRINT(DEVICE_FAMILY " device configuration...\r\n");
 8003ce6:	4836      	ldr	r0, [pc, #216]	@ (8003dc0 <systemSettingLog+0xf0>)
 8003ce8:	f7ff fef4 	bl	8003ad4 <lc_print>

  LC_PRINT(" Device       : DevID:0x%04x (%s) RevID:0x%04x\r\n",
 8003cec:	9906      	ldr	r1, [sp, #24]
  switch (dev_id) {
 8003cee:	f240 4262 	movw	r2, #1122	@ 0x462
  LC_PRINT(" Device       : DevID:0x%04x (%s) RevID:0x%04x\r\n",
 8003cf2:	b28b      	uxth	r3, r1
  switch (dev_id) {
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d056      	beq.n	8003da6 <systemSettingLog+0xd6>
 8003cf8:	d848      	bhi.n	8003d8c <systemSettingLog+0xbc>
 8003cfa:	f240 4235 	movw	r2, #1077	@ 0x435
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d053      	beq.n	8003daa <systemSettingLog+0xda>
 8003d02:	f240 4261 	movw	r2, #1121	@ 0x461
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d051      	beq.n	8003dae <systemSettingLog+0xde>
  default:    str = "UNKNOWN";
 8003d0a:	482e      	ldr	r0, [pc, #184]	@ (8003dc4 <systemSettingLog+0xf4>)
 8003d0c:	f240 4415 	movw	r4, #1045	@ 0x415
 8003d10:	f100 0222 	add.w	r2, r0, #34	@ 0x22
 8003d14:	42a3      	cmp	r3, r4
 8003d16:	bf08      	it	eq
 8003d18:	4602      	moveq	r2, r0
  LC_PRINT(" Device       : DevID:0x%04x (%s) RevID:0x%04x\r\n",
 8003d1a:	9b07      	ldr	r3, [sp, #28]
 8003d1c:	482a      	ldr	r0, [pc, #168]	@ (8003dc8 <systemSettingLog+0xf8>)
#else
  LC_PRINT(" Core Arch.   : M%d - %s\r\n", __CORTEX_M, "no FPU");
#endif

  LC_PRINT(" HAL version  : 0x%08x\r\n", (int)port_hal_get_hal_version());
  LC_PRINT(" SYSCLK clock : %u MHz\r\n", (int)sys_conf.sclk/1000000);
 8003d1e:	4c2b      	ldr	r4, [pc, #172]	@ (8003dcc <systemSettingLog+0xfc>)
  LC_PRINT(" Device       : DevID:0x%04x (%s) RevID:0x%04x\r\n",
 8003d20:	f7ff fed8 	bl	8003ad4 <lc_print>
  LC_PRINT(" Core Arch.   : M%d - %s %s\r\n", __CORTEX_M, "FPU ", ((__FPU_USED) ? "used" : "not used!"));
 8003d24:	4b2a      	ldr	r3, [pc, #168]	@ (8003dd0 <systemSettingLog+0x100>)
 8003d26:	2104      	movs	r1, #4
 8003d28:	1d5a      	adds	r2, r3, #5
 8003d2a:	f103 000a 	add.w	r0, r3, #10
 8003d2e:	f7ff fed1 	bl	8003ad4 <lc_print>
  LC_PRINT(" HAL version  : 0x%08x\r\n", (int)port_hal_get_hal_version());
 8003d32:	f7fd fb05 	bl	8001340 <HAL_GetHalVersion>
 8003d36:	4601      	mov	r1, r0
 8003d38:	4826      	ldr	r0, [pc, #152]	@ (8003dd4 <systemSettingLog+0x104>)
 8003d3a:	f7ff fecb 	bl	8003ad4 <lc_print>
  LC_PRINT(" SYSCLK clock : %u MHz\r\n", (int)sys_conf.sclk/1000000);
 8003d3e:	9903      	ldr	r1, [sp, #12]
 8003d40:	4825      	ldr	r0, [pc, #148]	@ (8003dd8 <systemSettingLog+0x108>)
 8003d42:	fb91 f1f4 	sdiv	r1, r1, r4
 8003d46:	f7ff fec5 	bl	8003ad4 <lc_print>
  LC_PRINT(" HCLK clock   : %u MHz\r\n", (int)sys_conf.hclk/1000000);
 8003d4a:	9904      	ldr	r1, [sp, #16]
 8003d4c:	4823      	ldr	r0, [pc, #140]	@ (8003ddc <systemSettingLog+0x10c>)
 8003d4e:	fb91 f1f4 	sdiv	r1, r1, r4
 8003d52:	f7ff febf 	bl	8003ad4 <lc_print>
      bitToStr(ccr & SCB_CCR_DC_Msk));
#endif
#endif

#if defined(STM32F4) || defined(STM32L4)
  uint32_t acr = FLASH->ACR;
 8003d56:	4b22      	ldr	r3, [pc, #136]	@ (8003de0 <systemSettingLog+0x110>)
    return "True";
 8003d58:	4822      	ldr	r0, [pc, #136]	@ (8003de4 <systemSettingLog+0x114>)
  uint32_t acr = FLASH->ACR;
 8003d5a:	6819      	ldr	r1, [r3, #0]
    return "True";
 8003d5c:	1f44      	subs	r4, r0, #5
 8003d5e:	f411 7f80 	tst.w	r1, #256	@ 0x100
 8003d62:	bf0c      	ite	eq
 8003d64:	4602      	moveq	r2, r0
 8003d66:	4622      	movne	r2, r4
 8003d68:	f411 7f00 	tst.w	r1, #512	@ 0x200
 8003d6c:	bf0c      	ite	eq
 8003d6e:	4603      	moveq	r3, r0
 8003d70:	4623      	movne	r3, r4
 8003d72:	f411 6f80 	tst.w	r1, #1024	@ 0x400
 8003d76:	bf08      	it	eq
 8003d78:	4604      	moveq	r4, r0
  LC_PRINT(" FLASH conf.  : ACR=0x%08x - Prefetch=%s $I/$D=(%s,%s) latency=%d\r\n",
 8003d7a:	f001 0507 	and.w	r5, r1, #7
 8003d7e:	e9cd 4500 	strd	r4, r5, [sp]
 8003d82:	30e7      	adds	r0, #231	@ 0xe7
 8003d84:	f7ff fea6 	bl	8003ad4 <lc_print>
  LC_PRINT(" CACHE conf.  : $I/$D=(%s,%s)\r\n",
      bitToStr(ccr & SCB_CCR_IC_Msk),
      bitToStr(ccr & SCB_CCR_DC_Msk));
#endif

}
 8003d88:	b009      	add	sp, #36	@ 0x24
 8003d8a:	bd30      	pop	{r4, r5, pc}
  switch (dev_id) {
 8003d8c:	f5b3 6f8e 	cmp.w	r3, #1136	@ 0x470
 8003d90:	d00f      	beq.n	8003db2 <systemSettingLog+0xe2>
 8003d92:	f240 4271 	movw	r2, #1137	@ 0x471
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d00d      	beq.n	8003db6 <systemSettingLog+0xe6>
  default:    str = "UNKNOWN";
 8003d9a:	4813      	ldr	r0, [pc, #76]	@ (8003de8 <systemSettingLog+0x118>)
 8003d9c:	f240 4464 	movw	r4, #1124	@ 0x464
 8003da0:	f100 0238 	add.w	r2, r0, #56	@ 0x38
 8003da4:	e7b6      	b.n	8003d14 <systemSettingLog+0x44>
  switch (dev_id) {
 8003da6:	4a11      	ldr	r2, [pc, #68]	@ (8003dec <systemSettingLog+0x11c>)
 8003da8:	e7b7      	b.n	8003d1a <systemSettingLog+0x4a>
  case 0x435: str = "STM32L43xxx"; break;  /* Little_Orca_256K */
 8003daa:	4a11      	ldr	r2, [pc, #68]	@ (8003df0 <systemSettingLog+0x120>)
 8003dac:	e7b5      	b.n	8003d1a <systemSettingLog+0x4a>
  case 0x461: str = "STM32L49xxx"; break;  /* BigOrca_1M */
 8003dae:	4a11      	ldr	r2, [pc, #68]	@ (8003df4 <systemSettingLog+0x124>)
 8003db0:	e7b3      	b.n	8003d1a <systemSettingLog+0x4a>
  case 0x470: str = "STM32L4R/S"; break;   /* Orca_plus_2MB */
 8003db2:	4a11      	ldr	r2, [pc, #68]	@ (8003df8 <systemSettingLog+0x128>)
 8003db4:	e7b1      	b.n	8003d1a <systemSettingLog+0x4a>
  case 0x471: str = "STM32L4P/Q"; break;   /* Orca_plus_1MB */
 8003db6:	4a11      	ldr	r2, [pc, #68]	@ (8003dfc <systemSettingLog+0x12c>)
 8003db8:	e7af      	b.n	8003d1a <systemSettingLog+0x4a>
 8003dba:	bf00      	nop
 8003dbc:	0800c416 	.word	0x0800c416
 8003dc0:	0800c433 	.word	0x0800c433
 8003dc4:	0800c3e1 	.word	0x0800c3e1
 8003dc8:	0800c453 	.word	0x0800c453
 8003dcc:	000f4240 	.word	0x000f4240
 8003dd0:	0800c484 	.word	0x0800c484
 8003dd4:	0800c4ac 	.word	0x0800c4ac
 8003dd8:	0800c4c5 	.word	0x0800c4c5
 8003ddc:	0800c4de 	.word	0x0800c4de
 8003de0:	40022000 	.word	0x40022000
 8003de4:	0800c410 	.word	0x0800c410
 8003de8:	0800c3cb 	.word	0x0800c3cb
 8003dec:	0800c3bf 	.word	0x0800c3bf
 8003df0:	0800c3d5 	.word	0x0800c3d5
 8003df4:	0800c3b3 	.word	0x0800c3b3
 8003df8:	0800c3f8 	.word	0x0800c3f8
 8003dfc:	0800c3ed 	.word	0x0800c3ed

08003e00 <port_hal_crc_ip_init_imp>:
  __HAL_RCC_CRC_CLK_ENABLE();
#elif defined(STM32MP1)
  __HAL_RCC_CRC2_CLK_ENABLE();
#else
  /* By default the CRC IP clock is enabled */
  __HAL_RCC_CRC_CLK_ENABLE();
 8003e00:	4b06      	ldr	r3, [pc, #24]	@ (8003e1c <port_hal_crc_ip_init_imp+0x1c>)
 8003e02:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003e04:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003e08:	649a      	str	r2, [r3, #72]	@ 0x48
 8003e0a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
{
 8003e0c:	b082      	sub	sp, #8
  __HAL_RCC_CRC_CLK_ENABLE();
 8003e0e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003e12:	9301      	str	r3, [sp, #4]
 8003e14:	9b01      	ldr	r3, [sp, #4]
#endif
}
 8003e16:	b002      	add	sp, #8
 8003e18:	4770      	bx	lr
 8003e1a:	bf00      	nop
 8003e1c:	40021000 	.word	0x40021000

08003e20 <port_dwt_init_imp>:

#if defined(HAS_DWT_CTRL) && HAS_DWT_CTRL == 1

void port_dwt_init_imp()
{
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8003e20:	4a07      	ldr	r2, [pc, #28]	@ (8003e40 <port_dwt_init_imp+0x20>)
 8003e22:	f8d2 30fc 	ldr.w	r3, [r2, #252]	@ 0xfc
 8003e26:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003e2a:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
#ifdef STM32F7
  DWT->LAR = 0xC5ACCE55;
#endif
  DWT->CYCCNT = 0;
 8003e2e:	4b05      	ldr	r3, [pc, #20]	@ (8003e44 <port_dwt_init_imp+0x24>)
 8003e30:	2200      	movs	r2, #0
 8003e32:	605a      	str	r2, [r3, #4]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8003e34:	681a      	ldr	r2, [r3, #0]
 8003e36:	f042 0201 	orr.w	r2, r2, #1
 8003e3a:	601a      	str	r2, [r3, #0]
}
 8003e3c:	4770      	bx	lr
 8003e3e:	bf00      	nop
 8003e40:	e000ed00 	.word	0xe000ed00
 8003e44:	e0001000 	.word	0xe0001000

08003e48 <ai_mnetwork_handle>:

AI_DECLARE_STATIC
struct network_instance *ai_mnetwork_handle(struct network_instance *inst)
{
    for (int i=0; i<AI_MNETWORK_NUMBER; i++) {
        if ((inst) && (&gnetworks[i] == inst))
 8003e48:	4b05      	ldr	r3, [pc, #20]	@ (8003e60 <ai_mnetwork_handle+0x18>)
 8003e4a:	b120      	cbz	r0, 8003e56 <ai_mnetwork_handle+0xe>
            return inst;
        else if ((!inst) && (gnetworks[i].entry == NULL))
            return &gnetworks[i];
    }
    return NULL;
 8003e4c:	4298      	cmp	r0, r3
 8003e4e:	bf0c      	ite	eq
 8003e50:	4618      	moveq	r0, r3
 8003e52:	2000      	movne	r0, #0
 8003e54:	4770      	bx	lr
        else if ((!inst) && (gnetworks[i].entry == NULL))
 8003e56:	681a      	ldr	r2, [r3, #0]
            return inst;
 8003e58:	2a00      	cmp	r2, #0
 8003e5a:	bf08      	it	eq
 8003e5c:	4618      	moveq	r0, r3
}
 8003e5e:	4770      	bx	lr
 8003e60:	2000432c 	.word	0x2000432c

08003e64 <ai_mnetwork_is_valid.constprop.0>:
ai_bool ai_mnetwork_is_valid(const char* name,
 8003e64:	b510      	push	{r4, lr}
    if (name && (strlen(entry->name) == strlen(name)) &&
 8003e66:	4604      	mov	r4, r0
 8003e68:	b160      	cbz	r0, 8003e84 <ai_mnetwork_is_valid.constprop.0+0x20>
 8003e6a:	f7fc fa01 	bl	8000270 <strlen>
 8003e6e:	2807      	cmp	r0, #7
 8003e70:	4602      	mov	r2, r0
 8003e72:	d107      	bne.n	8003e84 <ai_mnetwork_is_valid.constprop.0+0x20>
            (strncmp(entry->name, name, strlen(entry->name)) == 0))
 8003e74:	4804      	ldr	r0, [pc, #16]	@ (8003e88 <ai_mnetwork_is_valid.constprop.0+0x24>)
 8003e76:	4621      	mov	r1, r4
 8003e78:	f005 fc25 	bl	80096c6 <strncmp>
    if (name && (strlen(entry->name) == strlen(name)) &&
 8003e7c:	fab0 f080 	clz	r0, r0
 8003e80:	0940      	lsrs	r0, r0, #5
}
 8003e82:	bd10      	pop	{r4, pc}
    return false;
 8003e84:	2000      	movs	r0, #0
 8003e86:	e7fc      	b.n	8003e82 <ai_mnetwork_is_valid.constprop.0+0x1e>
 8003e88:	0800c5c4 	.word	0x0800c5c4

08003e8c <MX_X_CUBE_AI_Init>:
{
 8003e8c:	b508      	push	{r3, lr}
    MX_UARTx_Init();
 8003e8e:	f7fd f87d 	bl	8000f8c <MX_USART1_UART_Init>
}
 8003e92:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    aiSystemPerformanceInit();
 8003e96:	f7fe bfef 	b.w	8002e78 <aiSystemPerformanceInit>

08003e9a <MX_X_CUBE_AI_Process>:
    aiSystemPerformanceProcess(data);
 8003e9a:	f7ff b8a5 	b.w	8002fe8 <aiSystemPerformanceProcess>
	...

08003ea0 <ai_mnetwork_find>:
    }
}

AI_API_ENTRY
const char* ai_mnetwork_find(const char *name, ai_int idx)
{
 8003ea0:	b510      	push	{r4, lr}
 8003ea2:	460c      	mov	r4, r1
    const ai_network_entry_t *entry;

    for (int i=0; i<AI_MNETWORK_NUMBER; i++) {
        entry = &networks[i];
        if (ai_mnetwork_is_valid(name, entry))
 8003ea4:	f7ff ffde 	bl	8003e64 <ai_mnetwork_is_valid.constprop.0>
 8003ea8:	b920      	cbnz	r0, 8003eb4 <ai_mnetwork_find+0x14>
            return entry->name;
 8003eaa:	2c00      	cmp	r4, #0
 8003eac:	4802      	ldr	r0, [pc, #8]	@ (8003eb8 <ai_mnetwork_find+0x18>)
 8003eae:	bf18      	it	ne
 8003eb0:	2000      	movne	r0, #0
            if (!idx--)
                return entry->name;
        }
    }
    return NULL;
}
 8003eb2:	bd10      	pop	{r4, pc}
            return entry->name;
 8003eb4:	4800      	ldr	r0, [pc, #0]	@ (8003eb8 <ai_mnetwork_find+0x18>)
 8003eb6:	e7fc      	b.n	8003eb2 <ai_mnetwork_find+0x12>
 8003eb8:	0800c5c4 	.word	0x0800c5c4

08003ebc <ai_mnetwork_create>:

AI_API_ENTRY
ai_error ai_mnetwork_create(const char *name, ai_handle* network,
        const ai_buffer* network_config)
{
 8003ebc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ebe:	4607      	mov	r7, r0
    const ai_network_entry_t *entry;
    const ai_network_entry_t *found = NULL;
    ai_error err;
    struct network_instance *inst = ai_mnetwork_handle(NULL);
 8003ec0:	2000      	movs	r0, #0
{
 8003ec2:	4616      	mov	r6, r2
    struct network_instance *inst = ai_mnetwork_handle(NULL);
 8003ec4:	f7ff ffc0 	bl	8003e48 <ai_mnetwork_handle>
{
 8003ec8:	460c      	mov	r4, r1

    if (!inst) {
 8003eca:	4605      	mov	r5, r0
 8003ecc:	b1a8      	cbz	r0, 8003efa <ai_mnetwork_create+0x3e>
        return err;
    }

    for (int i=0; i<AI_MNETWORK_NUMBER; i++) {
        entry = &networks[i];
        if (ai_mnetwork_is_valid(name, entry)) {
 8003ece:	4638      	mov	r0, r7
 8003ed0:	f7ff ffc8 	bl	8003e64 <ai_mnetwork_is_valid.constprop.0>
 8003ed4:	b1a0      	cbz	r0, 8003f00 <ai_mnetwork_create+0x44>
        err.code = AI_ERROR_CODE_NETWORK;
        return err;
    }

    if (network_config == NULL)
        err = found->ai_create(network, found->config);
 8003ed6:	4631      	mov	r1, r6
 8003ed8:	4620      	mov	r0, r4
    else
        err = found->ai_create(network, network_config);
 8003eda:	f000 fb87 	bl	80045ec <ai_network_create>
 8003ede:	b2c2      	uxtb	r2, r0
 8003ee0:	f3c0 2017 	ubfx	r0, r0, #8, #24
    if ((err.code == AI_ERROR_CODE_NONE) && (err.type == AI_ERROR_NONE)) {
 8003ee4:	ea52 2100 	orrs.w	r1, r2, r0, lsl #8
 8003ee8:	d104      	bne.n	8003ef4 <ai_mnetwork_create+0x38>
        inst->entry = found;
 8003eea:	4906      	ldr	r1, [pc, #24]	@ (8003f04 <ai_mnetwork_create+0x48>)
 8003eec:	6029      	str	r1, [r5, #0]
        inst->handle = *network;
 8003eee:	6821      	ldr	r1, [r4, #0]
 8003ef0:	6069      	str	r1, [r5, #4]
        *network = (ai_handle*)inst;
 8003ef2:	6025      	str	r5, [r4, #0]
    }

    return err;
}
 8003ef4:	ea42 2000 	orr.w	r0, r2, r0, lsl #8
 8003ef8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003efa:	2231      	movs	r2, #49	@ 0x31
        if (ai_mnetwork_is_valid(name, entry)) {
 8003efc:	2010      	movs	r0, #16
 8003efe:	e7f9      	b.n	8003ef4 <ai_mnetwork_create+0x38>
 8003f00:	2214      	movs	r2, #20
 8003f02:	e7fb      	b.n	8003efc <ai_mnetwork_create+0x40>
 8003f04:	0800c5cc 	.word	0x0800c5cc

08003f08 <ai_mnetwork_destroy>:

AI_API_ENTRY
ai_handle ai_mnetwork_destroy(ai_handle network)
{
 8003f08:	b538      	push	{r3, r4, r5, lr}
 8003f0a:	4605      	mov	r5, r0
    struct network_instance *inn;
    inn =  ai_mnetwork_handle((struct network_instance *)network);
 8003f0c:	f7ff ff9c 	bl	8003e48 <ai_mnetwork_handle>
    if (inn) {
 8003f10:	4604      	mov	r4, r0
 8003f12:	b160      	cbz	r0, 8003f2e <ai_mnetwork_destroy+0x26>
        ai_handle hdl = inn->entry->ai_destroy(inn->handle);
 8003f14:	6803      	ldr	r3, [r0, #0]
 8003f16:	6840      	ldr	r0, [r0, #4]
 8003f18:	699b      	ldr	r3, [r3, #24]
 8003f1a:	4798      	blx	r3
        if (hdl != inn->handle) {
 8003f1c:	6863      	ldr	r3, [r4, #4]
 8003f1e:	4283      	cmp	r3, r0
 8003f20:	d005      	beq.n	8003f2e <ai_mnetwork_destroy+0x26>
        if ((inst) && (&gnetworks[i] == inst)) {
 8003f22:	4b04      	ldr	r3, [pc, #16]	@ (8003f34 <ai_mnetwork_destroy+0x2c>)
 8003f24:	429c      	cmp	r4, r3
 8003f26:	d101      	bne.n	8003f2c <ai_mnetwork_destroy+0x24>
            gnetworks[i].entry = NULL;
 8003f28:	2300      	movs	r3, #0
 8003f2a:	6023      	str	r3, [r4, #0]
            ai_mnetwork_release_handle(inn);
            network = AI_HANDLE_NULL;
 8003f2c:	2500      	movs	r5, #0
        }
    }
    return network;
}
 8003f2e:	4628      	mov	r0, r5
 8003f30:	bd38      	pop	{r3, r4, r5, pc}
 8003f32:	bf00      	nop
 8003f34:	2000432c 	.word	0x2000432c

08003f38 <ai_mnetwork_get_report>:

AI_API_ENTRY
ai_bool ai_mnetwork_get_report(ai_handle network, ai_network_report* report)
{
 8003f38:	b510      	push	{r4, lr}
    struct network_instance *inn;
    inn =  ai_mnetwork_handle((struct network_instance *)network);
 8003f3a:	f7ff ff85 	bl	8003e48 <ai_mnetwork_handle>
    if (inn)
 8003f3e:	b128      	cbz	r0, 8003f4c <ai_mnetwork_get_report+0x14>
        return inn->entry->ai_get_report(inn->handle, report);
 8003f40:	6802      	ldr	r2, [r0, #0]
 8003f42:	6840      	ldr	r0, [r0, #4]
 8003f44:	68d2      	ldr	r2, [r2, #12]
    else
        return false;
}
 8003f46:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return inn->entry->ai_get_report(inn->handle, report);
 8003f4a:	4710      	bx	r2
}
 8003f4c:	bd10      	pop	{r4, pc}

08003f4e <ai_mnetwork_get_error>:

AI_API_ENTRY
ai_error ai_mnetwork_get_error(ai_handle network)
{
 8003f4e:	b510      	push	{r4, lr}
    struct network_instance *inn;
    ai_error err;
    err.type = AI_ERROR_INVALID_PARAM;
    err.code = AI_ERROR_CODE_NETWORK;

    inn =  ai_mnetwork_handle((struct network_instance *)network);
 8003f50:	f7ff ff7a 	bl	8003e48 <ai_mnetwork_handle>
    if (inn)
 8003f54:	b128      	cbz	r0, 8003f62 <ai_mnetwork_get_error+0x14>
        return inn->entry->ai_get_error(inn->handle);
 8003f56:	6803      	ldr	r3, [r0, #0]
 8003f58:	6840      	ldr	r0, [r0, #4]
 8003f5a:	695b      	ldr	r3, [r3, #20]
    else
        return err;
}
 8003f5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return inn->entry->ai_get_error(inn->handle);
 8003f60:	4718      	bx	r3
}
 8003f62:	f241 0014 	movw	r0, #4116	@ 0x1014
 8003f66:	bd10      	pop	{r4, pc}

08003f68 <ai_mnetwork_init>:

AI_API_ENTRY
ai_bool ai_mnetwork_init(ai_handle network)
{
 8003f68:	b530      	push	{r4, r5, lr}
 8003f6a:	b08f      	sub	sp, #60	@ 0x3c
    struct network_instance *inn;
    ai_network_params par;

    inn =  ai_mnetwork_handle((struct network_instance *)network);
 8003f6c:	f7ff ff6c 	bl	8003e48 <ai_mnetwork_handle>
    if (inn) {
 8003f70:	4604      	mov	r4, r0
 8003f72:	b168      	cbz	r0, 8003f90 <ai_mnetwork_init+0x28>
        inn->entry->ai_data_params_get(&par);
 8003f74:	6803      	ldr	r3, [r0, #0]
 8003f76:	4668      	mov	r0, sp
 8003f78:	689b      	ldr	r3, [r3, #8]
 8003f7a:	4798      	blx	r3
        for (int idx=0; idx < par.map_activations.size; idx++)
 8003f7c:	2500      	movs	r5, #0
 8003f7e:	f8bd 200e 	ldrh.w	r2, [sp, #14]
          AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&par.map_activations, idx, inn->entry->activations[idx]);
 8003f82:	6823      	ldr	r3, [r4, #0]
        for (int idx=0; idx < par.map_activations.size; idx++)
 8003f84:	42aa      	cmp	r2, r5
 8003f86:	dc05      	bgt.n	8003f94 <ai_mnetwork_init+0x2c>
        return inn->entry->ai_init(inn->handle, &par);
 8003f88:	69db      	ldr	r3, [r3, #28]
 8003f8a:	6860      	ldr	r0, [r4, #4]
 8003f8c:	4669      	mov	r1, sp
 8003f8e:	4798      	blx	r3
    }
    else
        return false;
}
 8003f90:	b00f      	add	sp, #60	@ 0x3c
 8003f92:	bd30      	pop	{r4, r5, pc}
          AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&par.map_activations, idx, inn->entry->activations[idx]);
 8003f94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f96:	4629      	mov	r1, r5
 8003f98:	f853 2025 	ldr.w	r2, [r3, r5, lsl #2]
 8003f9c:	a803      	add	r0, sp, #12
 8003f9e:	f000 fc99 	bl	80048d4 <ai_buffer_array_item_set_address>
        for (int idx=0; idx < par.map_activations.size; idx++)
 8003fa2:	3501      	adds	r5, #1
 8003fa4:	e7eb      	b.n	8003f7e <ai_mnetwork_init+0x16>

08003fa6 <ai_mnetwork_run>:

AI_API_ENTRY
ai_i32 ai_mnetwork_run(ai_handle network, const ai_buffer* input,
        ai_buffer* output)
{
 8003fa6:	b570      	push	{r4, r5, r6, lr}
 8003fa8:	4614      	mov	r4, r2
    struct network_instance* inn;
    inn =  ai_mnetwork_handle((struct network_instance *)network);
 8003faa:	f7ff ff4d 	bl	8003e48 <ai_mnetwork_handle>
    if (inn)
 8003fae:	b138      	cbz	r0, 8003fc0 <ai_mnetwork_run+0x1a>
        return inn->entry->ai_run(inn->handle, input, output);
 8003fb0:	6802      	ldr	r2, [r0, #0]
 8003fb2:	6840      	ldr	r0, [r0, #4]
 8003fb4:	6a15      	ldr	r5, [r2, #32]
 8003fb6:	4622      	mov	r2, r4
 8003fb8:	462b      	mov	r3, r5
    else
        return 0;
}
 8003fba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        return inn->entry->ai_run(inn->handle, input, output);
 8003fbe:	4718      	bx	r3
}
 8003fc0:	bd70      	pop	{r4, r5, r6, pc}

08003fc2 <ai_mnetwork_get_private_handle>:

AI_API_ENTRY
 int ai_mnetwork_get_private_handle(ai_handle network,
         ai_handle *phandle,
         ai_network_params *pparams)
 {
 8003fc2:	b538      	push	{r3, r4, r5, lr}
 8003fc4:	4615      	mov	r5, r2
     struct network_instance* inn;
     inn =  ai_mnetwork_handle((struct network_instance *)network);
 8003fc6:	f7ff ff3f 	bl	8003e48 <ai_mnetwork_handle>
     if (inn && phandle && pparams) {
 8003fca:	b188      	cbz	r0, 8003ff0 <ai_mnetwork_get_private_handle+0x2e>
 8003fcc:	b181      	cbz	r1, 8003ff0 <ai_mnetwork_get_private_handle+0x2e>
 8003fce:	b17d      	cbz	r5, 8003ff0 <ai_mnetwork_get_private_handle+0x2e>
         *phandle = inn->handle;
 8003fd0:	6843      	ldr	r3, [r0, #4]
 8003fd2:	600b      	str	r3, [r1, #0]
         *pparams = inn->params;
 8003fd4:	f100 0408 	add.w	r4, r0, #8
 8003fd8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003fda:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003fdc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003fde:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003fe0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003fe2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003fe4:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003fe8:	e885 0003 	stmia.w	r5, {r0, r1}
         return 0;
 8003fec:	2000      	movs	r0, #0
     }
     else
         return -1;
 }
 8003fee:	bd38      	pop	{r3, r4, r5, pc}
         return -1;
 8003ff0:	f04f 30ff 	mov.w	r0, #4294967295
 8003ff4:	e7fb      	b.n	8003fee <ai_mnetwork_get_private_handle+0x2c>

08003ff6 <_write_number>:

  return count;
}

static int _write_number(uint64_t number, struct specifier *specifier)
{
 8003ff6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  char sign_neg = 0;
  char chr;

  buf[idx--] = 0;

  if (specifier->flags & FLAG_IS_SIGNED) {
 8003ffa:	6896      	ldr	r6, [r2, #8]
{
 8003ffc:	b091      	sub	sp, #68	@ 0x44
  buf[idx--] = 0;
 8003ffe:	2500      	movs	r5, #0
  if (specifier->flags & FLAG_IS_SIGNED) {
 8004000:	f016 0304 	ands.w	r3, r6, #4
{
 8004004:	4614      	mov	r4, r2
  buf[idx--] = 0;
 8004006:	f88d 503f 	strb.w	r5, [sp, #63]	@ 0x3f
  if (specifier->flags & FLAG_IS_SIGNED) {
 800400a:	d028      	beq.n	800405e <_write_number+0x68>
    if ((int64_t)number < 0) {
 800400c:	42a9      	cmp	r1, r5
 800400e:	da07      	bge.n	8004020 <_write_number+0x2a>
      number = -number;
      sign_neg = '-';
      specifier->width -= 1;
 8004010:	6813      	ldr	r3, [r2, #0]
      number = -number;
 8004012:	4240      	negs	r0, r0
      specifier->width -= 1;
 8004014:	f103 33ff 	add.w	r3, r3, #4294967295
      number = -number;
 8004018:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
      specifier->width -= 1;
 800401c:	6013      	str	r3, [r2, #0]
      sign_neg = '-';
 800401e:	252d      	movs	r5, #45	@ 0x2d
 8004020:	f016 0f08 	tst.w	r6, #8
 8004024:	bf14      	ite	ne
 8004026:	f04f 0841 	movne.w	r8, #65	@ 0x41
 800402a:	f04f 0861 	moveq.w	r8, #97	@ 0x61
 800402e:	f10d 093f 	add.w	r9, sp, #63	@ 0x3f
  do {
    uint64_t t;
    if (specifier->flags & FLAG_HEX) {
      chr = number & 0x0F;
      t = number >> 4;
      chr = (chr >= 10) ? (chr + (specifier->flags & FLAG_CAPS ? 'A' : 'a') - 10) : (chr + '0');
 8004032:	273e      	movs	r7, #62	@ 0x3e
    if (specifier->flags & FLAG_HEX) {
 8004034:	f006 0a10 	and.w	sl, r6, #16
      chr = (chr >= 10) ? (chr + (specifier->flags & FLAG_CAPS ? 'A' : 'a') - 10) : (chr + '0');
 8004038:	f1a8 080a 	sub.w	r8, r8, #10
      chr = number & 0x0F;
 800403c:	fa5f fb80 	uxtb.w	fp, r0
    if (specifier->flags & FLAG_HEX) {
 8004040:	f1ba 0f00 	cmp.w	sl, #0
 8004044:	d033      	beq.n	80040ae <_write_number+0xb8>
      chr = number & 0x0F;
 8004046:	f00b 030f 	and.w	r3, fp, #15
      t = number >> 4;
 800404a:	0900      	lsrs	r0, r0, #4
      chr = (chr >= 10) ? (chr + (specifier->flags & FLAG_CAPS ? 'A' : 'a') - 10) : (chr + '0');
 800404c:	2b09      	cmp	r3, #9
      t = number >> 4;
 800404e:	ea40 7001 	orr.w	r0, r0, r1, lsl #28
 8004052:	ea4f 1111 	mov.w	r1, r1, lsr #4
      chr = (chr >= 10) ? (chr + (specifier->flags & FLAG_CAPS ? 'A' : 'a') - 10) : (chr + '0');
 8004056:	d906      	bls.n	8004066 <_write_number+0x70>
 8004058:	4443      	add	r3, r8
    } else {
      t = number / 10;
      chr = (number - t * 10) + '0';
 800405a:	b2db      	uxtb	r3, r3
 800405c:	e004      	b.n	8004068 <_write_number+0x72>
  char sign_neg = 0;
 800405e:	461d      	mov	r5, r3
 8004060:	e7de      	b.n	8004020 <_write_number+0x2a>
    }
    number = t;
    buf[idx--] = chr;
 8004062:	4617      	mov	r7, r2
 8004064:	e7ea      	b.n	800403c <_write_number+0x46>
      chr = (chr >= 10) ? (chr + (specifier->flags & FLAG_CAPS ? 'A' : 'a') - 10) : (chr + '0');
 8004066:	3330      	adds	r3, #48	@ 0x30
    buf[idx--] = chr;
 8004068:	f809 3d01 	strb.w	r3, [r9, #-1]!
    count++;
  } while (number);
 800406c:	ea50 0301 	orrs.w	r3, r0, r1
    buf[idx--] = chr;
 8004070:	f107 32ff 	add.w	r2, r7, #4294967295
    count++;
 8004074:	f1c7 0b3f 	rsb	fp, r7, #63	@ 0x3f
  } while (number);
 8004078:	d1f3      	bne.n	8004062 <_write_number+0x6c>

  if ((sign_neg) && (!(specifier->flags & FLAG_ZERO_EXTEND))) {
 800407a:	f006 0101 	and.w	r1, r6, #1
 800407e:	b155      	cbz	r5, 8004096 <_write_number+0xa0>
 8004080:	b949      	cbnz	r1, 8004096 <_write_number+0xa0>
    buf[idx--] = sign_neg;
 8004082:	f102 0340 	add.w	r3, r2, #64	@ 0x40
 8004086:	eb0d 0203 	add.w	r2, sp, r3
 800408a:	232d      	movs	r3, #45	@ 0x2d
 800408c:	f802 3c40 	strb.w	r3, [r2, #-64]
    count++;
 8004090:	f1c7 0b40 	rsb	fp, r7, #64	@ 0x40
    buf[idx--] = sign_neg;
 8004094:	1eba      	subs	r2, r7, #2
 8004096:	2900      	cmp	r1, #0
  }

  while ((count < specifier->width) && (!(specifier->flags & FLAG_NEG_PAD))) {
 8004098:	6823      	ldr	r3, [r4, #0]
 800409a:	bf14      	ite	ne
 800409c:	2130      	movne	r1, #48	@ 0x30
 800409e:	2120      	moveq	r1, #32
 80040a0:	f006 0602 	and.w	r6, r6, #2
 80040a4:	455b      	cmp	r3, fp
 80040a6:	dd13      	ble.n	80040d0 <_write_number+0xda>
 80040a8:	b166      	cbz	r6, 80040c4 <_write_number+0xce>
    else
      buf[idx--] = ' ';
    count++;
  }

  if ((sign_neg) && (count < (specifier->width + 1))) {
 80040aa:	b9a5      	cbnz	r5, 80040d6 <_write_number+0xe0>
 80040ac:	e01c      	b.n	80040e8 <_write_number+0xf2>
      t = number / 10;
 80040ae:	220a      	movs	r2, #10
 80040b0:	2300      	movs	r3, #0
 80040b2:	f7fc fd79 	bl	8000ba8 <__aeabi_uldivmod>
      chr = (number - t * 10) + '0';
 80040b6:	f10b 0330 	add.w	r3, fp, #48	@ 0x30
 80040ba:	eb00 0280 	add.w	r2, r0, r0, lsl #2
 80040be:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 80040c2:	e7ca      	b.n	800405a <_write_number+0x64>
    if (specifier->flags & FLAG_ZERO_EXTEND)
 80040c4:	f80d 1002 	strb.w	r1, [sp, r2]
    count++;
 80040c8:	f10b 0b01 	add.w	fp, fp, #1
 80040cc:	3a01      	subs	r2, #1
 80040ce:	e7e9      	b.n	80040a4 <_write_number+0xae>
  if ((sign_neg) && (count < (specifier->width + 1))) {
 80040d0:	b155      	cbz	r5, 80040e8 <_write_number+0xf2>
 80040d2:	455b      	cmp	r3, fp
 80040d4:	db08      	blt.n	80040e8 <_write_number+0xf2>
    buf[idx--] = sign_neg;
 80040d6:	f102 0340 	add.w	r3, r2, #64	@ 0x40
 80040da:	446b      	add	r3, sp
 80040dc:	212d      	movs	r1, #45	@ 0x2d
 80040de:	f803 1c40 	strb.w	r1, [r3, #-64]
    count++;
 80040e2:	f10b 0b01 	add.w	fp, fp, #1
    buf[idx--] = sign_neg;
 80040e6:	3a01      	subs	r2, #1
  }

  idx++;


  for(int i = 0; i < count; i++) {
 80040e8:	eb0d 0602 	add.w	r6, sp, r2
 80040ec:	2500      	movs	r5, #0
    specifier->putc_fct(specifier->user, (buf + idx)[i]);
 80040ee:	68e3      	ldr	r3, [r4, #12]
 80040f0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80040f4:	6920      	ldr	r0, [r4, #16]
  for(int i = 0; i < count; i++) {
 80040f6:	3501      	adds	r5, #1
    specifier->putc_fct(specifier->user, (buf + idx)[i]);
 80040f8:	4798      	blx	r3
  for(int i = 0; i < count; i++) {
 80040fa:	45ab      	cmp	fp, r5
 80040fc:	d1f7      	bne.n	80040ee <_write_number+0xf8>
  }

  if (specifier->flags & FLAG_NEG_PAD) {
 80040fe:	68a3      	ldr	r3, [r4, #8]
 8004100:	079b      	lsls	r3, r3, #30
 8004102:	d408      	bmi.n	8004116 <_write_number+0x120>
      _WRITE_C(' ');
    }
  }

  return count;
}
 8004104:	4628      	mov	r0, r5
 8004106:	b011      	add	sp, #68	@ 0x44
 8004108:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      _WRITE_C(' ');
 800410c:	68e3      	ldr	r3, [r4, #12]
 800410e:	6920      	ldr	r0, [r4, #16]
 8004110:	2120      	movs	r1, #32
 8004112:	4798      	blx	r3
 8004114:	3501      	adds	r5, #1
    while (count < specifier->width) {
 8004116:	6823      	ldr	r3, [r4, #0]
 8004118:	42ab      	cmp	r3, r5
 800411a:	dcf7      	bgt.n	800410c <_write_number+0x116>
 800411c:	e7f2      	b.n	8004104 <_write_number+0x10e>
	...

08004120 <vlc_print>:
{
  return *(*fmtP)++;
}

int vlc_print(void (*putc_fct)(void*, const char), void *user, const char* fmt, va_list vl)
{
 8004120:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004124:	4606      	mov	r6, r0
 8004126:	b09d      	sub	sp, #116	@ 0x74
 8004128:	460f      	mov	r7, r1
 800412a:	461c      	mov	r4, r3
  char c, t;
  int count = 0;
 800412c:	2500      	movs	r5, #0
  return *(*fmtP)++;
 800412e:	4613      	mov	r3, r2
 8004130:	f813 1b01 	ldrb.w	r1, [r3], #1
 8004134:	9304      	str	r3, [sp, #16]
  bool error = false;

  while (((c = _getChar(&fmt)) != 0) && (!error))
 8004136:	b919      	cbnz	r1, 8004140 <vlc_print+0x20>
      putc_fct(user, c);
      count++;
    }
  }
  return count;
}
 8004138:	4628      	mov	r0, r5
 800413a:	b01d      	add	sp, #116	@ 0x74
 800413c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (c == '\n')
 8004140:	290a      	cmp	r1, #10
 8004142:	d103      	bne.n	800414c <vlc_print+0x2c>
      putc_fct(user, c);
 8004144:	4638      	mov	r0, r7
 8004146:	47b0      	blx	r6
      count++;
 8004148:	3501      	adds	r5, #1
 800414a:	e0c9      	b.n	80042e0 <vlc_print+0x1c0>
    else if (c == '%')
 800414c:	2925      	cmp	r1, #37	@ 0x25
 800414e:	d1f9      	bne.n	8004144 <vlc_print+0x24>
      struct specifier specifier = { 0, 0, 0, putc_fct, user };
 8004150:	2300      	movs	r3, #0
 8004152:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8004156:	e9cd 3609 	strd	r3, r6, [sp, #36]	@ 0x24
 800415a:	970b      	str	r7, [sp, #44]	@ 0x2c
      bool has_precision = false;
 800415c:	4618      	mov	r0, r3
  return *(*fmtP)++;
 800415e:	9a04      	ldr	r2, [sp, #16]
 8004160:	f812 1b01 	ldrb.w	r1, [r2], #1
 8004164:	9204      	str	r2, [sp, #16]
        if (!c)
 8004166:	b321      	cbz	r1, 80041b2 <vlc_print+0x92>
        else if (c == '0')
 8004168:	2939      	cmp	r1, #57	@ 0x39
 800416a:	d814      	bhi.n	8004196 <vlc_print+0x76>
 800416c:	292c      	cmp	r1, #44	@ 0x2c
 800416e:	d91e      	bls.n	80041ae <vlc_print+0x8e>
 8004170:	f1a1 022d 	sub.w	r2, r1, #45	@ 0x2d
 8004174:	2a0c      	cmp	r2, #12
 8004176:	d810      	bhi.n	800419a <vlc_print+0x7a>
 8004178:	e8df f012 	tbh	[pc, r2, lsl #1]
 800417c:	01da003c 	.word	0x01da003c
 8004180:	0027000f 	.word	0x0027000f
 8004184:	00400040 	.word	0x00400040
 8004188:	00400040 	.word	0x00400040
 800418c:	00400040 	.word	0x00400040
 8004190:	00400040 	.word	0x00400040
 8004194:	0040      	.short	0x0040
 8004196:	296c      	cmp	r1, #108	@ 0x6c
 8004198:	d03d      	beq.n	8004216 <vlc_print+0xf6>
          switch(c)
 800419a:	2978      	cmp	r1, #120	@ 0x78
 800419c:	d809      	bhi.n	80041b2 <vlc_print+0x92>
 800419e:	2962      	cmp	r1, #98	@ 0x62
 80041a0:	d83b      	bhi.n	800421a <vlc_print+0xfa>
 80041a2:	2946      	cmp	r1, #70	@ 0x46
 80041a4:	f000 80df 	beq.w	8004366 <vlc_print+0x246>
 80041a8:	2958      	cmp	r1, #88	@ 0x58
 80041aa:	f000 80c3 	beq.w	8004334 <vlc_print+0x214>
 80041ae:	2925      	cmp	r1, #37	@ 0x25
 80041b0:	d0c8      	beq.n	8004144 <vlc_print+0x24>
        putc_fct(user, '<');
 80041b2:	213c      	movs	r1, #60	@ 0x3c
 80041b4:	4638      	mov	r0, r7
 80041b6:	47b0      	blx	r6
        putc_fct(user, '!');
 80041b8:	2121      	movs	r1, #33	@ 0x21
 80041ba:	4638      	mov	r0, r7
 80041bc:	47b0      	blx	r6
        putc_fct(user, '>');
 80041be:	213e      	movs	r1, #62	@ 0x3e
 80041c0:	4638      	mov	r0, r7
 80041c2:	47b0      	blx	r6
        va_arg(vl, signed long);
 80041c4:	3404      	adds	r4, #4
        count += 3;
 80041c6:	3503      	adds	r5, #3
        error = false;
 80041c8:	e08a      	b.n	80042e0 <vlc_print+0x1c0>
          if (!specifier.width && !specifier.precision) {
 80041ca:	e9dd 2107 	ldrd	r2, r1, [sp, #28]
 80041ce:	ea52 0c01 	orrs.w	ip, r2, r1
 80041d2:	d104      	bne.n	80041de <vlc_print+0xbe>
            specifier.flags |= FLAG_ZERO_EXTEND;
 80041d4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80041d6:	f042 0201 	orr.w	r2, r2, #1
          specifier.flags |= FLAG_NEG_PAD;
 80041da:	9209      	str	r2, [sp, #36]	@ 0x24
 80041dc:	e7bf      	b.n	800415e <vlc_print+0x3e>
          } else if (has_precision) {
 80041de:	f04f 0c0a 	mov.w	ip, #10
 80041e2:	b118      	cbz	r0, 80041ec <vlc_print+0xcc>
            specifier.precision = specifier.precision * 10 + (c - '0');
 80041e4:	fb0c f101 	mul.w	r1, ip, r1
            specifier.precision = specifier.precision * 10 + (c - '0');
 80041e8:	9108      	str	r1, [sp, #32]
 80041ea:	e7b8      	b.n	800415e <vlc_print+0x3e>
            specifier.width = specifier.width * 10 + (c - '0');
 80041ec:	fb0c f202 	mul.w	r2, ip, r2
 80041f0:	9207      	str	r2, [sp, #28]
 80041f2:	e7b4      	b.n	800415e <vlc_print+0x3e>
          specifier.flags |= FLAG_NEG_PAD;
 80041f4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80041f6:	f042 0202 	orr.w	r2, r2, #2
 80041fa:	e7ee      	b.n	80041da <vlc_print+0xba>
            specifier.precision = specifier.precision * 10 + (c - '0');
 80041fc:	3930      	subs	r1, #48	@ 0x30
 80041fe:	f04f 0c0a 	mov.w	ip, #10
          if (has_precision) {
 8004202:	b118      	cbz	r0, 800420c <vlc_print+0xec>
            specifier.precision = specifier.precision * 10 + (c - '0');
 8004204:	9a08      	ldr	r2, [sp, #32]
 8004206:	fb0c 1102 	mla	r1, ip, r2, r1
 800420a:	e7ed      	b.n	80041e8 <vlc_print+0xc8>
            specifier.width = specifier.width * 10 + (c - '0');
 800420c:	9a07      	ldr	r2, [sp, #28]
 800420e:	fb0c 1102 	mla	r1, ip, r2, r1
 8004212:	9107      	str	r1, [sp, #28]
 8004214:	e7a3      	b.n	800415e <vlc_print+0x3e>
          long_type += 1;
 8004216:	3301      	adds	r3, #1
 8004218:	e7a1      	b.n	800415e <vlc_print+0x3e>
          switch(c)
 800421a:	3963      	subs	r1, #99	@ 0x63
 800421c:	2915      	cmp	r1, #21
 800421e:	d8c8      	bhi.n	80041b2 <vlc_print+0x92>
 8004220:	a201      	add	r2, pc, #4	@ (adr r2, 8004228 <vlc_print+0x108>)
 8004222:	f852 f021 	ldr.w	pc, [r2, r1, lsl #2]
 8004226:	bf00      	nop
 8004228:	08004295 	.word	0x08004295
 800422c:	08004355 	.word	0x08004355
 8004230:	080041b3 	.word	0x080041b3
 8004234:	08004367 	.word	0x08004367
 8004238:	080041b3 	.word	0x080041b3
 800423c:	080041b3 	.word	0x080041b3
 8004240:	08004355 	.word	0x08004355
 8004244:	080041b3 	.word	0x080041b3
 8004248:	080041b3 	.word	0x080041b3
 800424c:	080041b3 	.word	0x080041b3
 8004250:	080041b3 	.word	0x080041b3
 8004254:	080041b3 	.word	0x080041b3
 8004258:	080041b3 	.word	0x080041b3
 800425c:	08004329 	.word	0x08004329
 8004260:	080041b3 	.word	0x080041b3
 8004264:	080041b3 	.word	0x080041b3
 8004268:	0800429b 	.word	0x0800429b
 800426c:	080041b3 	.word	0x080041b3
 8004270:	08004281 	.word	0x08004281
 8004274:	080041b3 	.word	0x080041b3
 8004278:	080041b3 	.word	0x080041b3
 800427c:	0800433d 	.word	0x0800433d
                val = va_arg(vl, unsigned int);
 8004280:	46a0      	mov	r8, r4
 8004282:	2100      	movs	r1, #0
 8004284:	f858 0b04 	ldr.w	r0, [r8], #4
            count += _write_number(val, &specifier);
 8004288:	aa07      	add	r2, sp, #28
 800428a:	f7ff feb4 	bl	8003ff6 <_write_number>
            break;
 800428e:	4644      	mov	r4, r8
            count += _write_number(val, &specifier);
 8004290:	4405      	add	r5, r0
            break;
 8004292:	e025      	b.n	80042e0 <vlc_print+0x1c0>
            putc_fct(user, t);
 8004294:	f814 1b04 	ldrb.w	r1, [r4], #4
 8004298:	e754      	b.n	8004144 <vlc_print+0x24>
            if (!str) str = "(null)";
 800429a:	4ba6      	ldr	r3, [pc, #664]	@ (8004534 <vlc_print+0x414>)
            str = va_arg(vl, char*);
 800429c:	f854 bb04 	ldr.w	fp, [r4], #4
            if (!str) str = "(null)";
 80042a0:	f1bb 0f00 	cmp.w	fp, #0
 80042a4:	bf08      	it	eq
 80042a6:	469b      	moveq	fp, r3
  int len = strlen(str);
 80042a8:	4658      	mov	r0, fp
 80042aa:	f7fb ffe1 	bl	8000270 <strlen>
  if (specifier->precision) {
 80042ae:	9b08      	ldr	r3, [sp, #32]
  int len = strlen(str);
 80042b0:	4681      	mov	r9, r0
  if (specifier->precision) {
 80042b2:	b113      	cbz	r3, 80042ba <vlc_print+0x19a>
    len = (len > specifier->precision)?specifier->precision:len;
 80042b4:	4298      	cmp	r0, r3
 80042b6:	bfa8      	it	ge
 80042b8:	4699      	movge	r9, r3
  if (!(specifier->flags & FLAG_NEG_PAD)) {
 80042ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80042bc:	f013 0a02 	ands.w	sl, r3, #2
 80042c0:	d01b      	beq.n	80042fa <vlc_print+0x1da>
  int count = 0;
 80042c2:	f04f 0800 	mov.w	r8, #0
 80042c6:	465b      	mov	r3, fp
  for (int i = 0; i < len; i++) {
 80042c8:	eba3 020b 	sub.w	r2, r3, fp
 80042cc:	4591      	cmp	r9, r2
 80042ce:	dc16      	bgt.n	80042fe <vlc_print+0x1de>
 80042d0:	f1b9 0f00 	cmp.w	r9, #0
 80042d4:	bfa8      	it	ge
 80042d6:	44c8      	addge	r8, r9
  if (specifier->flags & FLAG_NEG_PAD) {
 80042d8:	f1ba 0f00 	cmp.w	sl, #0
 80042dc:	d121      	bne.n	8004322 <vlc_print+0x202>
            count += _write_string(str, &specifier);
 80042de:	4445      	add	r5, r8
          switch(c)
 80042e0:	9a04      	ldr	r2, [sp, #16]
 80042e2:	e724      	b.n	800412e <vlc_print+0xe>
      _WRITE_C(' ');
 80042e4:	2120      	movs	r1, #32
 80042e6:	4638      	mov	r0, r7
 80042e8:	47b0      	blx	r6
 80042ea:	f108 0801 	add.w	r8, r8, #1
    for(int i = len; i < specifier->width; i++) {
 80042ee:	9a07      	ldr	r2, [sp, #28]
 80042f0:	eb08 0309 	add.w	r3, r8, r9
 80042f4:	429a      	cmp	r2, r3
 80042f6:	dcf5      	bgt.n	80042e4 <vlc_print+0x1c4>
 80042f8:	e7e5      	b.n	80042c6 <vlc_print+0x1a6>
  int count = 0;
 80042fa:	46d0      	mov	r8, sl
 80042fc:	e7f7      	b.n	80042ee <vlc_print+0x1ce>
    _WRITE_C(*str++);
 80042fe:	f813 1b01 	ldrb.w	r1, [r3], #1
 8004302:	9300      	str	r3, [sp, #0]
 8004304:	4638      	mov	r0, r7
 8004306:	47b0      	blx	r6
 8004308:	9b00      	ldr	r3, [sp, #0]
  for (int i = 0; i < len; i++) {
 800430a:	e7dd      	b.n	80042c8 <vlc_print+0x1a8>
      _WRITE_C(' ');
 800430c:	2120      	movs	r1, #32
 800430e:	4638      	mov	r0, r7
 8004310:	47b0      	blx	r6
 8004312:	f108 0801 	add.w	r8, r8, #1
    for(int i = len; i < specifier->width; i++) {
 8004316:	9a07      	ldr	r2, [sp, #28]
 8004318:	eb09 0308 	add.w	r3, r9, r8
 800431c:	429a      	cmp	r2, r3
 800431e:	dcf5      	bgt.n	800430c <vlc_print+0x1ec>
 8004320:	e7dd      	b.n	80042de <vlc_print+0x1be>
 8004322:	eba9 0908 	sub.w	r9, r9, r8
 8004326:	e7f6      	b.n	8004316 <vlc_print+0x1f6>
            specifier.flags |= FLAG_ZERO_EXTEND;
 8004328:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800432a:	f043 0301 	orr.w	r3, r3, #1
 800432e:	9309      	str	r3, [sp, #36]	@ 0x24
            specifier.width = 8;
 8004330:	2308      	movs	r3, #8
 8004332:	9307      	str	r3, [sp, #28]
            specifier.flags |= FLAG_CAPS;
 8004334:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004336:	f043 0308 	orr.w	r3, r3, #8
 800433a:	9309      	str	r3, [sp, #36]	@ 0x24
            specifier.flags |= FLAG_HEX;
 800433c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
            count += _write_number(val, &specifier);
 800433e:	f854 0b04 	ldr.w	r0, [r4], #4
            specifier.flags |= FLAG_HEX;
 8004342:	f043 0310 	orr.w	r3, r3, #16
            count += _write_number(val, &specifier);
 8004346:	aa07      	add	r2, sp, #28
 8004348:	2100      	movs	r1, #0
            specifier.flags |= FLAG_HEX;
 800434a:	9309      	str	r3, [sp, #36]	@ 0x24
            count += _write_number(val, &specifier);
 800434c:	f7ff fe53 	bl	8003ff6 <_write_number>
 8004350:	4405      	add	r5, r0
            break;
 8004352:	e7c5      	b.n	80042e0 <vlc_print+0x1c0>
            specifier.flags |= FLAG_IS_SIGNED;
 8004354:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004356:	f042 0204 	orr.w	r2, r2, #4
 800435a:	9209      	str	r2, [sp, #36]	@ 0x24
                val = va_arg(vl, signed int);
 800435c:	6820      	ldr	r0, [r4, #0]
                val = va_arg(vl, unsigned int);
 800435e:	f104 0804 	add.w	r8, r4, #4
                val = va_arg(vl, signed int);
 8004362:	17c1      	asrs	r1, r0, #31
 8004364:	e790      	b.n	8004288 <vlc_print+0x168>
            dbl = va_arg(vl, double);
 8004366:	3407      	adds	r4, #7
 8004368:	f024 0407 	bic.w	r4, r4, #7
 800436c:	ecb4 7b02 	vldmia	r4!, {d7}
            if (specifier.precision == 0)
 8004370:	9b08      	ldr	r3, [sp, #32]
            dbl = va_arg(vl, double);
 8004372:	ed8d 7b00 	vstr	d7, [sp]
            if (specifier.precision == 0)
 8004376:	b90b      	cbnz	r3, 800437c <vlc_print+0x25c>
              specifier.precision = 6;
 8004378:	2306      	movs	r3, #6
 800437a:	9308      	str	r3, [sp, #32]
  for (int i=0;i <specifier->precision; i++)
 800437c:	f8dd 8020 	ldr.w	r8, [sp, #32]
  double mul = 1.0;
 8004380:	f8df b1bc 	ldr.w	fp, [pc, #444]	@ 8004540 <vlc_print+0x420>
  for (int i=0;i <specifier->precision; i++)
 8004384:	f04f 0900 	mov.w	r9, #0
  double mul = 1.0;
 8004388:	f04f 0a00 	mov.w	sl, #0
  for (int i=0;i <specifier->precision; i++)
 800438c:	45c1      	cmp	r9, r8
    mul *= 10;
 800438e:	f04f 0200 	mov.w	r2, #0
  for (int i=0;i <specifier->precision; i++)
 8004392:	f2c0 80b9 	blt.w	8004508 <vlc_print+0x3e8>
  if (is_signed)
 8004396:	e9dd 0100 	ldrd	r0, r1, [sp]
 800439a:	2300      	movs	r3, #0
 800439c:	f7fc fb9e 	bl	8000adc <__aeabi_dcmplt>
 80043a0:	2800      	cmp	r0, #0
 80043a2:	f000 80bb 	beq.w	800451c <vlc_print+0x3fc>
    number = -number;
 80043a6:	9b00      	ldr	r3, [sp, #0]
 80043a8:	9302      	str	r3, [sp, #8]
 80043aa:	9b01      	ldr	r3, [sp, #4]
 80043ac:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 80043b0:	9303      	str	r3, [sp, #12]
  number += (half_ / mul);
 80043b2:	4652      	mov	r2, sl
 80043b4:	465b      	mov	r3, fp
 80043b6:	4960      	ldr	r1, [pc, #384]	@ (8004538 <vlc_print+0x418>)
 80043b8:	2000      	movs	r0, #0
 80043ba:	f7fc fa47 	bl	800084c <__aeabi_ddiv>
 80043be:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80043c2:	f7fb ff63 	bl	800028c <__adddf3>
  val = (uint64_t)(number * mul);
 80043c6:	4652      	mov	r2, sl
 80043c8:	465b      	mov	r3, fp
 80043ca:	f7fc f915 	bl	80005f8 <__aeabi_dmul>
 80043ce:	f7fc fc03 	bl	8000bd8 <__aeabi_d2ulz>
  uint32_t count = 0;
 80043d2:	f04f 0900 	mov.w	r9, #0
  val = (uint64_t)(number * mul);
 80043d6:	4603      	mov	r3, r0
  uint32_t idx = sizeof(buf) - 1;
 80043d8:	f04f 0a3f 	mov.w	sl, #63	@ 0x3f
    uint64_t t = val / 10;
 80043dc:	469b      	mov	fp, r3
 80043de:	220a      	movs	r2, #10
 80043e0:	2300      	movs	r3, #0
 80043e2:	4658      	mov	r0, fp
 80043e4:	9105      	str	r1, [sp, #20]
 80043e6:	f7fc fbdf 	bl	8000ba8 <__aeabi_uldivmod>
    chr = (val - t * 10) + '0';
 80043ea:	f10b 0c30 	add.w	ip, fp, #48	@ 0x30
    uint64_t t = val / 10;
 80043ee:	4603      	mov	r3, r0
    chr = (val - t * 10) + '0';
 80043f0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80043f4:	ebac 0c40 	sub.w	ip, ip, r0, lsl #1
    buf[idx--] = chr;
 80043f8:	f10a 0070 	add.w	r0, sl, #112	@ 0x70
 80043fc:	4468      	add	r0, sp
 80043fe:	f10a 32ff 	add.w	r2, sl, #4294967295
 8004402:	f800 cc40 	strb.w	ip, [r0, #-64]
    count++;
 8004406:	f109 0001 	add.w	r0, r9, #1
    if (count == specifier->precision) {
 800440a:	4580      	cmp	r8, r0
      buf[idx--] = '.';
 800440c:	bf01      	itttt	eq
 800440e:	3270      	addeq	r2, #112	@ 0x70
 8004410:	446a      	addeq	r2, sp
 8004412:	202e      	moveq	r0, #46	@ 0x2e
 8004414:	f802 0c40 	strbeq.w	r0, [r2, #-64]
    buf[idx--] = chr;
 8004418:	bf18      	it	ne
 800441a:	4692      	movne	sl, r2
  } while (val);
 800441c:	9a05      	ldr	r2, [sp, #20]
      buf[idx--] = '.';
 800441e:	bf06      	itte	eq
 8004420:	f1aa 0a02 	subeq.w	sl, sl, #2
      count++;
 8004424:	f109 0902 	addeq.w	r9, r9, #2
    count++;
 8004428:	4681      	movne	r9, r0
  } while (val);
 800442a:	f1bb 0f0a 	cmp.w	fp, #10
 800442e:	f172 0200 	sbcs.w	r2, r2, #0
 8004432:	d2d3      	bcs.n	80043dc <vlc_print+0x2bc>
    buf[idx--] = '0';
 8004434:	45c1      	cmp	r9, r8
 8004436:	f1c8 0001 	rsb	r0, r8, #1
 800443a:	4448      	add	r0, r9
 800443c:	f04f 0130 	mov.w	r1, #48	@ 0x30
 8004440:	bf88      	it	hi
 8004442:	2001      	movhi	r0, #1
 8004444:	eba8 0b09 	sub.w	fp, r8, r9
 8004448:	eb0d 0301 	add.w	r3, sp, r1
 800444c:	bf88      	it	hi
 800444e:	f04f 0b00 	movhi.w	fp, #0
 8004452:	4450      	add	r0, sl
 8004454:	4418      	add	r0, r3
 8004456:	465a      	mov	r2, fp
 8004458:	f005 f92d 	bl	80096b6 <memset>
 800445c:	eba9 0308 	sub.w	r3, r9, r8
 8004460:	45c1      	cmp	r9, r8
 8004462:	bf88      	it	hi
 8004464:	2300      	movhi	r3, #0
 8004466:	44d9      	add	r9, fp
  if (count == specifier->precision) {
 8004468:	45c8      	cmp	r8, r9
 800446a:	449a      	add	sl, r3
 800446c:	f108 0801 	add.w	r8, r8, #1
 8004470:	d108      	bne.n	8004484 <vlc_print+0x364>
    buf[idx--] = '.';
 8004472:	f10a 0370 	add.w	r3, sl, #112	@ 0x70
 8004476:	446b      	add	r3, sp
 8004478:	222e      	movs	r2, #46	@ 0x2e
 800447a:	f803 2c40 	strb.w	r2, [r3, #-64]
    count++;
 800447e:	46c1      	mov	r9, r8
    buf[idx--] = '.';
 8004480:	f10a 3aff 	add.w	sl, sl, #4294967295
  if (count == specifier->precision + 1)
 8004484:	45c8      	cmp	r8, r9
 8004486:	d109      	bne.n	800449c <vlc_print+0x37c>
    buf[idx--] = '0';
 8004488:	f10a 0370 	add.w	r3, sl, #112	@ 0x70
 800448c:	446b      	add	r3, sp
 800448e:	2230      	movs	r2, #48	@ 0x30
 8004490:	f803 2c40 	strb.w	r2, [r3, #-64]
    count++;
 8004494:	f109 0901 	add.w	r9, r9, #1
    buf[idx--] = '0';
 8004498:	f10a 3aff 	add.w	sl, sl, #4294967295
  if (is_signed) {
 800449c:	e9dd 0100 	ldrd	r0, r1, [sp]
 80044a0:	2200      	movs	r2, #0
 80044a2:	2300      	movs	r3, #0
 80044a4:	f7fc fb1a 	bl	8000adc <__aeabi_dcmplt>
 80044a8:	b148      	cbz	r0, 80044be <vlc_print+0x39e>
    buf[idx--] = '-';
 80044aa:	f10a 0370 	add.w	r3, sl, #112	@ 0x70
 80044ae:	446b      	add	r3, sp
 80044b0:	222d      	movs	r2, #45	@ 0x2d
 80044b2:	f803 2c40 	strb.w	r2, [r3, #-64]
    count++;
 80044b6:	f109 0901 	add.w	r9, r9, #1
    buf[idx--] = '-';
 80044ba:	f10a 3aff 	add.w	sl, sl, #4294967295
  while (count < specifier->width) {
 80044be:	f8dd 801c 	ldr.w	r8, [sp, #28]
    buf[idx--] = ' ';
 80044c2:	45c8      	cmp	r8, r9
 80044c4:	f1c8 0001 	rsb	r0, r8, #1
 80044c8:	4448      	add	r0, r9
 80044ca:	bf38      	it	cc
 80044cc:	2001      	movcc	r0, #1
 80044ce:	eba8 0b09 	sub.w	fp, r8, r9
 80044d2:	ab0c      	add	r3, sp, #48	@ 0x30
 80044d4:	bf38      	it	cc
 80044d6:	f04f 0b00 	movcc.w	fp, #0
 80044da:	4450      	add	r0, sl
 80044dc:	465a      	mov	r2, fp
 80044de:	4418      	add	r0, r3
 80044e0:	2120      	movs	r1, #32
 80044e2:	f005 f8e8 	bl	80096b6 <memset>
 80044e6:	eba9 0308 	sub.w	r3, r9, r8
 80044ea:	45c8      	cmp	r8, r9
 80044ec:	bf38      	it	cc
 80044ee:	2300      	movcc	r3, #0
 80044f0:	4453      	add	r3, sl
 80044f2:	44cb      	add	fp, r9
  for(int i = 0; i < count; i++) {
 80044f4:	aa0c      	add	r2, sp, #48	@ 0x30
 80044f6:	eb02 0803 	add.w	r8, r2, r3
 80044fa:	445b      	add	r3, fp
 80044fc:	eb03 0902 	add.w	r9, r3, r2
 8004500:	45c1      	cmp	r9, r8
 8004502:	d110      	bne.n	8004526 <vlc_print+0x406>
            count += _write_double(dbl, &specifier);
 8004504:	445d      	add	r5, fp
            break;
 8004506:	e6eb      	b.n	80042e0 <vlc_print+0x1c0>
    mul *= 10;
 8004508:	4650      	mov	r0, sl
 800450a:	4659      	mov	r1, fp
 800450c:	4b0b      	ldr	r3, [pc, #44]	@ (800453c <vlc_print+0x41c>)
 800450e:	f7fc f873 	bl	80005f8 <__aeabi_dmul>
  for (int i=0;i <specifier->precision; i++)
 8004512:	f109 0901 	add.w	r9, r9, #1
    mul *= 10;
 8004516:	4682      	mov	sl, r0
 8004518:	468b      	mov	fp, r1
  for (int i=0;i <specifier->precision; i++)
 800451a:	e737      	b.n	800438c <vlc_print+0x26c>
 800451c:	ed9d 7b00 	vldr	d7, [sp]
 8004520:	ed8d 7b02 	vstr	d7, [sp, #8]
 8004524:	e745      	b.n	80043b2 <vlc_print+0x292>
    specifier->putc_fct(specifier->user, (buf + idx)[i]);
 8004526:	f818 1f01 	ldrb.w	r1, [r8, #1]!
 800452a:	4638      	mov	r0, r7
 800452c:	47b0      	blx	r6
  for(int i = 0; i < count; i++) {
 800452e:	e7e7      	b.n	8004500 <vlc_print+0x3e0>
        if (!c)
 8004530:	2001      	movs	r0, #1
 8004532:	e614      	b.n	800415e <vlc_print+0x3e>
 8004534:	0800c5f8 	.word	0x0800c5f8
 8004538:	3fe00000 	.word	0x3fe00000
 800453c:	40240000 	.word	0x40240000
 8004540:	3ff00000 	.word	0x3ff00000

08004544 <ai_network_get_report>:


AI_API_ENTRY
ai_bool ai_network_get_report(
  ai_handle network, ai_network_report* report)
{
 8004544:	b570      	push	{r4, r5, r6, lr}
 8004546:	b0a2      	sub	sp, #136	@ 0x88
 8004548:	4606      	mov	r6, r0
 800454a:	460d      	mov	r5, r1
  ai_network* net_ctx = AI_NETWORK_ACQUIRE_CTX(network);
 800454c:	f000 fb3e 	bl	8004bcc <ai_platform_context_acquire>
 8004550:	4604      	mov	r4, r0

  if (report && net_ctx)
 8004552:	2d00      	cmp	r5, #0
 8004554:	d035      	beq.n	80045c2 <ai_network_get_report+0x7e>
 8004556:	2800      	cmp	r0, #0
 8004558:	d030      	beq.n	80045bc <ai_network_get_report+0x78>
  {
    ai_network_report r = {
 800455a:	2278      	movs	r2, #120	@ 0x78
 800455c:	2100      	movs	r1, #0
 800455e:	a804      	add	r0, sp, #16
 8004560:	f005 f8a9 	bl	80096b6 <memset>
 8004564:	4b18      	ldr	r3, [pc, #96]	@ (80045c8 <ai_network_get_report+0x84>)
 8004566:	9300      	str	r3, [sp, #0]
 8004568:	4b18      	ldr	r3, [pc, #96]	@ (80045cc <ai_network_get_report+0x88>)
 800456a:	9301      	str	r3, [sp, #4]
 800456c:	4b18      	ldr	r3, [pc, #96]	@ (80045d0 <ai_network_get_report+0x8c>)
 800456e:	9302      	str	r3, [sp, #8]
 8004570:	4b18      	ldr	r3, [pc, #96]	@ (80045d4 <ai_network_get_report+0x90>)
 8004572:	9303      	str	r3, [sp, #12]
      .model_signature   = AI_NETWORK_MODEL_SIGNATURE,
      .model_datetime    = AI_TOOLS_DATE_TIME,
      
      .compile_datetime  = AI_TOOLS_COMPILE_TIME,
      
      .runtime_revision  = ai_platform_runtime_get_revision(),
 8004574:	f000 faf6 	bl	8004b64 <ai_platform_runtime_get_revision>
    ai_network_report r = {
 8004578:	9004      	str	r0, [sp, #16]
      .runtime_version   = ai_platform_runtime_get_version(),
 800457a:	f000 faf7 	bl	8004b6c <ai_platform_runtime_get_version>
    ai_network_report r = {
 800457e:	4b16      	ldr	r3, [pc, #88]	@ (80045d8 <ai_network_get_report+0x94>)
 8004580:	9306      	str	r3, [sp, #24]
 8004582:	2309      	movs	r3, #9
 8004584:	f88d 301c 	strb.w	r3, [sp, #28]
      .runtime_version   = ai_platform_runtime_get_version(),
 8004588:	9005      	str	r0, [sp, #20]
      .tool_revision     = AI_TOOLS_REVISION_ID,
      .tool_version      = {AI_TOOLS_VERSION_MAJOR, AI_TOOLS_VERSION_MINOR,
                            AI_TOOLS_VERSION_MICRO, 0x0},
      .tool_api_version  = AI_STRUCT_INIT,

      .api_version            = ai_platform_api_get_version(),
 800458a:	f000 faf3 	bl	8004b74 <ai_platform_api_get_version>
 800458e:	9009      	str	r0, [sp, #36]	@ 0x24
      .interface_api_version  = ai_platform_interface_api_get_version(),
 8004590:	f000 fb06 	bl	8004ba0 <ai_platform_interface_api_get_version>
    ai_network_report r = {
 8004594:	4a11      	ldr	r2, [pc, #68]	@ (80045dc <ai_network_get_report+0x98>)
      .interface_api_version  = ai_platform_interface_api_get_version(),
 8004596:	900a      	str	r0, [sp, #40]	@ 0x28
    ai_network_report r = {
 8004598:	2300      	movs	r3, #0
 800459a:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800459e:	4b10      	ldr	r3, [pc, #64]	@ (80045e0 <ai_network_get_report+0x9c>)
 80045a0:	9311      	str	r3, [sp, #68]	@ 0x44
      .map_activations   = AI_STRUCT_INIT,
      .n_nodes           = 0,
      .signature         = 0x062cdc93,
    };

    if (!ai_platform_api_get_network_report(network, &r)) return false;
 80045a2:	4669      	mov	r1, sp
    ai_network_report r = {
 80045a4:	4b0f      	ldr	r3, [pc, #60]	@ (80045e4 <ai_network_get_report+0xa0>)
 80045a6:	9320      	str	r3, [sp, #128]	@ 0x80
    if (!ai_platform_api_get_network_report(network, &r)) return false;
 80045a8:	4630      	mov	r0, r6
 80045aa:	f000 fb29 	bl	8004c00 <ai_platform_api_get_network_report>
 80045ae:	4604      	mov	r4, r0
 80045b0:	b120      	cbz	r0, 80045bc <ai_network_get_report+0x78>

    *report = r;
 80045b2:	2288      	movs	r2, #136	@ 0x88
 80045b4:	4669      	mov	r1, sp
 80045b6:	4628      	mov	r0, r5
 80045b8:	f005 f97b 	bl	80098b2 <memcpy>
    return true;
  }
  return false;
}
 80045bc:	4620      	mov	r0, r4
 80045be:	b022      	add	sp, #136	@ 0x88
 80045c0:	bd70      	pop	{r4, r5, r6, pc}
  return false;
 80045c2:	462c      	mov	r4, r5
 80045c4:	e7fa      	b.n	80045bc <ai_network_get_report+0x78>
 80045c6:	bf00      	nop
 80045c8:	0800c5c4 	.word	0x0800c5c4
 80045cc:	0800c5ff 	.word	0x0800c5ff
 80045d0:	0800c622 	.word	0x0800c622
 80045d4:	0800c63b 	.word	0x0800c63b
 80045d8:	0800c577 	.word	0x0800c577
 80045dc:	00023af1 	.word	0x00023af1
 80045e0:	a1facade 	.word	0xa1facade
 80045e4:	062cdc93 	.word	0x062cdc93

080045e8 <ai_network_get_error>:


AI_API_ENTRY
ai_error ai_network_get_error(ai_handle network)
{
  return ai_platform_network_get_error(network);
 80045e8:	f000 baf8 	b.w	8004bdc <ai_platform_network_get_error>

080045ec <ai_network_create>:


AI_API_ENTRY
ai_error ai_network_create(
  ai_handle* network, const ai_buffer* network_config)
{
 80045ec:	b507      	push	{r0, r1, r2, lr}
  return ai_platform_network_create(
 80045ee:	2305      	movs	r3, #5
 80045f0:	2200      	movs	r2, #0
 80045f2:	e9cd 3200 	strd	r3, r2, [sp]
 80045f6:	4a03      	ldr	r2, [pc, #12]	@ (8004604 <ai_network_create+0x18>)
 80045f8:	2301      	movs	r3, #1
 80045fa:	f000 fcaf 	bl	8004f5c <ai_platform_network_create>
    network, network_config, 
    AI_CONTEXT_OBJ(&AI_NET_OBJ_INSTANCE),
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 80045fe:	b003      	add	sp, #12
 8004600:	f85d fb04 	ldr.w	pc, [sp], #4
 8004604:	20003450 	.word	0x20003450

08004608 <ai_network_destroy>:


AI_API_ENTRY
ai_handle ai_network_destroy(ai_handle network)
{
  return ai_platform_network_destroy(network);
 8004608:	f000 bcea 	b.w	8004fe0 <ai_platform_network_destroy>

0800460c <ai_network_init>:


AI_API_ENTRY
ai_bool ai_network_init(
  ai_handle network, const ai_network_params* params)
{
 800460c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004610:	4606      	mov	r6, r0
 8004612:	460f      	mov	r7, r1
  ai_network* net_ctx = AI_NETWORK_OBJ(ai_platform_network_init(network, params));
 8004614:	f000 fcf6 	bl	8005004 <ai_platform_network_init>
  ai_bool ok = true;

  if (!net_ctx) return false;
 8004618:	4604      	mov	r4, r0
 800461a:	2800      	cmp	r0, #0
 800461c:	f000 80b8 	beq.w	8004790 <ai_network_init+0x184>
  if (ai_platform_get_weights_map(g_network_weights_map, 1, params)) {
 8004620:	f8df 81e0 	ldr.w	r8, [pc, #480]	@ 8004804 <ai_network_init+0x1f8>
 8004624:	463a      	mov	r2, r7
 8004626:	2101      	movs	r1, #1
 8004628:	4640      	mov	r0, r8
 800462a:	f000 f9d1 	bl	80049d0 <ai_platform_get_weights_map>
 800462e:	4605      	mov	r5, r0
 8004630:	2800      	cmp	r0, #0
 8004632:	f000 80af 	beq.w	8004794 <ai_network_init+0x188>
    backward_lstm_kernel_array.format |= AI_FMT_FLAG_CONST;
 8004636:	4a5d      	ldr	r2, [pc, #372]	@ (80047ac <ai_network_init+0x1a0>)
 8004638:	6813      	ldr	r3, [r2, #0]
 800463a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800463e:	6013      	str	r3, [r2, #0]
    backward_lstm_kernel_array.data = AI_PTR(g_network_weights_map[0] + 0);
 8004640:	f8d8 3000 	ldr.w	r3, [r8]
    backward_lstm_kernel_array.data_start = AI_PTR(g_network_weights_map[0] + 0);
 8004644:	e9c2 3302 	strd	r3, r3, [r2, #8]
    backward_lstm_recurrent_array.format |= AI_FMT_FLAG_CONST;
 8004648:	4a59      	ldr	r2, [pc, #356]	@ (80047b0 <ai_network_init+0x1a4>)
 800464a:	6811      	ldr	r1, [r2, #0]
 800464c:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8004650:	6011      	str	r1, [r2, #0]
    backward_lstm_recurrent_array.data = AI_PTR(g_network_weights_map[0] + 320);
 8004652:	f503 71a0 	add.w	r1, r3, #320	@ 0x140
    backward_lstm_recurrent_array.data_start = AI_PTR(g_network_weights_map[0] + 320);
 8004656:	e9c2 1102 	strd	r1, r1, [r2, #8]
    backward_lstm_peephole_array.format |= AI_FMT_FLAG_CONST;
 800465a:	4a56      	ldr	r2, [pc, #344]	@ (80047b4 <ai_network_init+0x1a8>)
 800465c:	6811      	ldr	r1, [r2, #0]
 800465e:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8004662:	6011      	str	r1, [r2, #0]
    backward_lstm_peephole_array.data = AI_PTR(g_network_weights_map[0] + 6720);
 8004664:	f503 51d2 	add.w	r1, r3, #6720	@ 0x1a40
    backward_lstm_peephole_array.data_start = AI_PTR(g_network_weights_map[0] + 6720);
 8004668:	e9c2 1102 	strd	r1, r1, [r2, #8]
    backward_lstm_bias_array.format |= AI_FMT_FLAG_CONST;
 800466c:	4a52      	ldr	r2, [pc, #328]	@ (80047b8 <ai_network_init+0x1ac>)
 800466e:	6811      	ldr	r1, [r2, #0]
 8004670:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8004674:	6011      	str	r1, [r2, #0]
    backward_lstm_bias_array.data = AI_PTR(g_network_weights_map[0] + 6960);
 8004676:	f503 51d9 	add.w	r1, r3, #6944	@ 0x1b20
 800467a:	3110      	adds	r1, #16
    backward_lstm_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 6960);
 800467c:	e9c2 1102 	strd	r1, r1, [r2, #8]
    forward_lstm_kernel_array.format |= AI_FMT_FLAG_CONST;
 8004680:	4a4e      	ldr	r2, [pc, #312]	@ (80047bc <ai_network_init+0x1b0>)
 8004682:	6811      	ldr	r1, [r2, #0]
 8004684:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8004688:	6011      	str	r1, [r2, #0]
    forward_lstm_kernel_array.data = AI_PTR(g_network_weights_map[0] + 7280);
 800468a:	f503 51e3 	add.w	r1, r3, #7264	@ 0x1c60
 800468e:	3110      	adds	r1, #16
    forward_lstm_kernel_array.data_start = AI_PTR(g_network_weights_map[0] + 7280);
 8004690:	e9c2 1102 	strd	r1, r1, [r2, #8]
    forward_lstm_recurrent_array.format |= AI_FMT_FLAG_CONST;
 8004694:	4a4a      	ldr	r2, [pc, #296]	@ (80047c0 <ai_network_init+0x1b4>)
 8004696:	6811      	ldr	r1, [r2, #0]
 8004698:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 800469c:	6011      	str	r1, [r2, #0]
    forward_lstm_recurrent_array.data = AI_PTR(g_network_weights_map[0] + 7600);
 800469e:	f503 51ed 	add.w	r1, r3, #7584	@ 0x1da0
 80046a2:	3110      	adds	r1, #16
    forward_lstm_recurrent_array.data_start = AI_PTR(g_network_weights_map[0] + 7600);
 80046a4:	e9c2 1102 	strd	r1, r1, [r2, #8]
    forward_lstm_bias_array.format |= AI_FMT_FLAG_CONST;
 80046a8:	4a46      	ldr	r2, [pc, #280]	@ (80047c4 <ai_network_init+0x1b8>)
 80046aa:	6811      	ldr	r1, [r2, #0]
 80046ac:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 80046b0:	6011      	str	r1, [r2, #0]
    forward_lstm_bias_array.data = AI_PTR(g_network_weights_map[0] + 14000);
 80046b2:	f503 515a 	add.w	r1, r3, #13952	@ 0x3680
 80046b6:	3130      	adds	r1, #48	@ 0x30
    forward_lstm_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 14000);
 80046b8:	e9c2 1102 	strd	r1, r1, [r2, #8]
    dense_dense_weights_array.format |= AI_FMT_FLAG_CONST;
 80046bc:	4a42      	ldr	r2, [pc, #264]	@ (80047c8 <ai_network_init+0x1bc>)
 80046be:	6811      	ldr	r1, [r2, #0]
 80046c0:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 80046c4:	6011      	str	r1, [r2, #0]
    dense_dense_weights_array.data = AI_PTR(g_network_weights_map[0] + 14320);
 80046c6:	f503 515f 	add.w	r1, r3, #14272	@ 0x37c0
 80046ca:	3130      	adds	r1, #48	@ 0x30
    dense_dense_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 14320);
 80046cc:	e9c2 1102 	strd	r1, r1, [r2, #8]
    dense_dense_bias_array.format |= AI_FMT_FLAG_CONST;
 80046d0:	4a3e      	ldr	r2, [pc, #248]	@ (80047cc <ai_network_init+0x1c0>)
 80046d2:	6811      	ldr	r1, [r2, #0]
 80046d4:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 80046d8:	6011      	str	r1, [r2, #0]
    dense_dense_bias_array.data = AI_PTR(g_network_weights_map[0] + 22320);
 80046da:	f503 41ae 	add.w	r1, r3, #22272	@ 0x5700
 80046de:	3130      	adds	r1, #48	@ 0x30
    dense_dense_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 22320);
 80046e0:	e9c2 1102 	strd	r1, r1, [r2, #8]
    dense_1_dense_weights_array.format |= AI_FMT_FLAG_CONST;
 80046e4:	4a3a      	ldr	r2, [pc, #232]	@ (80047d0 <ai_network_init+0x1c4>)
 80046e6:	6811      	ldr	r1, [r2, #0]
 80046e8:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 80046ec:	6011      	str	r1, [r2, #0]
    dense_1_dense_weights_array.data = AI_PTR(g_network_weights_map[0] + 22520);
 80046ee:	f503 41af 	add.w	r1, r3, #22400	@ 0x5780
 80046f2:	3178      	adds	r1, #120	@ 0x78
    dense_1_dense_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 22520);
 80046f4:	e9c2 1102 	strd	r1, r1, [r2, #8]
    dense_1_dense_bias_array.format |= AI_FMT_FLAG_CONST;
 80046f8:	4a36      	ldr	r2, [pc, #216]	@ (80047d4 <ai_network_init+0x1c8>)
    dense_1_dense_bias_array.data = AI_PTR(g_network_weights_map[0] + 22720);
 80046fa:	f503 43b1 	add.w	r3, r3, #22656	@ 0x5880
    dense_1_dense_bias_array.format |= AI_FMT_FLAG_CONST;
 80046fe:	6811      	ldr	r1, [r2, #0]
    dense_1_dense_bias_array.data = AI_PTR(g_network_weights_map[0] + 22720);
 8004700:	3340      	adds	r3, #64	@ 0x40
    dense_1_dense_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 22720);
 8004702:	e9c2 3302 	strd	r3, r3, [r2, #8]
    dense_1_dense_bias_array.format |= AI_FMT_FLAG_CONST;
 8004706:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 800470a:	6011      	str	r1, [r2, #0]
  if (ai_platform_get_activations_map(g_network_activations_map, 1, params)) {
 800470c:	f8df 80f8 	ldr.w	r8, [pc, #248]	@ 8004808 <ai_network_init+0x1fc>
 8004710:	463a      	mov	r2, r7
 8004712:	2101      	movs	r1, #1
 8004714:	4640      	mov	r0, r8
 8004716:	f000 f9af 	bl	8004a78 <ai_platform_get_activations_map>
 800471a:	4607      	mov	r7, r0
 800471c:	2800      	cmp	r0, #0
 800471e:	d03f      	beq.n	80047a0 <ai_network_init+0x194>
    backward_lstm_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8004720:	f8d8 3000 	ldr.w	r3, [r8]
 8004724:	4a2c      	ldr	r2, [pc, #176]	@ (80047d8 <ai_network_init+0x1cc>)
    input_0_output_array.data = AI_PTR(g_network_activations_map[0] + 6800);
 8004726:	492d      	ldr	r1, [pc, #180]	@ (80047dc <ai_network_init+0x1d0>)
    forward_lstm_output0_array.data = AI_PTR(g_network_activations_map[0] + 10160);
 8004728:	482d      	ldr	r0, [pc, #180]	@ (80047e0 <ai_network_init+0x1d4>)
    backward_lstm_scratch0_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 800472a:	e9c2 3302 	strd	r3, r3, [r2, #8]
    forward_lstm_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 800472e:	4a2d      	ldr	r2, [pc, #180]	@ (80047e4 <ai_network_init+0x1d8>)
    forward_lstm_scratch0_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 8004730:	e9c2 3302 	strd	r3, r3, [r2, #8]
    input_0_output_array.data = AI_PTR(g_network_activations_map[0] + 6800);
 8004734:	f503 52d4 	add.w	r2, r3, #6784	@ 0x1a80
 8004738:	3210      	adds	r2, #16
    input_0_output_array.data_start = AI_PTR(g_network_activations_map[0] + 6800);
 800473a:	e9c1 2202 	strd	r2, r2, [r1, #8]
    backward_lstm_output0_array.data = AI_PTR(g_network_activations_map[0] + 6960);
 800473e:	4a2a      	ldr	r2, [pc, #168]	@ (80047e8 <ai_network_init+0x1dc>)
 8004740:	f503 51d9 	add.w	r1, r3, #6944	@ 0x1b20
 8004744:	3110      	adds	r1, #16
    backward_lstm_output0_array.data_start = AI_PTR(g_network_activations_map[0] + 6960);
 8004746:	e9c2 1102 	strd	r1, r1, [r2, #8]
    forward_lstm_output0_array.data = AI_PTR(g_network_activations_map[0] + 10160);
 800474a:	f503 521e 	add.w	r2, r3, #10112	@ 0x2780
 800474e:	3230      	adds	r2, #48	@ 0x30
    forward_lstm_output0_array.data_start = AI_PTR(g_network_activations_map[0] + 10160);
 8004750:	e9c0 2202 	strd	r2, r2, [r0, #8]
    bidirectional_output_array.data = AI_PTR(g_network_activations_map[0] + 560);
 8004754:	4825      	ldr	r0, [pc, #148]	@ (80047ec <ai_network_init+0x1e0>)
 8004756:	f503 720c 	add.w	r2, r3, #560	@ 0x230
    bidirectional_output_array.data_start = AI_PTR(g_network_activations_map[0] + 560);
 800475a:	e9c0 2202 	strd	r2, r2, [r0, #8]
    global_max_pooling1d_pool_output_array.data = AI_PTR(g_network_activations_map[0] + 6960);
 800475e:	4824      	ldr	r0, [pc, #144]	@ (80047f0 <ai_network_init+0x1e4>)
    global_max_pooling1d_pool_output_array.data_start = AI_PTR(g_network_activations_map[0] + 6960);
 8004760:	e9c0 1102 	strd	r1, r1, [r0, #8]
    dense_dense_output_array.data = AI_PTR(g_network_activations_map[0] + 560);
 8004764:	4923      	ldr	r1, [pc, #140]	@ (80047f4 <ai_network_init+0x1e8>)
    dense_dense_output_array.data_start = AI_PTR(g_network_activations_map[0] + 560);
 8004766:	e9c1 2202 	strd	r2, r2, [r1, #8]
    dense_output_array.data = AI_PTR(g_network_activations_map[0] + 760);
 800476a:	4923      	ldr	r1, [pc, #140]	@ (80047f8 <ai_network_init+0x1ec>)
 800476c:	f503 703e 	add.w	r0, r3, #760	@ 0x2f8
    dense_output_array.data_start = AI_PTR(g_network_activations_map[0] + 760);
 8004770:	e9c1 0002 	strd	r0, r0, [r1, #8]
    dense_1_dense_output_array.data = AI_PTR(g_network_activations_map[0] + 560);
 8004774:	4921      	ldr	r1, [pc, #132]	@ (80047fc <ai_network_init+0x1f0>)
    dense_1_dense_output_array.data_start = AI_PTR(g_network_activations_map[0] + 560);
 8004776:	e9c1 2202 	strd	r2, r2, [r1, #8]
    dense_1_output_array.data = AI_PTR(g_network_activations_map[0] + 564);
 800477a:	4a21      	ldr	r2, [pc, #132]	@ (8004800 <ai_network_init+0x1f4>)
 800477c:	f503 730d 	add.w	r3, r3, #564	@ 0x234
    dense_1_output_array.data_start = AI_PTR(g_network_activations_map[0] + 564);
 8004780:	e9c2 3302 	strd	r3, r3, [r2, #8]
  ok &= network_configure_weights(net_ctx, params);
  ok &= network_configure_activations(net_ctx, params);

  ok &= ai_platform_network_post_init(network);
 8004784:	4630      	mov	r0, r6
 8004786:	f000 fd0b 	bl	80051a0 <ai_platform_network_post_init>
 800478a:	4038      	ands	r0, r7
 800478c:	4005      	ands	r5, r0
 800478e:	b2e8      	uxtb	r0, r5

  return ok;
}
 8004790:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_WEIGHTS);
 8004794:	2212      	movs	r2, #18
 8004796:	2130      	movs	r1, #48	@ 0x30
 8004798:	4620      	mov	r0, r4
 800479a:	f000 fa2b 	bl	8004bf4 <ai_platform_network_set_error>
  return false;
 800479e:	e7b5      	b.n	800470c <ai_network_init+0x100>
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_ACTIVATIONS);
 80047a0:	2213      	movs	r2, #19
 80047a2:	2130      	movs	r1, #48	@ 0x30
 80047a4:	4620      	mov	r0, r4
 80047a6:	f000 fa25 	bl	8004bf4 <ai_platform_network_set_error>
  return false;
 80047aa:	e7eb      	b.n	8004784 <ai_network_init+0x178>
 80047ac:	20003e90 	.word	0x20003e90
 80047b0:	20003e80 	.word	0x20003e80
 80047b4:	20003e70 	.word	0x20003e70
 80047b8:	20003e60 	.word	0x20003e60
 80047bc:	20003e50 	.word	0x20003e50
 80047c0:	20003e40 	.word	0x20003e40
 80047c4:	20003e30 	.word	0x20003e30
 80047c8:	20003e20 	.word	0x20003e20
 80047cc:	20003e10 	.word	0x20003e10
 80047d0:	20003e00 	.word	0x20003e00
 80047d4:	20003df0 	.word	0x20003df0
 80047d8:	20003de0 	.word	0x20003de0
 80047dc:	20003f20 	.word	0x20003f20
 80047e0:	20003f00 	.word	0x20003f00
 80047e4:	20003dd0 	.word	0x20003dd0
 80047e8:	20003f10 	.word	0x20003f10
 80047ec:	20003ef0 	.word	0x20003ef0
 80047f0:	20003ee0 	.word	0x20003ee0
 80047f4:	20003ed0 	.word	0x20003ed0
 80047f8:	20003ec0 	.word	0x20003ec0
 80047fc:	20003eb0 	.word	0x20003eb0
 8004800:	20003ea0 	.word	0x20003ea0
 8004804:	20004414 	.word	0x20004414
 8004808:	20004418 	.word	0x20004418

0800480c <ai_network_run>:

AI_API_ENTRY
ai_i32 ai_network_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
  return ai_platform_network_process(network, input, output);
 800480c:	f000 bcf8 	b.w	8005200 <ai_platform_network_process>

08004810 <ai_network_forward>:


AI_API_ENTRY
ai_i32 ai_network_forward(ai_handle network, const ai_buffer* input)
{
  return ai_platform_network_process(network, input, NULL);
 8004810:	2200      	movs	r2, #0
 8004812:	f000 bcf5 	b.w	8005200 <ai_platform_network_process>
	...

08004818 <ai_network_data_params_get>:
 * @ingroup network_data
 * @return true if a valid configuration is present, false otherwise
 */
AI_API_ENTRY
ai_bool ai_network_data_params_get(ai_network_params* params)
{
 8004818:	b530      	push	{r4, r5, lr}
  if (!params) return false;
 800481a:	4603      	mov	r3, r0
{
 800481c:	b085      	sub	sp, #20
  if (!params) return false;
 800481e:	b170      	cbz	r0, 800483e <ai_network_data_params_get+0x26>
  
  const ai_buffer_array map_activations = 
 8004820:	4c08      	ldr	r4, [pc, #32]	@ (8004844 <ai_network_data_params_get+0x2c>)
 8004822:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004826:	466a      	mov	r2, sp
 8004828:	e882 0003 	stmia.w	r2, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_NETWORK_DATA_ACTIVATIONS_COUNT, g_network_data_map_activations);
  
  const ai_buffer_array map_weights = 
 800482c:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
 8004830:	ad02      	add	r5, sp, #8
 8004832:	e885 0003 	stmia.w	r5, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_NETWORK_DATA_WEIGHTS_COUNT, g_network_data_map_weights);

  return ai_platform_bind_network_params(params, &map_weights, &map_activations);
 8004836:	4629      	mov	r1, r5
 8004838:	4618      	mov	r0, r3
 800483a:	f000 f971 	bl	8004b20 <ai_platform_bind_network_params>
}
 800483e:	b005      	add	sp, #20
 8004840:	bd30      	pop	{r4, r5, pc}
 8004842:	bf00      	nop
 8004844:	0800c53c 	.word	0x0800c53c

08004848 <ai_buffer_get_size>:
 8004848:	b378      	cbz	r0, 80048aa <ai_buffer_get_size+0x62>
 800484a:	b410      	push	{r4}
 800484c:	6803      	ldr	r3, [r0, #0]
 800484e:	4a17      	ldr	r2, [pc, #92]	@ (80048ac <ai_buffer_get_size+0x64>)
 8004850:	f023 437e 	bic.w	r3, r3, #4261412864	@ 0xfe000000
 8004854:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8004858:	4293      	cmp	r3, r2
 800485a:	d01e      	beq.n	800489a <ai_buffer_get_size+0x52>
 800485c:	6984      	ldr	r4, [r0, #24]
 800485e:	6862      	ldr	r2, [r4, #4]
 8004860:	7d03      	ldrb	r3, [r0, #20]
 8004862:	6941      	ldr	r1, [r0, #20]
 8004864:	f1a3 0301 	sub.w	r3, r3, #1
 8004868:	fab3 f383 	clz	r3, r3
 800486c:	095b      	lsrs	r3, r3, #5
 800486e:	ebb3 2f11 	cmp.w	r3, r1, lsr #8
 8004872:	f3c1 2017 	ubfx	r0, r1, #8, #24
 8004876:	da0b      	bge.n	8004890 <ai_buffer_get_size+0x48>
 8004878:	2b01      	cmp	r3, #1
 800487a:	d102      	bne.n	8004882 <ai_buffer_get_size+0x3a>
 800487c:	2802      	cmp	r0, #2
 800487e:	d007      	beq.n	8004890 <ai_buffer_get_size+0x48>
 8004880:	2302      	movs	r3, #2
 8004882:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 8004886:	3301      	adds	r3, #1
 8004888:	4298      	cmp	r0, r3
 800488a:	fb01 f202 	mul.w	r2, r1, r2
 800488e:	d1f3      	bne.n	8004878 <ai_buffer_get_size+0x30>
 8004890:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 8004894:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004898:	4770      	bx	lr
 800489a:	2900      	cmp	r1, #0
 800489c:	d0de      	beq.n	800485c <ai_buffer_get_size+0x14>
 800489e:	6984      	ldr	r4, [r0, #24]
 80048a0:	6862      	ldr	r2, [r4, #4]
 80048a2:	321f      	adds	r2, #31
 80048a4:	f022 021f 	bic.w	r2, r2, #31
 80048a8:	e7da      	b.n	8004860 <ai_buffer_get_size+0x18>
 80048aa:	4770      	bx	lr
 80048ac:	000400c0 	.word	0x000400c0

080048b0 <ai_buffer_get_byte_size>:
 80048b0:	b128      	cbz	r0, 80048be <ai_buffer_get_byte_size+0xe>
 80048b2:	f3c1 11c6 	ubfx	r1, r1, #7, #7
 80048b6:	fb01 f000 	mul.w	r0, r1, r0
 80048ba:	3007      	adds	r0, #7
 80048bc:	08c0      	lsrs	r0, r0, #3
 80048be:	4770      	bx	lr

080048c0 <ai_buffer_array_sane>:
 80048c0:	b138      	cbz	r0, 80048d2 <ai_buffer_array_sane+0x12>
 80048c2:	6843      	ldr	r3, [r0, #4]
 80048c4:	b123      	cbz	r3, 80048d0 <ai_buffer_array_sane+0x10>
 80048c6:	8840      	ldrh	r0, [r0, #2]
 80048c8:	3800      	subs	r0, #0
 80048ca:	bf18      	it	ne
 80048cc:	2001      	movne	r0, #1
 80048ce:	4770      	bx	lr
 80048d0:	4618      	mov	r0, r3
 80048d2:	4770      	bx	lr

080048d4 <ai_buffer_array_item_set_address>:
 80048d4:	b150      	cbz	r0, 80048ec <ai_buffer_array_item_set_address+0x18>
 80048d6:	6843      	ldr	r3, [r0, #4]
 80048d8:	b14b      	cbz	r3, 80048ee <ai_buffer_array_item_set_address+0x1a>
 80048da:	8840      	ldrh	r0, [r0, #2]
 80048dc:	b900      	cbnz	r0, 80048e0 <ai_buffer_array_item_set_address+0xc>
 80048de:	4770      	bx	lr
 80048e0:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 80048e4:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 80048e8:	2001      	movs	r0, #1
 80048ea:	605a      	str	r2, [r3, #4]
 80048ec:	4770      	bx	lr
 80048ee:	4618      	mov	r0, r3
 80048f0:	4770      	bx	lr
 80048f2:	bf00      	nop

080048f4 <_platform_observer_node_exec_cb>:
 80048f4:	2a00      	cmp	r2, #0
 80048f6:	d061      	beq.n	80049bc <_platform_observer_node_exec_cb+0xc8>
 80048f8:	b570      	push	{r4, r5, r6, lr}
 80048fa:	6815      	ldr	r5, [r2, #0]
 80048fc:	b084      	sub	sp, #16
 80048fe:	4614      	mov	r4, r2
 8004900:	2d00      	cmp	r5, #0
 8004902:	d05d      	beq.n	80049c0 <_platform_observer_node_exec_cb+0xcc>
 8004904:	8993      	ldrh	r3, [r2, #12]
 8004906:	89d2      	ldrh	r2, [r2, #14]
 8004908:	fab3 fc83 	clz	ip, r3
 800490c:	3a01      	subs	r2, #1
 800490e:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8004912:	ea4f 2c0c 	mov.w	ip, ip, lsl #8
 8004916:	429a      	cmp	r2, r3
 8004918:	460e      	mov	r6, r1
 800491a:	bf08      	it	eq
 800491c:	f44c 7c00 	orreq.w	ip, ip, #512	@ 0x200
 8004920:	b300      	cbz	r0, 8004964 <_platform_observer_node_exec_cb+0x70>
 8004922:	2801      	cmp	r0, #1
 8004924:	d04f      	beq.n	80049c6 <_platform_observer_node_exec_cb+0xd2>
 8004926:	2802      	cmp	r0, #2
 8004928:	d031      	beq.n	800498e <_platform_observer_node_exec_cb+0x9a>
 800492a:	2803      	cmp	r0, #3
 800492c:	d117      	bne.n	800495e <_platform_observer_node_exec_cb+0x6a>
 800492e:	68a2      	ldr	r2, [r4, #8]
 8004930:	0752      	lsls	r2, r2, #29
 8004932:	d512      	bpl.n	800495a <_platform_observer_node_exec_cb+0x66>
 8004934:	6922      	ldr	r2, [r4, #16]
 8004936:	f8ad 3000 	strh.w	r3, [sp]
 800493a:	8853      	ldrh	r3, [r2, #2]
 800493c:	f8ad 3004 	strh.w	r3, [sp, #4]
 8004940:	8813      	ldrh	r3, [r2, #0]
 8004942:	f8ad 3002 	strh.w	r3, [sp, #2]
 8004946:	6992      	ldr	r2, [r2, #24]
 8004948:	6860      	ldr	r0, [r4, #4]
 800494a:	2300      	movs	r3, #0
 800494c:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8004950:	f04c 0104 	orr.w	r1, ip, #4
 8004954:	466a      	mov	r2, sp
 8004956:	47a8      	blx	r5
 8004958:	89a3      	ldrh	r3, [r4, #12]
 800495a:	3301      	adds	r3, #1
 800495c:	81a3      	strh	r3, [r4, #12]
 800495e:	2000      	movs	r0, #0
 8004960:	b004      	add	sp, #16
 8004962:	bd70      	pop	{r4, r5, r6, pc}
 8004964:	68a2      	ldr	r2, [r4, #8]
 8004966:	07d2      	lsls	r2, r2, #31
 8004968:	d5f7      	bpl.n	800495a <_platform_observer_node_exec_cb+0x66>
 800496a:	f8ad 3000 	strh.w	r3, [sp]
 800496e:	8873      	ldrh	r3, [r6, #2]
 8004970:	f8ad 3004 	strh.w	r3, [sp, #4]
 8004974:	8833      	ldrh	r3, [r6, #0]
 8004976:	f8ad 3002 	strh.w	r3, [sp, #2]
 800497a:	69b3      	ldr	r3, [r6, #24]
 800497c:	9002      	str	r0, [sp, #8]
 800497e:	9303      	str	r3, [sp, #12]
 8004980:	6860      	ldr	r0, [r4, #4]
 8004982:	466a      	mov	r2, sp
 8004984:	f04c 0101 	orr.w	r1, ip, #1
 8004988:	47a8      	blx	r5
 800498a:	89a3      	ldrh	r3, [r4, #12]
 800498c:	e7e5      	b.n	800495a <_platform_observer_node_exec_cb+0x66>
 800498e:	68a2      	ldr	r2, [r4, #8]
 8004990:	6121      	str	r1, [r4, #16]
 8004992:	0791      	lsls	r1, r2, #30
 8004994:	d5e3      	bpl.n	800495e <_platform_observer_node_exec_cb+0x6a>
 8004996:	f8ad 3000 	strh.w	r3, [sp]
 800499a:	8873      	ldrh	r3, [r6, #2]
 800499c:	f8ad 3004 	strh.w	r3, [sp, #4]
 80049a0:	69b3      	ldr	r3, [r6, #24]
 80049a2:	8832      	ldrh	r2, [r6, #0]
 80049a4:	6860      	ldr	r0, [r4, #4]
 80049a6:	f8ad 2002 	strh.w	r2, [sp, #2]
 80049aa:	2400      	movs	r4, #0
 80049ac:	e9cd 4302 	strd	r4, r3, [sp, #8]
 80049b0:	f04c 0102 	orr.w	r1, ip, #2
 80049b4:	466a      	mov	r2, sp
 80049b6:	47a8      	blx	r5
 80049b8:	4620      	mov	r0, r4
 80049ba:	e7d1      	b.n	8004960 <_platform_observer_node_exec_cb+0x6c>
 80049bc:	2001      	movs	r0, #1
 80049be:	4770      	bx	lr
 80049c0:	2001      	movs	r0, #1
 80049c2:	b004      	add	sp, #16
 80049c4:	bd70      	pop	{r4, r5, r6, pc}
 80049c6:	2000      	movs	r0, #0
 80049c8:	6121      	str	r1, [r4, #16]
 80049ca:	81a0      	strh	r0, [r4, #12]
 80049cc:	b004      	add	sp, #16
 80049ce:	bd70      	pop	{r4, r5, r6, pc}

080049d0 <ai_platform_get_weights_map>:
 80049d0:	2a00      	cmp	r2, #0
 80049d2:	d037      	beq.n	8004a44 <ai_platform_get_weights_map+0x74>
 80049d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049d6:	4604      	mov	r4, r0
 80049d8:	b1a0      	cbz	r0, 8004a04 <ai_platform_get_weights_map+0x34>
 80049da:	460f      	mov	r7, r1
 80049dc:	b191      	cbz	r1, 8004a04 <ai_platform_get_weights_map+0x34>
 80049de:	4b25      	ldr	r3, [pc, #148]	@ (8004a74 <ai_platform_get_weights_map+0xa4>)
 80049e0:	6810      	ldr	r0, [r2, #0]
 80049e2:	4298      	cmp	r0, r3
 80049e4:	4615      	mov	r5, r2
 80049e6:	d00f      	beq.n	8004a08 <ai_platform_get_weights_map+0x38>
 80049e8:	6855      	ldr	r5, [r2, #4]
 80049ea:	b15d      	cbz	r5, 8004a04 <ai_platform_get_weights_map+0x34>
 80049ec:	682e      	ldr	r6, [r5, #0]
 80049ee:	429e      	cmp	r6, r3
 80049f0:	d02a      	beq.n	8004a48 <ai_platform_get_weights_map+0x78>
 80049f2:	f1a1 0001 	sub.w	r0, r1, #1
 80049f6:	6025      	str	r5, [r4, #0]
 80049f8:	fab0 f080 	clz	r0, r0
 80049fc:	0940      	lsrs	r0, r0, #5
 80049fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004a00:	42a7      	cmp	r7, r4
 8004a02:	d034      	beq.n	8004a6e <ai_platform_get_weights_map+0x9e>
 8004a04:	2000      	movs	r0, #0
 8004a06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004a08:	1d10      	adds	r0, r2, #4
 8004a0a:	f7ff ff59 	bl	80048c0 <ai_buffer_array_sane>
 8004a0e:	2800      	cmp	r0, #0
 8004a10:	d0f8      	beq.n	8004a04 <ai_platform_get_weights_map+0x34>
 8004a12:	88eb      	ldrh	r3, [r5, #6]
 8004a14:	429f      	cmp	r7, r3
 8004a16:	d1f5      	bne.n	8004a04 <ai_platform_get_weights_map+0x34>
 8004a18:	f04f 0c00 	mov.w	ip, #0
 8004a1c:	1f20      	subs	r0, r4, #4
 8004a1e:	46e6      	mov	lr, ip
 8004a20:	68ab      	ldr	r3, [r5, #8]
 8004a22:	4463      	add	r3, ip
 8004a24:	f10c 0c1c 	add.w	ip, ip, #28
 8004a28:	685b      	ldr	r3, [r3, #4]
 8004a2a:	b12b      	cbz	r3, 8004a38 <ai_platform_get_weights_map+0x68>
 8004a2c:	f10e 0e01 	add.w	lr, lr, #1
 8004a30:	4577      	cmp	r7, lr
 8004a32:	f840 3f04 	str.w	r3, [r0, #4]!
 8004a36:	d1f3      	bne.n	8004a20 <ai_platform_get_weights_map+0x50>
 8004a38:	eba7 000e 	sub.w	r0, r7, lr
 8004a3c:	fab0 f080 	clz	r0, r0
 8004a40:	0940      	lsrs	r0, r0, #5
 8004a42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004a44:	2000      	movs	r0, #0
 8004a46:	4770      	bx	lr
 8004a48:	1f20      	subs	r0, r4, #4
 8004a4a:	462a      	mov	r2, r5
 8004a4c:	2400      	movs	r4, #0
 8004a4e:	e000      	b.n	8004a52 <ai_platform_get_weights_map+0x82>
 8004a50:	461c      	mov	r4, r3
 8004a52:	f852 3f04 	ldr.w	r3, [r2, #4]!
 8004a56:	42b3      	cmp	r3, r6
 8004a58:	d0d2      	beq.n	8004a00 <ai_platform_get_weights_map+0x30>
 8004a5a:	f840 3f04 	str.w	r3, [r0, #4]!
 8004a5e:	1c63      	adds	r3, r4, #1
 8004a60:	429f      	cmp	r7, r3
 8004a62:	d1f5      	bne.n	8004a50 <ai_platform_get_weights_map+0x80>
 8004a64:	3402      	adds	r4, #2
 8004a66:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8004a6a:	42b3      	cmp	r3, r6
 8004a6c:	d1ca      	bne.n	8004a04 <ai_platform_get_weights_map+0x34>
 8004a6e:	2001      	movs	r0, #1
 8004a70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004a72:	bf00      	nop
 8004a74:	a1facade 	.word	0xa1facade

08004a78 <ai_platform_get_activations_map>:
 8004a78:	2a00      	cmp	r2, #0
 8004a7a:	d038      	beq.n	8004aee <ai_platform_get_activations_map+0x76>
 8004a7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a7e:	4604      	mov	r4, r0
 8004a80:	b1a0      	cbz	r0, 8004aac <ai_platform_get_activations_map+0x34>
 8004a82:	460f      	mov	r7, r1
 8004a84:	b191      	cbz	r1, 8004aac <ai_platform_get_activations_map+0x34>
 8004a86:	4b25      	ldr	r3, [pc, #148]	@ (8004b1c <ai_platform_get_activations_map+0xa4>)
 8004a88:	6810      	ldr	r0, [r2, #0]
 8004a8a:	4298      	cmp	r0, r3
 8004a8c:	4615      	mov	r5, r2
 8004a8e:	d00f      	beq.n	8004ab0 <ai_platform_get_activations_map+0x38>
 8004a90:	6a15      	ldr	r5, [r2, #32]
 8004a92:	b15d      	cbz	r5, 8004aac <ai_platform_get_activations_map+0x34>
 8004a94:	682e      	ldr	r6, [r5, #0]
 8004a96:	429e      	cmp	r6, r3
 8004a98:	d02b      	beq.n	8004af2 <ai_platform_get_activations_map+0x7a>
 8004a9a:	f1a1 0001 	sub.w	r0, r1, #1
 8004a9e:	6025      	str	r5, [r4, #0]
 8004aa0:	fab0 f080 	clz	r0, r0
 8004aa4:	0940      	lsrs	r0, r0, #5
 8004aa6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004aa8:	42a7      	cmp	r7, r4
 8004aaa:	d035      	beq.n	8004b18 <ai_platform_get_activations_map+0xa0>
 8004aac:	2000      	movs	r0, #0
 8004aae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004ab0:	f102 000c 	add.w	r0, r2, #12
 8004ab4:	f7ff ff04 	bl	80048c0 <ai_buffer_array_sane>
 8004ab8:	2800      	cmp	r0, #0
 8004aba:	d0f7      	beq.n	8004aac <ai_platform_get_activations_map+0x34>
 8004abc:	89eb      	ldrh	r3, [r5, #14]
 8004abe:	429f      	cmp	r7, r3
 8004ac0:	d1f4      	bne.n	8004aac <ai_platform_get_activations_map+0x34>
 8004ac2:	f04f 0c00 	mov.w	ip, #0
 8004ac6:	1f20      	subs	r0, r4, #4
 8004ac8:	46e6      	mov	lr, ip
 8004aca:	692b      	ldr	r3, [r5, #16]
 8004acc:	4463      	add	r3, ip
 8004ace:	f10c 0c1c 	add.w	ip, ip, #28
 8004ad2:	685b      	ldr	r3, [r3, #4]
 8004ad4:	b12b      	cbz	r3, 8004ae2 <ai_platform_get_activations_map+0x6a>
 8004ad6:	f10e 0e01 	add.w	lr, lr, #1
 8004ada:	4577      	cmp	r7, lr
 8004adc:	f840 3f04 	str.w	r3, [r0, #4]!
 8004ae0:	d1f3      	bne.n	8004aca <ai_platform_get_activations_map+0x52>
 8004ae2:	eba7 000e 	sub.w	r0, r7, lr
 8004ae6:	fab0 f080 	clz	r0, r0
 8004aea:	0940      	lsrs	r0, r0, #5
 8004aec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004aee:	2000      	movs	r0, #0
 8004af0:	4770      	bx	lr
 8004af2:	1f20      	subs	r0, r4, #4
 8004af4:	462a      	mov	r2, r5
 8004af6:	2400      	movs	r4, #0
 8004af8:	e000      	b.n	8004afc <ai_platform_get_activations_map+0x84>
 8004afa:	461c      	mov	r4, r3
 8004afc:	f852 3f04 	ldr.w	r3, [r2, #4]!
 8004b00:	42b3      	cmp	r3, r6
 8004b02:	d0d1      	beq.n	8004aa8 <ai_platform_get_activations_map+0x30>
 8004b04:	f840 3f04 	str.w	r3, [r0, #4]!
 8004b08:	1c63      	adds	r3, r4, #1
 8004b0a:	429f      	cmp	r7, r3
 8004b0c:	d1f5      	bne.n	8004afa <ai_platform_get_activations_map+0x82>
 8004b0e:	3402      	adds	r4, #2
 8004b10:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8004b14:	42b3      	cmp	r3, r6
 8004b16:	d1c9      	bne.n	8004aac <ai_platform_get_activations_map+0x34>
 8004b18:	2001      	movs	r0, #1
 8004b1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004b1c:	a1facade 	.word	0xa1facade

08004b20 <ai_platform_bind_network_params>:
 8004b20:	b1a0      	cbz	r0, 8004b4c <ai_platform_bind_network_params+0x2c>
 8004b22:	b1b1      	cbz	r1, 8004b52 <ai_platform_bind_network_params+0x32>
 8004b24:	b1c2      	cbz	r2, 8004b58 <ai_platform_bind_network_params+0x38>
 8004b26:	b410      	push	{r4}
 8004b28:	4603      	mov	r3, r0
 8004b2a:	4c0d      	ldr	r4, [pc, #52]	@ (8004b60 <ai_platform_bind_network_params+0x40>)
 8004b2c:	f843 4b04 	str.w	r4, [r3], #4
 8004b30:	f100 0c0c 	add.w	ip, r0, #12
 8004b34:	c903      	ldmia	r1, {r0, r1}
 8004b36:	e883 0003 	stmia.w	r3, {r0, r1}
 8004b3a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004b3e:	e88c 0003 	stmia.w	ip, {r0, r1}
 8004b42:	2301      	movs	r3, #1
 8004b44:	4618      	mov	r0, r3
 8004b46:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004b4a:	4770      	bx	lr
 8004b4c:	4603      	mov	r3, r0
 8004b4e:	4618      	mov	r0, r3
 8004b50:	4770      	bx	lr
 8004b52:	460b      	mov	r3, r1
 8004b54:	4618      	mov	r0, r3
 8004b56:	4770      	bx	lr
 8004b58:	4613      	mov	r3, r2
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	4770      	bx	lr
 8004b5e:	bf00      	nop
 8004b60:	a1facade 	.word	0xa1facade

08004b64 <ai_platform_runtime_get_revision>:
 8004b64:	4800      	ldr	r0, [pc, #0]	@ (8004b68 <ai_platform_runtime_get_revision+0x4>)
 8004b66:	4770      	bx	lr
 8004b68:	08011fb0 	.word	0x08011fb0

08004b6c <ai_platform_runtime_get_version>:
 8004b6c:	b082      	sub	sp, #8
 8004b6e:	2009      	movs	r0, #9
 8004b70:	b002      	add	sp, #8
 8004b72:	4770      	bx	lr

08004b74 <ai_platform_api_get_version>:
 8004b74:	4b09      	ldr	r3, [pc, #36]	@ (8004b9c <ai_platform_api_get_version+0x28>)
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	2000      	movs	r0, #0
 8004b7a:	b2da      	uxtb	r2, r3
 8004b7c:	f362 0007 	bfi	r0, r2, #0, #8
 8004b80:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8004b84:	f362 200f 	bfi	r0, r2, #8, #8
 8004b88:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8004b8c:	f362 4017 	bfi	r0, r2, #16, #8
 8004b90:	0e1b      	lsrs	r3, r3, #24
 8004b92:	b082      	sub	sp, #8
 8004b94:	f363 601f 	bfi	r0, r3, #24, #8
 8004b98:	b002      	add	sp, #8
 8004b9a:	4770      	bx	lr
 8004b9c:	08011f68 	.word	0x08011f68

08004ba0 <ai_platform_interface_api_get_version>:
 8004ba0:	4b09      	ldr	r3, [pc, #36]	@ (8004bc8 <ai_platform_interface_api_get_version+0x28>)
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	2000      	movs	r0, #0
 8004ba6:	b2da      	uxtb	r2, r3
 8004ba8:	f362 0007 	bfi	r0, r2, #0, #8
 8004bac:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8004bb0:	f362 200f 	bfi	r0, r2, #8, #8
 8004bb4:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8004bb8:	f362 4017 	bfi	r0, r2, #16, #8
 8004bbc:	0e1b      	lsrs	r3, r3, #24
 8004bbe:	b082      	sub	sp, #8
 8004bc0:	f363 601f 	bfi	r0, r3, #24, #8
 8004bc4:	b002      	add	sp, #8
 8004bc6:	4770      	bx	lr
 8004bc8:	08011f6c 	.word	0x08011f6c

08004bcc <ai_platform_context_acquire>:
 8004bcc:	6802      	ldr	r2, [r0, #0]
 8004bce:	4b02      	ldr	r3, [pc, #8]	@ (8004bd8 <ai_platform_context_acquire+0xc>)
 8004bd0:	4393      	bics	r3, r2
 8004bd2:	bf18      	it	ne
 8004bd4:	2000      	movne	r0, #0
 8004bd6:	4770      	bx	lr
 8004bd8:	a1c00100 	.word	0xa1c00100

08004bdc <ai_platform_network_get_error>:
 8004bdc:	4b04      	ldr	r3, [pc, #16]	@ (8004bf0 <ai_platform_network_get_error+0x14>)
 8004bde:	6802      	ldr	r2, [r0, #0]
 8004be0:	4393      	bics	r3, r2
 8004be2:	d102      	bne.n	8004bea <ai_platform_network_get_error+0xe>
 8004be4:	300c      	adds	r0, #12
 8004be6:	f000 bdff 	b.w	80057e8 <core_get_error>
 8004bea:	f241 0010 	movw	r0, #4112	@ 0x1010
 8004bee:	4770      	bx	lr
 8004bf0:	a1c00100 	.word	0xa1c00100

08004bf4 <ai_platform_network_set_error>:
 8004bf4:	b110      	cbz	r0, 8004bfc <ai_platform_network_set_error+0x8>
 8004bf6:	300c      	adds	r0, #12
 8004bf8:	f000 bdfc 	b.w	80057f4 <core_set_error>
 8004bfc:	4770      	bx	lr
 8004bfe:	bf00      	nop

08004c00 <ai_platform_api_get_network_report>:
 8004c00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c04:	4ba4      	ldr	r3, [pc, #656]	@ (8004e98 <ai_platform_api_get_network_report+0x298>)
 8004c06:	6802      	ldr	r2, [r0, #0]
 8004c08:	b089      	sub	sp, #36	@ 0x24
 8004c0a:	4393      	bics	r3, r2
 8004c0c:	9002      	str	r0, [sp, #8]
 8004c0e:	9103      	str	r1, [sp, #12]
 8004c10:	d164      	bne.n	8004cdc <ai_platform_api_get_network_report+0xdc>
 8004c12:	2900      	cmp	r1, #0
 8004c14:	d075      	beq.n	8004d02 <ai_platform_api_get_network_report+0x102>
 8004c16:	2400      	movs	r4, #0
 8004c18:	67cc      	str	r4, [r1, #124]	@ 0x7c
 8004c1a:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8004c1c:	b143      	cbz	r3, 8004c30 <ai_platform_api_get_network_report+0x30>
 8004c1e:	3401      	adds	r4, #1
 8004c20:	67cc      	str	r4, [r1, #124]	@ 0x7c
 8004c22:	691a      	ldr	r2, [r3, #16]
 8004c24:	429a      	cmp	r2, r3
 8004c26:	d003      	beq.n	8004c30 <ai_platform_api_get_network_report+0x30>
 8004c28:	b112      	cbz	r2, 8004c30 <ai_platform_api_get_network_report+0x30>
 8004c2a:	4613      	mov	r3, r2
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d1f6      	bne.n	8004c1e <ai_platform_api_get_network_report+0x1e>
 8004c30:	2c00      	cmp	r4, #0
 8004c32:	f000 812a 	beq.w	8004e8a <ai_platform_api_get_network_report+0x28a>
 8004c36:	9a02      	ldr	r2, [sp, #8]
 8004c38:	8e13      	ldrh	r3, [r2, #48]	@ 0x30
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d053      	beq.n	8004ce6 <ai_platform_api_get_network_report+0xe6>
 8004c3e:	f8d2 a034 	ldr.w	sl, [r2, #52]	@ 0x34
 8004c42:	f1ba 0f00 	cmp.w	sl, #0
 8004c46:	d04e      	beq.n	8004ce6 <ai_platform_api_get_network_report+0xe6>
 8004c48:	f04f 0b00 	mov.w	fp, #0
 8004c4c:	465d      	mov	r5, fp
 8004c4e:	e015      	b.n	8004c7c <ai_platform_api_get_network_report+0x7c>
 8004c50:	00e9      	lsls	r1, r5, #3
 8004c52:	2201      	movs	r2, #1
 8004c54:	507a      	str	r2, [r7, r1]
 8004c56:	69b1      	ldr	r1, [r6, #24]
 8004c58:	6849      	ldr	r1, [r1, #4]
 8004c5a:	60a3      	str	r3, [r4, #8]
 8004c5c:	f04f 0201 	mov.w	r2, #1
 8004c60:	7522      	strb	r2, [r4, #20]
 8004c62:	6963      	ldr	r3, [r4, #20]
 8004c64:	6121      	str	r1, [r4, #16]
 8004c66:	f369 231f 	bfi	r3, r9, #8, #24
 8004c6a:	e9c4 0c00 	strd	r0, ip, [r4]
 8004c6e:	e9c4 3805 	strd	r3, r8, [r4, #20]
 8004c72:	2200      	movs	r2, #0
 8004c74:	60e2      	str	r2, [r4, #12]
 8004c76:	3501      	adds	r5, #1
 8004c78:	f10b 0b1c 	add.w	fp, fp, #28
 8004c7c:	f8ba 3000 	ldrh.w	r3, [sl]
 8004c80:	42ab      	cmp	r3, r5
 8004c82:	b2aa      	uxth	r2, r5
 8004c84:	d942      	bls.n	8004d0c <ai_platform_api_get_network_report+0x10c>
 8004c86:	f8da 3004 	ldr.w	r3, [sl, #4]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d03e      	beq.n	8004d0c <ai_platform_api_get_network_report+0x10c>
 8004c8e:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 8004c92:	2e00      	cmp	r6, #0
 8004c94:	d03a      	beq.n	8004d0c <ai_platform_api_get_network_report+0x10c>
 8004c96:	f8da 3008 	ldr.w	r3, [sl, #8]
 8004c9a:	f8d6 800c 	ldr.w	r8, [r6, #12]
 8004c9e:	e9d3 4701 	ldrd	r4, r7, [r3, #4]
 8004ca2:	69b3      	ldr	r3, [r6, #24]
 8004ca4:	6818      	ldr	r0, [r3, #0]
 8004ca6:	68b3      	ldr	r3, [r6, #8]
 8004ca8:	00ea      	lsls	r2, r5, #3
 8004caa:	f3c3 2917 	ubfx	r9, r3, #8, #24
 8004cae:	9201      	str	r2, [sp, #4]
 8004cb0:	f003 fc9a 	bl	80085e8 <ai_array_to_buffer_fmt>
 8004cb4:	69b1      	ldr	r1, [r6, #24]
 8004cb6:	eb07 03c5 	add.w	r3, r7, r5, lsl #3
 8004cba:	f8d1 c008 	ldr.w	ip, [r1, #8]
 8004cbe:	445c      	add	r4, fp
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d0c9      	beq.n	8004c58 <ai_platform_api_get_network_report+0x58>
 8004cc4:	2100      	movs	r1, #0
 8004cc6:	f847 1035 	str.w	r1, [r7, r5, lsl #3]
 8004cca:	6831      	ldr	r1, [r6, #0]
 8004ccc:	6059      	str	r1, [r3, #4]
 8004cce:	b111      	cbz	r1, 8004cd6 <ai_platform_api_get_network_report+0xd6>
 8004cd0:	8849      	ldrh	r1, [r1, #2]
 8004cd2:	2900      	cmp	r1, #0
 8004cd4:	d1bc      	bne.n	8004c50 <ai_platform_api_get_network_report+0x50>
 8004cd6:	69b1      	ldr	r1, [r6, #24]
 8004cd8:	2300      	movs	r3, #0
 8004cda:	e7bd      	b.n	8004c58 <ai_platform_api_get_network_report+0x58>
 8004cdc:	2400      	movs	r4, #0
 8004cde:	4620      	mov	r0, r4
 8004ce0:	b009      	add	sp, #36	@ 0x24
 8004ce2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ce6:	9b03      	ldr	r3, [sp, #12]
 8004ce8:	9802      	ldr	r0, [sp, #8]
 8004cea:	2400      	movs	r4, #0
 8004cec:	63dc      	str	r4, [r3, #60]	@ 0x3c
 8004cee:	871c      	strh	r4, [r3, #56]	@ 0x38
 8004cf0:	2218      	movs	r2, #24
 8004cf2:	2112      	movs	r1, #18
 8004cf4:	300c      	adds	r0, #12
 8004cf6:	f000 fd7d 	bl	80057f4 <core_set_error>
 8004cfa:	4620      	mov	r0, r4
 8004cfc:	b009      	add	sp, #36	@ 0x24
 8004cfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d02:	460c      	mov	r4, r1
 8004d04:	4620      	mov	r0, r4
 8004d06:	b009      	add	sp, #36	@ 0x24
 8004d08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d0c:	2a00      	cmp	r2, #0
 8004d0e:	d0ea      	beq.n	8004ce6 <ai_platform_api_get_network_report+0xe6>
 8004d10:	f8da 3008 	ldr.w	r3, [sl, #8]
 8004d14:	9903      	ldr	r1, [sp, #12]
 8004d16:	685b      	ldr	r3, [r3, #4]
 8004d18:	63cb      	str	r3, [r1, #60]	@ 0x3c
 8004d1a:	9b02      	ldr	r3, [sp, #8]
 8004d1c:	870a      	strh	r2, [r1, #56]	@ 0x38
 8004d1e:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 8004d20:	2b01      	cmp	r3, #1
 8004d22:	f240 80a4 	bls.w	8004e6e <ai_platform_api_get_network_report+0x26e>
 8004d26:	9b02      	ldr	r3, [sp, #8]
 8004d28:	f04f 0900 	mov.w	r9, #0
 8004d2c:	f8d3 8034 	ldr.w	r8, [r3, #52]	@ 0x34
 8004d30:	464d      	mov	r5, r9
 8004d32:	46cb      	mov	fp, r9
 8004d34:	e016      	b.n	8004d64 <ai_platform_api_get_network_report+0x164>
 8004d36:	2201      	movs	r2, #1
 8004d38:	f84a 200e 	str.w	r2, [sl, lr]
 8004d3c:	69b1      	ldr	r1, [r6, #24]
 8004d3e:	684a      	ldr	r2, [r1, #4]
 8004d40:	60a3      	str	r3, [r4, #8]
 8004d42:	9b01      	ldr	r3, [sp, #4]
 8004d44:	61a3      	str	r3, [r4, #24]
 8004d46:	f04f 0301 	mov.w	r3, #1
 8004d4a:	7523      	strb	r3, [r4, #20]
 8004d4c:	6963      	ldr	r3, [r4, #20]
 8004d4e:	6122      	str	r2, [r4, #16]
 8004d50:	e9c4 0c00 	strd	r0, ip, [r4]
 8004d54:	f367 231f 	bfi	r3, r7, #8, #24
 8004d58:	f8c4 b00c 	str.w	fp, [r4, #12]
 8004d5c:	3501      	adds	r5, #1
 8004d5e:	f109 091c 	add.w	r9, r9, #28
 8004d62:	6163      	str	r3, [r4, #20]
 8004d64:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 8004d68:	42ab      	cmp	r3, r5
 8004d6a:	b2aa      	uxth	r2, r5
 8004d6c:	d927      	bls.n	8004dbe <ai_platform_api_get_network_report+0x1be>
 8004d6e:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8004d72:	b323      	cbz	r3, 8004dbe <ai_platform_api_get_network_report+0x1be>
 8004d74:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 8004d78:	b30e      	cbz	r6, 8004dbe <ai_platform_api_get_network_report+0x1be>
 8004d7a:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8004d7e:	68b7      	ldr	r7, [r6, #8]
 8004d80:	e9d3 4a01 	ldrd	r4, sl, [r3, #4]
 8004d84:	69b3      	ldr	r3, [r6, #24]
 8004d86:	6818      	ldr	r0, [r3, #0]
 8004d88:	68f3      	ldr	r3, [r6, #12]
 8004d8a:	9301      	str	r3, [sp, #4]
 8004d8c:	f003 fc2c 	bl	80085e8 <ai_array_to_buffer_fmt>
 8004d90:	69b1      	ldr	r1, [r6, #24]
 8004d92:	eb0a 03c5 	add.w	r3, sl, r5, lsl #3
 8004d96:	f8d1 c008 	ldr.w	ip, [r1, #8]
 8004d9a:	444c      	add	r4, r9
 8004d9c:	f3c7 2717 	ubfx	r7, r7, #8, #24
 8004da0:	ea4f 0ec5 	mov.w	lr, r5, lsl #3
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d0ca      	beq.n	8004d3e <ai_platform_api_get_network_report+0x13e>
 8004da8:	f84a b035 	str.w	fp, [sl, r5, lsl #3]
 8004dac:	6831      	ldr	r1, [r6, #0]
 8004dae:	6059      	str	r1, [r3, #4]
 8004db0:	b111      	cbz	r1, 8004db8 <ai_platform_api_get_network_report+0x1b8>
 8004db2:	8849      	ldrh	r1, [r1, #2]
 8004db4:	2900      	cmp	r1, #0
 8004db6:	d1be      	bne.n	8004d36 <ai_platform_api_get_network_report+0x136>
 8004db8:	69b1      	ldr	r1, [r6, #24]
 8004dba:	2300      	movs	r3, #0
 8004dbc:	e7bf      	b.n	8004d3e <ai_platform_api_get_network_report+0x13e>
 8004dbe:	2a00      	cmp	r2, #0
 8004dc0:	d055      	beq.n	8004e6e <ai_platform_api_get_network_report+0x26e>
 8004dc2:	9902      	ldr	r1, [sp, #8]
 8004dc4:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8004dc8:	f101 0628 	add.w	r6, r1, #40	@ 0x28
 8004dcc:	9903      	ldr	r1, [sp, #12]
 8004dce:	685b      	ldr	r3, [r3, #4]
 8004dd0:	640b      	str	r3, [r1, #64]	@ 0x40
 8004dd2:	874a      	strh	r2, [r1, #58]	@ 0x3a
 8004dd4:	4630      	mov	r0, r6
 8004dd6:	f7ff fd73 	bl	80048c0 <ai_buffer_array_sane>
 8004dda:	4604      	mov	r4, r0
 8004ddc:	b968      	cbnz	r0, 8004dfa <ai_platform_api_get_network_report+0x1fa>
 8004dde:	4630      	mov	r0, r6
 8004de0:	f7ff fd6e 	bl	80048c0 <ai_buffer_array_sane>
 8004de4:	b148      	cbz	r0, 8004dfa <ai_platform_api_get_network_report+0x1fa>
 8004de6:	9b02      	ldr	r3, [sp, #8]
 8004de8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004dea:	b133      	cbz	r3, 8004dfa <ai_platform_api_get_network_report+0x1fa>
 8004dec:	9802      	ldr	r0, [sp, #8]
 8004dee:	2213      	movs	r2, #19
 8004df0:	2111      	movs	r1, #17
 8004df2:	300c      	adds	r0, #12
 8004df4:	f000 fcfe 	bl	80057f4 <core_set_error>
 8004df8:	e771      	b.n	8004cde <ai_platform_api_get_network_report+0xde>
 8004dfa:	9d02      	ldr	r5, [sp, #8]
 8004dfc:	f105 0720 	add.w	r7, r5, #32
 8004e00:	4638      	mov	r0, r7
 8004e02:	f7ff fd5d 	bl	80048c0 <ai_buffer_array_sane>
 8004e06:	4604      	mov	r4, r0
 8004e08:	b960      	cbnz	r0, 8004e24 <ai_platform_api_get_network_report+0x224>
 8004e0a:	4638      	mov	r0, r7
 8004e0c:	f7ff fd58 	bl	80048c0 <ai_buffer_array_sane>
 8004e10:	b140      	cbz	r0, 8004e24 <ai_platform_api_get_network_report+0x224>
 8004e12:	8c6b      	ldrh	r3, [r5, #34]	@ 0x22
 8004e14:	b133      	cbz	r3, 8004e24 <ai_platform_api_get_network_report+0x224>
 8004e16:	9802      	ldr	r0, [sp, #8]
 8004e18:	2212      	movs	r2, #18
 8004e1a:	2111      	movs	r1, #17
 8004e1c:	300c      	adds	r0, #12
 8004e1e:	f000 fce9 	bl	80057f4 <core_set_error>
 8004e22:	e75c      	b.n	8004cde <ai_platform_api_get_network_report+0xde>
 8004e24:	9a02      	ldr	r2, [sp, #8]
 8004e26:	9c03      	ldr	r4, [sp, #12]
 8004e28:	6853      	ldr	r3, [r2, #4]
 8004e2a:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
 8004e2e:	4b1b      	ldr	r3, [pc, #108]	@ (8004e9c <ai_platform_api_get_network_report+0x29c>)
 8004e30:	6123      	str	r3, [r4, #16]
 8004e32:	2309      	movs	r3, #9
 8004e34:	6163      	str	r3, [r4, #20]
 8004e36:	f240 2c01 	movw	ip, #513	@ 0x201
 8004e3a:	f240 5301 	movw	r3, #1281	@ 0x501
 8004e3e:	e9c4 c309 	strd	ip, r3, [r4, #36]	@ 0x24
 8004e42:	6890      	ldr	r0, [r2, #8]
 8004e44:	f003 fc80 	bl	8008748 <ai_platform_version_get>
 8004e48:	4b15      	ldr	r3, [pc, #84]	@ (8004ea0 <ai_platform_api_get_network_report+0x2a0>)
 8004e4a:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8004e4c:	6220      	str	r0, [r4, #32]
 8004e4e:	429a      	cmp	r2, r3
 8004e50:	d128      	bne.n	8004ea4 <ai_platform_api_get_network_report+0x2a4>
 8004e52:	e896 0003 	ldmia.w	r6, {r0, r1}
 8004e56:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8004e5a:	e882 0003 	stmia.w	r2, {r0, r1}
 8004e5e:	e897 0003 	ldmia.w	r7, {r0, r1}
 8004e62:	f104 0348 	add.w	r3, r4, #72	@ 0x48
 8004e66:	e883 0003 	stmia.w	r3, {r0, r1}
 8004e6a:	2401      	movs	r4, #1
 8004e6c:	e737      	b.n	8004cde <ai_platform_api_get_network_report+0xde>
 8004e6e:	9b03      	ldr	r3, [sp, #12]
 8004e70:	9802      	ldr	r0, [sp, #8]
 8004e72:	2400      	movs	r4, #0
 8004e74:	641c      	str	r4, [r3, #64]	@ 0x40
 8004e76:	875c      	strh	r4, [r3, #58]	@ 0x3a
 8004e78:	2218      	movs	r2, #24
 8004e7a:	2113      	movs	r1, #19
 8004e7c:	300c      	adds	r0, #12
 8004e7e:	f000 fcb9 	bl	80057f4 <core_set_error>
 8004e82:	4620      	mov	r0, r4
 8004e84:	b009      	add	sp, #36	@ 0x24
 8004e86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e8a:	9802      	ldr	r0, [sp, #8]
 8004e8c:	2218      	movs	r2, #24
 8004e8e:	2111      	movs	r1, #17
 8004e90:	300c      	adds	r0, #12
 8004e92:	f000 fcaf 	bl	80057f4 <core_set_error>
 8004e96:	e722      	b.n	8004cde <ai_platform_api_get_network_report+0xde>
 8004e98:	a1c00100 	.word	0xa1c00100
 8004e9c:	08011fb0 	.word	0x08011fb0
 8004ea0:	a1facade 	.word	0xa1facade
 8004ea4:	9903      	ldr	r1, [sp, #12]
 8004ea6:	4b2b      	ldr	r3, [pc, #172]	@ (8004f54 <ai_platform_api_get_network_report+0x354>)
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	e9c1 2212 	strd	r2, r2, [r1, #72]	@ 0x48
 8004eae:	e9c1 2214 	strd	r2, r2, [r1, #80]	@ 0x50
 8004eb2:	4a29      	ldr	r2, [pc, #164]	@ (8004f58 <ai_platform_api_get_network_report+0x358>)
 8004eb4:	644a      	str	r2, [r1, #68]	@ 0x44
 8004eb6:	f10d 0c10 	add.w	ip, sp, #16
 8004eba:	f240 4201 	movw	r2, #1025	@ 0x401
 8004ebe:	f8c1 c05c 	str.w	ip, [r1, #92]	@ 0x5c
 8004ec2:	658a      	str	r2, [r1, #88]	@ 0x58
 8004ec4:	f101 0844 	add.w	r8, r1, #68	@ 0x44
 8004ec8:	f101 0960 	add.w	r9, r1, #96	@ 0x60
 8004ecc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004ece:	4645      	mov	r5, r8
 8004ed0:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 8004ed4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004ed6:	464c      	mov	r4, r9
 8004ed8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004eda:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004ede:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004ee2:	4630      	mov	r0, r6
 8004ee4:	f7ff fcec 	bl	80048c0 <ai_buffer_array_sane>
 8004ee8:	b998      	cbnz	r0, 8004f12 <ai_platform_api_get_network_report+0x312>
 8004eea:	4638      	mov	r0, r7
 8004eec:	f7ff fce8 	bl	80048c0 <ai_buffer_array_sane>
 8004ef0:	b908      	cbnz	r0, 8004ef6 <ai_platform_api_get_network_report+0x2f6>
 8004ef2:	2401      	movs	r4, #1
 8004ef4:	e6f3      	b.n	8004cde <ai_platform_api_get_network_report+0xde>
 8004ef6:	4638      	mov	r0, r7
 8004ef8:	f7ff fce2 	bl	80048c0 <ai_buffer_array_sane>
 8004efc:	b1b8      	cbz	r0, 8004f2e <ai_platform_api_get_network_report+0x32e>
 8004efe:	9b02      	ldr	r3, [sp, #8]
 8004f00:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8004f02:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004f04:	e8a8 000f 	stmia.w	r8!, {r0, r1, r2, r3}
 8004f08:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8004f0c:	e888 0007 	stmia.w	r8, {r0, r1, r2}
 8004f10:	e7ef      	b.n	8004ef2 <ai_platform_api_get_network_report+0x2f2>
 8004f12:	4630      	mov	r0, r6
 8004f14:	f7ff fcd4 	bl	80048c0 <ai_buffer_array_sane>
 8004f18:	b190      	cbz	r0, 8004f40 <ai_platform_api_get_network_report+0x340>
 8004f1a:	9b02      	ldr	r3, [sp, #8]
 8004f1c:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
 8004f1e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004f20:	e8a9 000f 	stmia.w	r9!, {r0, r1, r2, r3}
 8004f24:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8004f28:	e889 0007 	stmia.w	r9, {r0, r1, r2}
 8004f2c:	e7dd      	b.n	8004eea <ai_platform_api_get_network_report+0x2ea>
 8004f2e:	4604      	mov	r4, r0
 8004f30:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004f32:	e8a8 000f 	stmia.w	r8!, {r0, r1, r2, r3}
 8004f36:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8004f3a:	e888 0007 	stmia.w	r8, {r0, r1, r2}
 8004f3e:	deff      	udf	#255	@ 0xff
 8004f40:	4604      	mov	r4, r0
 8004f42:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004f44:	e8a9 000f 	stmia.w	r9!, {r0, r1, r2, r3}
 8004f48:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8004f4c:	e889 0007 	stmia.w	r9, {r0, r1, r2}
 8004f50:	deff      	udf	#255	@ 0xff
 8004f52:	bf00      	nop
 8004f54:	0800c54c 	.word	0x0800c54c
 8004f58:	00040440 	.word	0x00040440

08004f5c <ai_platform_network_create>:
 8004f5c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004f60:	b083      	sub	sp, #12
 8004f62:	f89d 9028 	ldrb.w	r9, [sp, #40]	@ 0x28
 8004f66:	f89d 802c 	ldrb.w	r8, [sp, #44]	@ 0x2c
 8004f6a:	b320      	cbz	r0, 8004fb6 <ai_platform_network_create+0x5a>
 8004f6c:	6002      	str	r2, [r0, #0]
 8004f6e:	4616      	mov	r6, r2
 8004f70:	461f      	mov	r7, r3
 8004f72:	4604      	mov	r4, r0
 8004f74:	f000 fc36 	bl	80057e4 <core_init>
 8004f78:	b970      	cbnz	r0, 8004f98 <ai_platform_network_create+0x3c>
 8004f7a:	2530      	movs	r5, #48	@ 0x30
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	6023      	str	r3, [r4, #0]
 8004f80:	2410      	movs	r4, #16
 8004f82:	4642      	mov	r2, r8
 8004f84:	4649      	mov	r1, r9
 8004f86:	4638      	mov	r0, r7
 8004f88:	f003 fbd8 	bl	800873c <ai_version_get>
 8004f8c:	60b0      	str	r0, [r6, #8]
 8004f8e:	ea45 2004 	orr.w	r0, r5, r4, lsl #8
 8004f92:	b003      	add	sp, #12
 8004f94:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004f98:	2200      	movs	r2, #0
 8004f9a:	4649      	mov	r1, r9
 8004f9c:	4638      	mov	r0, r7
 8004f9e:	f003 fbcd 	bl	800873c <ai_version_get>
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	4605      	mov	r5, r0
 8004fa6:	2105      	movs	r1, #5
 8004fa8:	2001      	movs	r0, #1
 8004faa:	f003 fbc7 	bl	800873c <ai_version_get>
 8004fae:	4285      	cmp	r5, r0
 8004fb0:	d008      	beq.n	8004fc4 <ai_platform_network_create+0x68>
 8004fb2:	2501      	movs	r5, #1
 8004fb4:	e7e2      	b.n	8004f7c <ai_platform_network_create+0x20>
 8004fb6:	2510      	movs	r5, #16
 8004fb8:	462c      	mov	r4, r5
 8004fba:	ea45 2004 	orr.w	r0, r5, r4, lsl #8
 8004fbe:	b003      	add	sp, #12
 8004fc0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004fc4:	4b05      	ldr	r3, [pc, #20]	@ (8004fdc <ai_platform_network_create+0x80>)
 8004fc6:	9301      	str	r3, [sp, #4]
 8004fc8:	a801      	add	r0, sp, #4
 8004fca:	f000 fc3d 	bl	8005848 <ai_check_custom_types>
 8004fce:	b110      	cbz	r0, 8004fd6 <ai_platform_network_create+0x7a>
 8004fd0:	2400      	movs	r4, #0
 8004fd2:	4625      	mov	r5, r4
 8004fd4:	e7d5      	b.n	8004f82 <ai_platform_network_create+0x26>
 8004fd6:	2502      	movs	r5, #2
 8004fd8:	e7d0      	b.n	8004f7c <ai_platform_network_create+0x20>
 8004fda:	bf00      	nop
 8004fdc:	84048403 	.word	0x84048403

08004fe0 <ai_platform_network_destroy>:
 8004fe0:	b508      	push	{r3, lr}
 8004fe2:	4a07      	ldr	r2, [pc, #28]	@ (8005000 <ai_platform_network_destroy+0x20>)
 8004fe4:	6801      	ldr	r1, [r0, #0]
 8004fe6:	ea01 0c02 	and.w	ip, r1, r2
 8004fea:	438a      	bics	r2, r1
 8004fec:	d102      	bne.n	8004ff4 <ai_platform_network_destroy+0x14>
 8004fee:	4561      	cmp	r1, ip
 8004ff0:	d001      	beq.n	8004ff6 <ai_platform_network_destroy+0x16>
 8004ff2:	2000      	movs	r0, #0
 8004ff4:	bd08      	pop	{r3, pc}
 8004ff6:	f000 fceb 	bl	80059d0 <ai_layers_destroy_all>
 8004ffa:	2000      	movs	r0, #0
 8004ffc:	bd08      	pop	{r3, pc}
 8004ffe:	bf00      	nop
 8005000:	a1c00100 	.word	0xa1c00100

08005004 <ai_platform_network_init>:
 8005004:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005008:	4b63      	ldr	r3, [pc, #396]	@ (8005198 <ai_platform_network_init+0x194>)
 800500a:	6802      	ldr	r2, [r0, #0]
 800500c:	4393      	bics	r3, r2
 800500e:	b083      	sub	sp, #12
 8005010:	d156      	bne.n	80050c0 <ai_platform_network_init+0xbc>
 8005012:	4604      	mov	r4, r0
 8005014:	460f      	mov	r7, r1
 8005016:	2900      	cmp	r1, #0
 8005018:	f000 80a9 	beq.w	800516e <ai_platform_network_init+0x16a>
 800501c:	680b      	ldr	r3, [r1, #0]
 800501e:	495f      	ldr	r1, [pc, #380]	@ (800519c <ai_platform_network_init+0x198>)
 8005020:	428b      	cmp	r3, r1
 8005022:	d113      	bne.n	800504c <ai_platform_network_init+0x48>
 8005024:	495c      	ldr	r1, [pc, #368]	@ (8005198 <ai_platform_network_init+0x194>)
 8005026:	89bd      	ldrh	r5, [r7, #12]
 8005028:	f8b7 a00e 	ldrh.w	sl, [r7, #14]
 800502c:	f8d7 8010 	ldr.w	r8, [r7, #16]
 8005030:	f8b7 b004 	ldrh.w	fp, [r7, #4]
 8005034:	f8b7 9006 	ldrh.w	r9, [r7, #6]
 8005038:	68be      	ldr	r6, [r7, #8]
 800503a:	428a      	cmp	r2, r1
 800503c:	d02c      	beq.n	8005098 <ai_platform_network_init+0x94>
 800503e:	2303      	movs	r3, #3
 8005040:	6123      	str	r3, [r4, #16]
 8005042:	4627      	mov	r7, r4
 8005044:	4638      	mov	r0, r7
 8005046:	b003      	add	sp, #12
 8005048:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800504c:	2101      	movs	r1, #1
 800504e:	4638      	mov	r0, r7
 8005050:	9301      	str	r3, [sp, #4]
 8005052:	f8d7 b004 	ldr.w	fp, [r7, #4]
 8005056:	f7ff fbf7 	bl	8004848 <ai_buffer_get_size>
 800505a:	f107 081c 	add.w	r8, r7, #28
 800505e:	4605      	mov	r5, r0
 8005060:	2101      	movs	r1, #1
 8005062:	4640      	mov	r0, r8
 8005064:	463e      	mov	r6, r7
 8005066:	6a3f      	ldr	r7, [r7, #32]
 8005068:	f7ff fbee 	bl	8004848 <ai_buffer_get_size>
 800506c:	2d00      	cmp	r5, #0
 800506e:	9b01      	ldr	r3, [sp, #4]
 8005070:	bf0a      	itet	eq
 8005072:	46a9      	moveq	r9, r5
 8005074:	f04f 0901 	movne.w	r9, #1
 8005078:	462e      	moveq	r6, r5
 800507a:	b330      	cbz	r0, 80050ca <ai_platform_network_init+0xc6>
 800507c:	2f00      	cmp	r7, #0
 800507e:	f000 8084 	beq.w	800518a <ai_platform_network_init+0x186>
 8005082:	f04f 0a01 	mov.w	sl, #1
 8005086:	f1bb 0f00 	cmp.w	fp, #0
 800508a:	d021      	beq.n	80050d0 <ai_platform_network_init+0xcc>
 800508c:	2500      	movs	r5, #0
 800508e:	6822      	ldr	r2, [r4, #0]
 8005090:	4941      	ldr	r1, [pc, #260]	@ (8005198 <ai_platform_network_init+0x194>)
 8005092:	428a      	cmp	r2, r1
 8005094:	46ab      	mov	fp, r5
 8005096:	d1d2      	bne.n	800503e <ai_platform_network_init+0x3a>
 8005098:	8c62      	ldrh	r2, [r4, #34]	@ 0x22
 800509a:	454a      	cmp	r2, r9
 800509c:	4a3f      	ldr	r2, [pc, #252]	@ (800519c <ai_platform_network_init+0x198>)
 800509e:	d221      	bcs.n	80050e4 <ai_platform_network_init+0xe0>
 80050a0:	4293      	cmp	r3, r2
 80050a2:	d15c      	bne.n	800515e <ai_platform_network_init+0x15a>
 80050a4:	6266      	str	r6, [r4, #36]	@ 0x24
 80050a6:	f8a4 9022 	strh.w	r9, [r4, #34]	@ 0x22
 80050aa:	f8a4 b020 	strh.w	fp, [r4, #32]
 80050ae:	f8c4 802c 	str.w	r8, [r4, #44]	@ 0x2c
 80050b2:	f8a4 a02a 	strh.w	sl, [r4, #42]	@ 0x2a
 80050b6:	8525      	strh	r5, [r4, #40]	@ 0x28
 80050b8:	4620      	mov	r0, r4
 80050ba:	f000 fc1d 	bl	80058f8 <ai_layers_init_all>
 80050be:	e7be      	b.n	800503e <ai_platform_network_init+0x3a>
 80050c0:	2700      	movs	r7, #0
 80050c2:	4638      	mov	r0, r7
 80050c4:	b003      	add	sp, #12
 80050c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80050ca:	4680      	mov	r8, r0
 80050cc:	4682      	mov	sl, r0
 80050ce:	e7da      	b.n	8005086 <ai_platform_network_init+0x82>
 80050d0:	2d00      	cmp	r5, #0
 80050d2:	d0dc      	beq.n	800508e <ai_platform_network_init+0x8a>
 80050d4:	2212      	movs	r2, #18
 80050d6:	2110      	movs	r1, #16
 80050d8:	f104 000c 	add.w	r0, r4, #12
 80050dc:	f000 fb8a 	bl	80057f4 <core_set_error>
 80050e0:	465f      	mov	r7, fp
 80050e2:	e7af      	b.n	8005044 <ai_platform_network_init+0x40>
 80050e4:	4293      	cmp	r3, r2
 80050e6:	d0dd      	beq.n	80050a4 <ai_platform_network_init+0xa0>
 80050e8:	f1b9 0f00 	cmp.w	r9, #0
 80050ec:	d018      	beq.n	8005120 <ai_platform_network_init+0x11c>
 80050ee:	ebc9 03c9 	rsb	r3, r9, r9, lsl #3
 80050f2:	009b      	lsls	r3, r3, #2
 80050f4:	f8cd 9004 	str.w	r9, [sp, #4]
 80050f8:	2700      	movs	r7, #0
 80050fa:	4699      	mov	r9, r3
 80050fc:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80050fe:	eb06 0e07 	add.w	lr, r6, r7
 8005102:	eb03 0c07 	add.w	ip, r3, r7
 8005106:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800510a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800510e:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 8005112:	371c      	adds	r7, #28
 8005114:	45b9      	cmp	r9, r7
 8005116:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 800511a:	d1ef      	bne.n	80050fc <ai_platform_network_init+0xf8>
 800511c:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8005120:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8005122:	f8a4 9022 	strh.w	r9, [r4, #34]	@ 0x22
 8005126:	4553      	cmp	r3, sl
 8005128:	f8a4 b020 	strh.w	fp, [r4, #32]
 800512c:	d325      	bcc.n	800517a <ai_platform_network_init+0x176>
 800512e:	f1ba 0f00 	cmp.w	sl, #0
 8005132:	d0be      	beq.n	80050b2 <ai_platform_network_init+0xae>
 8005134:	ebca 0eca 	rsb	lr, sl, sl, lsl #3
 8005138:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 800513c:	f04f 0c00 	mov.w	ip, #0
 8005140:	eb08 070c 	add.w	r7, r8, ip
 8005144:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8005146:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005148:	4466      	add	r6, ip
 800514a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800514c:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8005150:	f10c 0c1c 	add.w	ip, ip, #28
 8005154:	45f4      	cmp	ip, lr
 8005156:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 800515a:	d1f1      	bne.n	8005140 <ai_platform_network_init+0x13c>
 800515c:	e7a9      	b.n	80050b2 <ai_platform_network_init+0xae>
 800515e:	2212      	movs	r2, #18
 8005160:	2116      	movs	r1, #22
 8005162:	f104 000c 	add.w	r0, r4, #12
 8005166:	f000 fb45 	bl	80057f4 <core_set_error>
 800516a:	2700      	movs	r7, #0
 800516c:	e76a      	b.n	8005044 <ai_platform_network_init+0x40>
 800516e:	2211      	movs	r2, #17
 8005170:	2110      	movs	r1, #16
 8005172:	300c      	adds	r0, #12
 8005174:	f000 fb3e 	bl	80057f4 <core_set_error>
 8005178:	e764      	b.n	8005044 <ai_platform_network_init+0x40>
 800517a:	2213      	movs	r2, #19
 800517c:	2116      	movs	r1, #22
 800517e:	f104 000c 	add.w	r0, r4, #12
 8005182:	f000 fb37 	bl	80057f4 <core_set_error>
 8005186:	2700      	movs	r7, #0
 8005188:	e75c      	b.n	8005044 <ai_platform_network_init+0x40>
 800518a:	2213      	movs	r2, #19
 800518c:	2110      	movs	r1, #16
 800518e:	f104 000c 	add.w	r0, r4, #12
 8005192:	f000 fb2f 	bl	80057f4 <core_set_error>
 8005196:	e755      	b.n	8005044 <ai_platform_network_init+0x40>
 8005198:	a1c00100 	.word	0xa1c00100
 800519c:	a1facade 	.word	0xa1facade

080051a0 <ai_platform_network_post_init>:
 80051a0:	b538      	push	{r3, r4, r5, lr}
 80051a2:	4b16      	ldr	r3, [pc, #88]	@ (80051fc <ai_platform_network_post_init+0x5c>)
 80051a4:	6802      	ldr	r2, [r0, #0]
 80051a6:	ea02 0103 	and.w	r1, r2, r3
 80051aa:	4393      	bics	r3, r2
 80051ac:	d108      	bne.n	80051c0 <ai_platform_network_post_init+0x20>
 80051ae:	6903      	ldr	r3, [r0, #16]
 80051b0:	f013 0502 	ands.w	r5, r3, #2
 80051b4:	4604      	mov	r4, r0
 80051b6:	d005      	beq.n	80051c4 <ai_platform_network_post_init+0x24>
 80051b8:	428a      	cmp	r2, r1
 80051ba:	d00a      	beq.n	80051d2 <ai_platform_network_post_init+0x32>
 80051bc:	2001      	movs	r0, #1
 80051be:	bd38      	pop	{r3, r4, r5, pc}
 80051c0:	2000      	movs	r0, #0
 80051c2:	bd38      	pop	{r3, r4, r5, pc}
 80051c4:	2210      	movs	r2, #16
 80051c6:	2111      	movs	r1, #17
 80051c8:	300c      	adds	r0, #12
 80051ca:	f000 fb13 	bl	80057f4 <core_set_error>
 80051ce:	4628      	mov	r0, r5
 80051d0:	bd38      	pop	{r3, r4, r5, pc}
 80051d2:	f000 fb9f 	bl	8005914 <ai_layers_post_init_all>
 80051d6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d0ef      	beq.n	80051bc <ai_platform_network_post_init+0x1c>
 80051dc:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
 80051de:	e008      	b.n	80051f2 <ai_platform_network_post_init+0x52>
 80051e0:	e9d4 3210 	ldrd	r3, r2, [r4, #64]	@ 0x40
 80051e4:	4798      	blx	r3
 80051e6:	692b      	ldr	r3, [r5, #16]
 80051e8:	42ab      	cmp	r3, r5
 80051ea:	d0e7      	beq.n	80051bc <ai_platform_network_post_init+0x1c>
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d0e5      	beq.n	80051bc <ai_platform_network_post_init+0x1c>
 80051f0:	461d      	mov	r5, r3
 80051f2:	4629      	mov	r1, r5
 80051f4:	2000      	movs	r0, #0
 80051f6:	2d00      	cmp	r5, #0
 80051f8:	d1f2      	bne.n	80051e0 <ai_platform_network_post_init+0x40>
 80051fa:	e7df      	b.n	80051bc <ai_platform_network_post_init+0x1c>
 80051fc:	a1c00100 	.word	0xa1c00100

08005200 <ai_platform_network_process>:
 8005200:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005204:	4bb5      	ldr	r3, [pc, #724]	@ (80054dc <ai_platform_network_process+0x2dc>)
 8005206:	4605      	mov	r5, r0
 8005208:	6800      	ldr	r0, [r0, #0]
 800520a:	b085      	sub	sp, #20
 800520c:	4383      	bics	r3, r0
 800520e:	9202      	str	r2, [sp, #8]
 8005210:	f040 8140 	bne.w	8005494 <ai_platform_network_process+0x294>
 8005214:	8e2b      	ldrh	r3, [r5, #48]	@ 0x30
 8005216:	2b00      	cmp	r3, #0
 8005218:	f000 8125 	beq.w	8005466 <ai_platform_network_process+0x266>
 800521c:	692b      	ldr	r3, [r5, #16]
 800521e:	f8d5 a034 	ldr.w	sl, [r5, #52]	@ 0x34
 8005222:	f003 0303 	and.w	r3, r3, #3
 8005226:	2700      	movs	r7, #0
 8005228:	2b03      	cmp	r3, #3
 800522a:	61af      	str	r7, [r5, #24]
 800522c:	f040 8137 	bne.w	800549e <ai_platform_network_process+0x29e>
 8005230:	2900      	cmp	r1, #0
 8005232:	f000 811e 	beq.w	8005472 <ai_platform_network_process+0x272>
 8005236:	f1ba 0f00 	cmp.w	sl, #0
 800523a:	f000 811a 	beq.w	8005472 <ai_platform_network_process+0x272>
 800523e:	f8ba 3000 	ldrh.w	r3, [sl]
 8005242:	2b00      	cmp	r3, #0
 8005244:	f000 8115 	beq.w	8005472 <ai_platform_network_process+0x272>
 8005248:	698b      	ldr	r3, [r1, #24]
 800524a:	9503      	str	r5, [sp, #12]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	9301      	str	r3, [sp, #4]
 8005250:	460e      	mov	r6, r1
 8005252:	f8da 3004 	ldr.w	r3, [sl, #4]
 8005256:	2b00      	cmp	r3, #0
 8005258:	d072      	beq.n	8005340 <ai_platform_network_process+0x140>
 800525a:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
 800525e:	2c00      	cmp	r4, #0
 8005260:	d06e      	beq.n	8005340 <ai_platform_network_process+0x140>
 8005262:	f8da 3008 	ldr.w	r3, [sl, #8]
 8005266:	f8d3 9000 	ldr.w	r9, [r3]
 800526a:	eb19 1807 	adds.w	r8, r9, r7, lsl #4
 800526e:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 8005272:	f000 81d3 	beq.w	800561c <ai_platform_network_process+0x41c>
 8005276:	69a3      	ldr	r3, [r4, #24]
 8005278:	2101      	movs	r1, #1
 800527a:	4630      	mov	r0, r6
 800527c:	685d      	ldr	r5, [r3, #4]
 800527e:	f7ff fae3 	bl	8004848 <ai_buffer_get_size>
 8005282:	4285      	cmp	r5, r0
 8005284:	f0c0 8116 	bcc.w	80054b4 <ai_platform_network_process+0x2b4>
 8005288:	68e0      	ldr	r0, [r4, #12]
 800528a:	69b1      	ldr	r1, [r6, #24]
 800528c:	68c2      	ldr	r2, [r0, #12]
 800528e:	68cb      	ldr	r3, [r1, #12]
 8005290:	429a      	cmp	r2, r3
 8005292:	f040 810f 	bne.w	80054b4 <ai_platform_network_process+0x2b4>
 8005296:	6882      	ldr	r2, [r0, #8]
 8005298:	688b      	ldr	r3, [r1, #8]
 800529a:	429a      	cmp	r2, r3
 800529c:	f040 810a 	bne.w	80054b4 <ai_platform_network_process+0x2b4>
 80052a0:	6842      	ldr	r2, [r0, #4]
 80052a2:	684b      	ldr	r3, [r1, #4]
 80052a4:	429a      	cmp	r2, r3
 80052a6:	f040 8105 	bne.w	80054b4 <ai_platform_network_process+0x2b4>
 80052aa:	69a3      	ldr	r3, [r4, #24]
 80052ac:	e9d3 0100 	ldrd	r0, r1, [r3]
 80052b0:	f003 fa32 	bl	8008718 <ai_array_get_data_byte_size>
 80052b4:	4605      	mov	r5, r0
 80052b6:	4620      	mov	r0, r4
 80052b8:	f003 fa58 	bl	800876c <get_tensor_byte_size>
 80052bc:	4285      	cmp	r5, r0
 80052be:	f0c0 80f9 	bcc.w	80054b4 <ai_platform_network_process+0x2b4>
 80052c2:	69a3      	ldr	r3, [r4, #24]
 80052c4:	6818      	ldr	r0, [r3, #0]
 80052c6:	f003 f98f 	bl	80085e8 <ai_array_to_buffer_fmt>
 80052ca:	6833      	ldr	r3, [r6, #0]
 80052cc:	4058      	eors	r0, r3
 80052ce:	f030 407e 	bics.w	r0, r0, #4261412864	@ 0xfe000000
 80052d2:	f040 81a5 	bne.w	8005620 <ai_platform_network_process+0x420>
 80052d6:	6873      	ldr	r3, [r6, #4]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	f000 819f 	beq.w	800561c <ai_platform_network_process+0x41c>
 80052de:	69b3      	ldr	r3, [r6, #24]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	f000 81a5 	beq.w	8005632 <ai_platform_network_process+0x432>
 80052e8:	9a01      	ldr	r2, [sp, #4]
 80052ea:	429a      	cmp	r2, r3
 80052ec:	bf38      	it	cc
 80052ee:	461a      	movcc	r2, r3
 80052f0:	4620      	mov	r0, r4
 80052f2:	9201      	str	r2, [sp, #4]
 80052f4:	f003 fa3a 	bl	800876c <get_tensor_byte_size>
 80052f8:	f8c8 0008 	str.w	r0, [r8, #8]
 80052fc:	69b3      	ldr	r3, [r6, #24]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	fb00 f303 	mul.w	r3, r0, r3
 8005304:	f8c8 300c 	str.w	r3, [r8, #12]
 8005308:	6871      	ldr	r1, [r6, #4]
 800530a:	f8c8 1004 	str.w	r1, [r8, #4]
 800530e:	440b      	add	r3, r1
 8005310:	f849 300b 	str.w	r3, [r9, fp]
 8005314:	69a0      	ldr	r0, [r4, #24]
 8005316:	6803      	ldr	r3, [r0, #0]
 8005318:	009a      	lsls	r2, r3, #2
 800531a:	f107 0701 	add.w	r7, r7, #1
 800531e:	f106 061c 	add.w	r6, r6, #28
 8005322:	f100 80b1 	bmi.w	8005488 <ai_platform_network_process+0x288>
 8005326:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 800532a:	1a9b      	subs	r3, r3, r2
 800532c:	4419      	add	r1, r3
 800532e:	6081      	str	r1, [r0, #8]
 8005330:	69a3      	ldr	r3, [r4, #24]
 8005332:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8005336:	60da      	str	r2, [r3, #12]
 8005338:	f8ba 3000 	ldrh.w	r3, [sl]
 800533c:	42bb      	cmp	r3, r7
 800533e:	d888      	bhi.n	8005252 <ai_platform_network_process+0x52>
 8005340:	9d03      	ldr	r5, [sp, #12]
 8005342:	9b02      	ldr	r3, [sp, #8]
 8005344:	8e2a      	ldrh	r2, [r5, #48]	@ 0x30
 8005346:	2b00      	cmp	r3, #0
 8005348:	f000 817c 	beq.w	8005644 <ai_platform_network_process+0x444>
 800534c:	2a01      	cmp	r2, #1
 800534e:	f240 80bd 	bls.w	80054cc <ai_platform_network_process+0x2cc>
 8005352:	f8d5 8034 	ldr.w	r8, [r5, #52]	@ 0x34
 8005356:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 800535a:	2b00      	cmp	r3, #0
 800535c:	f000 80b6 	beq.w	80054cc <ai_platform_network_process+0x2cc>
 8005360:	f8dd b008 	ldr.w	fp, [sp, #8]
 8005364:	2700      	movs	r7, #0
 8005366:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800536a:	2b00      	cmp	r3, #0
 800536c:	f000 80bd 	beq.w	80054ea <ai_platform_network_process+0x2ea>
 8005370:	f853 6027 	ldr.w	r6, [r3, r7, lsl #2]
 8005374:	2e00      	cmp	r6, #0
 8005376:	f000 80b8 	beq.w	80054ea <ai_platform_network_process+0x2ea>
 800537a:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800537e:	681c      	ldr	r4, [r3, #0]
 8005380:	eb14 1907 	adds.w	r9, r4, r7, lsl #4
 8005384:	ea4f 1a07 	mov.w	sl, r7, lsl #4
 8005388:	f000 8160 	beq.w	800564c <ai_platform_network_process+0x44c>
 800538c:	69b3      	ldr	r3, [r6, #24]
 800538e:	2101      	movs	r1, #1
 8005390:	685b      	ldr	r3, [r3, #4]
 8005392:	9302      	str	r3, [sp, #8]
 8005394:	4658      	mov	r0, fp
 8005396:	f7ff fa57 	bl	8004848 <ai_buffer_get_size>
 800539a:	9b02      	ldr	r3, [sp, #8]
 800539c:	4283      	cmp	r3, r0
 800539e:	f0c0 8095 	bcc.w	80054cc <ai_platform_network_process+0x2cc>
 80053a2:	68f0      	ldr	r0, [r6, #12]
 80053a4:	f8db 1018 	ldr.w	r1, [fp, #24]
 80053a8:	68c2      	ldr	r2, [r0, #12]
 80053aa:	68cb      	ldr	r3, [r1, #12]
 80053ac:	429a      	cmp	r2, r3
 80053ae:	f040 808d 	bne.w	80054cc <ai_platform_network_process+0x2cc>
 80053b2:	6882      	ldr	r2, [r0, #8]
 80053b4:	688b      	ldr	r3, [r1, #8]
 80053b6:	429a      	cmp	r2, r3
 80053b8:	f040 8088 	bne.w	80054cc <ai_platform_network_process+0x2cc>
 80053bc:	6842      	ldr	r2, [r0, #4]
 80053be:	684b      	ldr	r3, [r1, #4]
 80053c0:	429a      	cmp	r2, r3
 80053c2:	f040 8083 	bne.w	80054cc <ai_platform_network_process+0x2cc>
 80053c6:	69b3      	ldr	r3, [r6, #24]
 80053c8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80053cc:	f003 f9a4 	bl	8008718 <ai_array_get_data_byte_size>
 80053d0:	9002      	str	r0, [sp, #8]
 80053d2:	4630      	mov	r0, r6
 80053d4:	f003 f9ca 	bl	800876c <get_tensor_byte_size>
 80053d8:	9b02      	ldr	r3, [sp, #8]
 80053da:	4283      	cmp	r3, r0
 80053dc:	d376      	bcc.n	80054cc <ai_platform_network_process+0x2cc>
 80053de:	69b3      	ldr	r3, [r6, #24]
 80053e0:	6818      	ldr	r0, [r3, #0]
 80053e2:	f003 f901 	bl	80085e8 <ai_array_to_buffer_fmt>
 80053e6:	f8db 3000 	ldr.w	r3, [fp]
 80053ea:	4058      	eors	r0, r3
 80053ec:	f030 407e 	bics.w	r0, r0, #4261412864	@ 0xfe000000
 80053f0:	f040 8134 	bne.w	800565c <ai_platform_network_process+0x45c>
 80053f4:	f8db 3004 	ldr.w	r3, [fp, #4]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	f000 8127 	beq.w	800564c <ai_platform_network_process+0x44c>
 80053fe:	f8db 3018 	ldr.w	r3, [fp, #24]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	2b00      	cmp	r3, #0
 8005406:	f000 8133 	beq.w	8005670 <ai_platform_network_process+0x470>
 800540a:	9a01      	ldr	r2, [sp, #4]
 800540c:	429a      	cmp	r2, r3
 800540e:	bf38      	it	cc
 8005410:	461a      	movcc	r2, r3
 8005412:	4630      	mov	r0, r6
 8005414:	9201      	str	r2, [sp, #4]
 8005416:	f003 f9a9 	bl	800876c <get_tensor_byte_size>
 800541a:	f8c9 0008 	str.w	r0, [r9, #8]
 800541e:	f8db 3018 	ldr.w	r3, [fp, #24]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	fb00 f303 	mul.w	r3, r0, r3
 8005428:	f8c9 300c 	str.w	r3, [r9, #12]
 800542c:	f8db 1004 	ldr.w	r1, [fp, #4]
 8005430:	f8c9 1004 	str.w	r1, [r9, #4]
 8005434:	440b      	add	r3, r1
 8005436:	f844 300a 	str.w	r3, [r4, sl]
 800543a:	69b0      	ldr	r0, [r6, #24]
 800543c:	6803      	ldr	r3, [r0, #0]
 800543e:	009b      	lsls	r3, r3, #2
 8005440:	f107 0701 	add.w	r7, r7, #1
 8005444:	f10b 0b1c 	add.w	fp, fp, #28
 8005448:	d44a      	bmi.n	80054e0 <ai_platform_network_process+0x2e0>
 800544a:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 800544e:	1a9b      	subs	r3, r3, r2
 8005450:	4419      	add	r1, r3
 8005452:	6081      	str	r1, [r0, #8]
 8005454:	69b3      	ldr	r3, [r6, #24]
 8005456:	f8d9 2004 	ldr.w	r2, [r9, #4]
 800545a:	60da      	str	r2, [r3, #12]
 800545c:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 8005460:	42bb      	cmp	r3, r7
 8005462:	d880      	bhi.n	8005366 <ai_platform_network_process+0x166>
 8005464:	e041      	b.n	80054ea <ai_platform_network_process+0x2ea>
 8005466:	692a      	ldr	r2, [r5, #16]
 8005468:	61ab      	str	r3, [r5, #24]
 800546a:	f002 0203 	and.w	r2, r2, #3
 800546e:	2a03      	cmp	r2, #3
 8005470:	d115      	bne.n	800549e <ai_platform_network_process+0x29e>
 8005472:	2217      	movs	r2, #23
 8005474:	2112      	movs	r1, #18
 8005476:	f105 000c 	add.w	r0, r5, #12
 800547a:	f000 f9bb 	bl	80057f4 <core_set_error>
 800547e:	2400      	movs	r4, #0
 8005480:	4620      	mov	r0, r4
 8005482:	b005      	add	sp, #20
 8005484:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005488:	f8ba 3000 	ldrh.w	r3, [sl]
 800548c:	429f      	cmp	r7, r3
 800548e:	f4ff aee0 	bcc.w	8005252 <ai_platform_network_process+0x52>
 8005492:	e755      	b.n	8005340 <ai_platform_network_process+0x140>
 8005494:	2400      	movs	r4, #0
 8005496:	4620      	mov	r0, r4
 8005498:	b005      	add	sp, #20
 800549a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800549e:	2230      	movs	r2, #48	@ 0x30
 80054a0:	2111      	movs	r1, #17
 80054a2:	f105 000c 	add.w	r0, r5, #12
 80054a6:	f000 f9a5 	bl	80057f4 <core_set_error>
 80054aa:	2400      	movs	r4, #0
 80054ac:	4620      	mov	r0, r4
 80054ae:	b005      	add	sp, #20
 80054b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80054b4:	9d03      	ldr	r5, [sp, #12]
 80054b6:	2218      	movs	r2, #24
 80054b8:	2112      	movs	r1, #18
 80054ba:	f105 000c 	add.w	r0, r5, #12
 80054be:	f000 f999 	bl	80057f4 <core_set_error>
 80054c2:	2400      	movs	r4, #0
 80054c4:	4620      	mov	r0, r4
 80054c6:	b005      	add	sp, #20
 80054c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80054cc:	2218      	movs	r2, #24
 80054ce:	2113      	movs	r1, #19
 80054d0:	f105 000c 	add.w	r0, r5, #12
 80054d4:	f000 f98e 	bl	80057f4 <core_set_error>
 80054d8:	2400      	movs	r4, #0
 80054da:	e7d1      	b.n	8005480 <ai_platform_network_process+0x280>
 80054dc:	a1c00100 	.word	0xa1c00100
 80054e0:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 80054e4:	429f      	cmp	r7, r3
 80054e6:	f4ff af3e 	bcc.w	8005366 <ai_platform_network_process+0x166>
 80054ea:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80054ee:	8e2a      	ldrh	r2, [r5, #48]	@ 0x30
 80054f0:	832b      	strh	r3, [r5, #24]
 80054f2:	2a00      	cmp	r2, #0
 80054f4:	f040 808c 	bne.w	8005610 <ai_platform_network_process+0x410>
 80054f8:	4616      	mov	r6, r2
 80054fa:	4617      	mov	r7, r2
 80054fc:	8b6c      	ldrh	r4, [r5, #26]
 80054fe:	429c      	cmp	r4, r3
 8005500:	bf38      	it	cc
 8005502:	46ab      	movcc	fp, r5
 8005504:	d2bc      	bcs.n	8005480 <ai_platform_network_process+0x280>
 8005506:	2e00      	cmp	r6, #0
 8005508:	d030      	beq.n	800556c <ai_platform_network_process+0x36c>
 800550a:	f04f 0800 	mov.w	r8, #0
 800550e:	e014      	b.n	800553a <ai_platform_network_process+0x33a>
 8005510:	6882      	ldr	r2, [r0, #8]
 8005512:	68c5      	ldr	r5, [r0, #12]
 8005514:	6863      	ldr	r3, [r4, #4]
 8005516:	1b52      	subs	r2, r2, r5
 8005518:	4413      	add	r3, r2
 800551a:	6083      	str	r3, [r0, #8]
 800551c:	698b      	ldr	r3, [r1, #24]
 800551e:	6862      	ldr	r2, [r4, #4]
 8005520:	60da      	str	r2, [r3, #12]
 8005522:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 8005526:	f859 200a 	ldr.w	r2, [r9, sl]
 800552a:	440b      	add	r3, r1
 800552c:	4293      	cmp	r3, r2
 800552e:	bf24      	itt	cs
 8005530:	68e3      	ldrcs	r3, [r4, #12]
 8005532:	1ad3      	subcs	r3, r2, r3
 8005534:	6063      	str	r3, [r4, #4]
 8005536:	f108 0801 	add.w	r8, r8, #1
 800553a:	8833      	ldrh	r3, [r6, #0]
 800553c:	4543      	cmp	r3, r8
 800553e:	ea4f 1a08 	mov.w	sl, r8, lsl #4
 8005542:	d913      	bls.n	800556c <ai_platform_network_process+0x36c>
 8005544:	6873      	ldr	r3, [r6, #4]
 8005546:	b18b      	cbz	r3, 800556c <ai_platform_network_process+0x36c>
 8005548:	f853 1028 	ldr.w	r1, [r3, r8, lsl #2]
 800554c:	b171      	cbz	r1, 800556c <ai_platform_network_process+0x36c>
 800554e:	6988      	ldr	r0, [r1, #24]
 8005550:	68b2      	ldr	r2, [r6, #8]
 8005552:	6803      	ldr	r3, [r0, #0]
 8005554:	f8d2 9000 	ldr.w	r9, [r2]
 8005558:	009d      	lsls	r5, r3, #2
 800555a:	eb09 1408 	add.w	r4, r9, r8, lsl #4
 800555e:	d5d7      	bpl.n	8005510 <ai_platform_network_process+0x310>
 8005560:	6881      	ldr	r1, [r0, #8]
 8005562:	68a2      	ldr	r2, [r4, #8]
 8005564:	6860      	ldr	r0, [r4, #4]
 8005566:	f002 ffb9 	bl	80084dc <st_int8_copy>
 800556a:	e7da      	b.n	8005522 <ai_platform_network_process+0x322>
 800556c:	4658      	mov	r0, fp
 800556e:	f000 f9e5 	bl	800593c <ai_layers_forward_all>
 8005572:	2f00      	cmp	r7, #0
 8005574:	d03d      	beq.n	80055f2 <ai_platform_network_process+0x3f2>
 8005576:	2400      	movs	r4, #0
 8005578:	e016      	b.n	80055a8 <ai_platform_network_process+0x3a8>
 800557a:	e9d8 3201 	ldrd	r3, r2, [r8, #4]
 800557e:	f859 100a 	ldr.w	r1, [r9, sl]
 8005582:	4413      	add	r3, r2
 8005584:	428b      	cmp	r3, r1
 8005586:	bf24      	itt	cs
 8005588:	f8d8 300c 	ldrcs.w	r3, [r8, #12]
 800558c:	1acb      	subcs	r3, r1, r3
 800558e:	f8c8 3004 	str.w	r3, [r8, #4]
 8005592:	6981      	ldr	r1, [r0, #24]
 8005594:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
 8005598:	1b52      	subs	r2, r2, r5
 800559a:	4413      	add	r3, r2
 800559c:	608b      	str	r3, [r1, #8]
 800559e:	6983      	ldr	r3, [r0, #24]
 80055a0:	f8d8 2004 	ldr.w	r2, [r8, #4]
 80055a4:	60da      	str	r2, [r3, #12]
 80055a6:	3401      	adds	r4, #1
 80055a8:	883b      	ldrh	r3, [r7, #0]
 80055aa:	42a3      	cmp	r3, r4
 80055ac:	d921      	bls.n	80055f2 <ai_platform_network_process+0x3f2>
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	b1fb      	cbz	r3, 80055f2 <ai_platform_network_process+0x3f2>
 80055b2:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80055b6:	b1e0      	cbz	r0, 80055f2 <ai_platform_network_process+0x3f2>
 80055b8:	68ba      	ldr	r2, [r7, #8]
 80055ba:	6983      	ldr	r3, [r0, #24]
 80055bc:	f8d2 9000 	ldr.w	r9, [r2]
 80055c0:	681a      	ldr	r2, [r3, #0]
 80055c2:	0092      	lsls	r2, r2, #2
 80055c4:	ea4f 1a04 	mov.w	sl, r4, lsl #4
 80055c8:	eb09 1804 	add.w	r8, r9, r4, lsl #4
 80055cc:	d5d5      	bpl.n	800557a <ai_platform_network_process+0x37a>
 80055ce:	e9d8 1201 	ldrd	r1, r2, [r8, #4]
 80055d2:	6898      	ldr	r0, [r3, #8]
 80055d4:	f002 ff82 	bl	80084dc <st_int8_copy>
 80055d8:	e9d8 3101 	ldrd	r3, r1, [r8, #4]
 80055dc:	f859 200a 	ldr.w	r2, [r9, sl]
 80055e0:	440b      	add	r3, r1
 80055e2:	4293      	cmp	r3, r2
 80055e4:	bf24      	itt	cs
 80055e6:	f8d8 300c 	ldrcs.w	r3, [r8, #12]
 80055ea:	1ad3      	subcs	r3, r2, r3
 80055ec:	f8c8 3004 	str.w	r3, [r8, #4]
 80055f0:	e7d9      	b.n	80055a6 <ai_platform_network_process+0x3a6>
 80055f2:	f8bb 401a 	ldrh.w	r4, [fp, #26]
 80055f6:	f8bb 3018 	ldrh.w	r3, [fp, #24]
 80055fa:	3401      	adds	r4, #1
 80055fc:	b2a4      	uxth	r4, r4
 80055fe:	42a3      	cmp	r3, r4
 8005600:	f8ab 401a 	strh.w	r4, [fp, #26]
 8005604:	f63f af7f 	bhi.w	8005506 <ai_platform_network_process+0x306>
 8005608:	4620      	mov	r0, r4
 800560a:	b005      	add	sp, #20
 800560c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005610:	2a01      	cmp	r2, #1
 8005612:	6b6e      	ldr	r6, [r5, #52]	@ 0x34
 8005614:	d02a      	beq.n	800566c <ai_platform_network_process+0x46c>
 8005616:	f106 070c 	add.w	r7, r6, #12
 800561a:	e76f      	b.n	80054fc <ai_platform_network_process+0x2fc>
 800561c:	9d03      	ldr	r5, [sp, #12]
 800561e:	e728      	b.n	8005472 <ai_platform_network_process+0x272>
 8005620:	9d03      	ldr	r5, [sp, #12]
 8005622:	2219      	movs	r2, #25
 8005624:	2112      	movs	r1, #18
 8005626:	f105 000c 	add.w	r0, r5, #12
 800562a:	f000 f8e3 	bl	80057f4 <core_set_error>
 800562e:	2400      	movs	r4, #0
 8005630:	e726      	b.n	8005480 <ai_platform_network_process+0x280>
 8005632:	9d03      	ldr	r5, [sp, #12]
 8005634:	4604      	mov	r4, r0
 8005636:	2221      	movs	r2, #33	@ 0x21
 8005638:	2112      	movs	r1, #18
 800563a:	f105 000c 	add.w	r0, r5, #12
 800563e:	f000 f8d9 	bl	80057f4 <core_set_error>
 8005642:	e71d      	b.n	8005480 <ai_platform_network_process+0x280>
 8005644:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8005648:	832b      	strh	r3, [r5, #24]
 800564a:	e752      	b.n	80054f2 <ai_platform_network_process+0x2f2>
 800564c:	2217      	movs	r2, #23
 800564e:	2113      	movs	r1, #19
 8005650:	f105 000c 	add.w	r0, r5, #12
 8005654:	f000 f8ce 	bl	80057f4 <core_set_error>
 8005658:	2400      	movs	r4, #0
 800565a:	e711      	b.n	8005480 <ai_platform_network_process+0x280>
 800565c:	2219      	movs	r2, #25
 800565e:	2113      	movs	r1, #19
 8005660:	f105 000c 	add.w	r0, r5, #12
 8005664:	f000 f8c6 	bl	80057f4 <core_set_error>
 8005668:	2400      	movs	r4, #0
 800566a:	e709      	b.n	8005480 <ai_platform_network_process+0x280>
 800566c:	2700      	movs	r7, #0
 800566e:	e745      	b.n	80054fc <ai_platform_network_process+0x2fc>
 8005670:	4604      	mov	r4, r0
 8005672:	2221      	movs	r2, #33	@ 0x21
 8005674:	2113      	movs	r1, #19
 8005676:	f105 000c 	add.w	r0, r5, #12
 800567a:	f000 f8bb 	bl	80057f4 <core_set_error>
 800567e:	e6ff      	b.n	8005480 <ai_platform_network_process+0x280>

08005680 <ai_platform_observer_node_info>:
 8005680:	b538      	push	{r3, r4, r5, lr}
 8005682:	4b27      	ldr	r3, [pc, #156]	@ (8005720 <ai_platform_observer_node_info+0xa0>)
 8005684:	6802      	ldr	r2, [r0, #0]
 8005686:	4393      	bics	r3, r2
 8005688:	d124      	bne.n	80056d4 <ai_platform_observer_node_info+0x54>
 800568a:	460c      	mov	r4, r1
 800568c:	b1d9      	cbz	r1, 80056c6 <ai_platform_observer_node_info+0x46>
 800568e:	6903      	ldr	r3, [r0, #16]
 8005690:	f013 0502 	ands.w	r5, r3, #2
 8005694:	d02f      	beq.n	80056f6 <ai_platform_observer_node_info+0x76>
 8005696:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8005698:	f04f 0c00 	mov.w	ip, #0
 800569c:	e001      	b.n	80056a2 <ai_platform_observer_node_info+0x22>
 800569e:	b15a      	cbz	r2, 80056b8 <ai_platform_observer_node_info+0x38>
 80056a0:	4613      	mov	r3, r2
 80056a2:	fa1f f18c 	uxth.w	r1, ip
 80056a6:	b13b      	cbz	r3, 80056b8 <ai_platform_observer_node_info+0x38>
 80056a8:	8822      	ldrh	r2, [r4, #0]
 80056aa:	428a      	cmp	r2, r1
 80056ac:	f10c 0c01 	add.w	ip, ip, #1
 80056b0:	d012      	beq.n	80056d8 <ai_platform_observer_node_info+0x58>
 80056b2:	691a      	ldr	r2, [r3, #16]
 80056b4:	429a      	cmp	r2, r3
 80056b6:	d1f2      	bne.n	800569e <ai_platform_observer_node_info+0x1e>
 80056b8:	2214      	movs	r2, #20
 80056ba:	4611      	mov	r1, r2
 80056bc:	300c      	adds	r0, #12
 80056be:	f000 f899 	bl	80057f4 <core_set_error>
 80056c2:	2000      	movs	r0, #0
 80056c4:	bd38      	pop	{r3, r4, r5, pc}
 80056c6:	2210      	movs	r2, #16
 80056c8:	4611      	mov	r1, r2
 80056ca:	300c      	adds	r0, #12
 80056cc:	f000 f892 	bl	80057f4 <core_set_error>
 80056d0:	4620      	mov	r0, r4
 80056d2:	bd38      	pop	{r3, r4, r5, pc}
 80056d4:	2000      	movs	r0, #0
 80056d6:	bd38      	pop	{r3, r4, r5, pc}
 80056d8:	699a      	ldr	r2, [r3, #24]
 80056da:	60e2      	str	r2, [r4, #12]
 80056dc:	8819      	ldrh	r1, [r3, #0]
 80056de:	f240 120f 	movw	r2, #271	@ 0x10f
 80056e2:	4291      	cmp	r1, r2
 80056e4:	d00e      	beq.n	8005704 <ai_platform_observer_node_info+0x84>
 80056e6:	885a      	ldrh	r2, [r3, #2]
 80056e8:	80a2      	strh	r2, [r4, #4]
 80056ea:	881a      	ldrh	r2, [r3, #0]
 80056ec:	8062      	strh	r2, [r4, #2]
 80056ee:	2300      	movs	r3, #0
 80056f0:	60a3      	str	r3, [r4, #8]
 80056f2:	2001      	movs	r0, #1
 80056f4:	bd38      	pop	{r3, r4, r5, pc}
 80056f6:	2210      	movs	r2, #16
 80056f8:	2111      	movs	r1, #17
 80056fa:	300c      	adds	r0, #12
 80056fc:	f000 f87a 	bl	80057f4 <core_set_error>
 8005700:	4628      	mov	r0, r5
 8005702:	bd38      	pop	{r3, r4, r5, pc}
 8005704:	69da      	ldr	r2, [r3, #28]
 8005706:	8853      	ldrh	r3, [r2, #2]
 8005708:	80a3      	strh	r3, [r4, #4]
 800570a:	8813      	ldrh	r3, [r2, #0]
 800570c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005710:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005714:	8063      	strh	r3, [r4, #2]
 8005716:	6993      	ldr	r3, [r2, #24]
 8005718:	60a3      	str	r3, [r4, #8]
 800571a:	2001      	movs	r0, #1
 800571c:	bd38      	pop	{r3, r4, r5, pc}
 800571e:	bf00      	nop
 8005720:	a1c00100 	.word	0xa1c00100

08005724 <ai_platform_observer_register>:
 8005724:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005728:	4606      	mov	r6, r0
 800572a:	4698      	mov	r8, r3
 800572c:	4821      	ldr	r0, [pc, #132]	@ (80057b4 <ai_platform_observer_register+0x90>)
 800572e:	6833      	ldr	r3, [r6, #0]
 8005730:	4398      	bics	r0, r3
 8005732:	d133      	bne.n	800579c <ai_platform_observer_register+0x78>
 8005734:	6c74      	ldr	r4, [r6, #68]	@ 0x44
 8005736:	b144      	cbz	r4, 800574a <ai_platform_observer_register+0x26>
 8005738:	2240      	movs	r2, #64	@ 0x40
 800573a:	2111      	movs	r1, #17
 800573c:	f106 000c 	add.w	r0, r6, #12
 8005740:	f000 f858 	bl	80057f4 <core_set_error>
 8005744:	2000      	movs	r0, #0
 8005746:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800574a:	2014      	movs	r0, #20
 800574c:	4689      	mov	r9, r1
 800574e:	4692      	mov	sl, r2
 8005750:	f000 f85c 	bl	800580c <core_mem_alloc>
 8005754:	4607      	mov	r7, r0
 8005756:	b320      	cbz	r0, 80057a2 <ai_platform_observer_register+0x7e>
 8005758:	81c4      	strh	r4, [r0, #14]
 800575a:	6bb4      	ldr	r4, [r6, #56]	@ 0x38
 800575c:	f04f 0c01 	mov.w	ip, #1
 8005760:	e008      	b.n	8005774 <ai_platform_observer_register+0x50>
 8005762:	f8a7 c00e 	strh.w	ip, [r7, #14]
 8005766:	6925      	ldr	r5, [r4, #16]
 8005768:	42a5      	cmp	r5, r4
 800576a:	fa1f fc80 	uxth.w	ip, r0
 800576e:	d005      	beq.n	800577c <ai_platform_observer_register+0x58>
 8005770:	b125      	cbz	r5, 800577c <ai_platform_observer_register+0x58>
 8005772:	462c      	mov	r4, r5
 8005774:	f10c 0001 	add.w	r0, ip, #1
 8005778:	2c00      	cmp	r4, #0
 800577a:	d1f2      	bne.n	8005762 <ai_platform_observer_register+0x3e>
 800577c:	4a0e      	ldr	r2, [pc, #56]	@ (80057b8 <ai_platform_observer_register+0x94>)
 800577e:	f8c7 9000 	str.w	r9, [r7]
 8005782:	fa5f f888 	uxtb.w	r8, r8
 8005786:	f048 7380 	orr.w	r3, r8, #16777216	@ 0x1000000
 800578a:	2100      	movs	r1, #0
 800578c:	e9c7 a301 	strd	sl, r3, [r7, #4]
 8005790:	81b9      	strh	r1, [r7, #12]
 8005792:	e9c6 2710 	strd	r2, r7, [r6, #64]	@ 0x40
 8005796:	2001      	movs	r0, #1
 8005798:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800579c:	2000      	movs	r0, #0
 800579e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80057a2:	2210      	movs	r2, #16
 80057a4:	2131      	movs	r1, #49	@ 0x31
 80057a6:	f106 000c 	add.w	r0, r6, #12
 80057aa:	f000 f823 	bl	80057f4 <core_set_error>
 80057ae:	4638      	mov	r0, r7
 80057b0:	e7c9      	b.n	8005746 <ai_platform_observer_register+0x22>
 80057b2:	bf00      	nop
 80057b4:	a1c00100 	.word	0xa1c00100
 80057b8:	080048f5 	.word	0x080048f5

080057bc <ai_platform_observer_unregister>:
 80057bc:	4b08      	ldr	r3, [pc, #32]	@ (80057e0 <ai_platform_observer_unregister+0x24>)
 80057be:	6802      	ldr	r2, [r0, #0]
 80057c0:	4393      	bics	r3, r2
 80057c2:	d10a      	bne.n	80057da <ai_platform_observer_unregister+0x1e>
 80057c4:	b510      	push	{r4, lr}
 80057c6:	4604      	mov	r4, r0
 80057c8:	6c40      	ldr	r0, [r0, #68]	@ 0x44
 80057ca:	b108      	cbz	r0, 80057d0 <ai_platform_observer_unregister+0x14>
 80057cc:	f000 f82c 	bl	8005828 <core_mem_free>
 80057d0:	2300      	movs	r3, #0
 80057d2:	e9c4 3310 	strd	r3, r3, [r4, #64]	@ 0x40
 80057d6:	2001      	movs	r0, #1
 80057d8:	bd10      	pop	{r4, pc}
 80057da:	2000      	movs	r0, #0
 80057dc:	4770      	bx	lr
 80057de:	bf00      	nop
 80057e0:	a1c00100 	.word	0xa1c00100

080057e4 <core_init>:
 80057e4:	2001      	movs	r0, #1
 80057e6:	4770      	bx	lr

080057e8 <core_get_error>:
 80057e8:	4603      	mov	r3, r0
 80057ea:	2200      	movs	r2, #0
 80057ec:	6800      	ldr	r0, [r0, #0]
 80057ee:	601a      	str	r2, [r3, #0]
 80057f0:	4770      	bx	lr
 80057f2:	bf00      	nop

080057f4 <core_set_error>:
 80057f4:	4603      	mov	r3, r0
 80057f6:	7800      	ldrb	r0, [r0, #0]
 80057f8:	b108      	cbz	r0, 80057fe <core_set_error+0xa>
 80057fa:	2000      	movs	r0, #0
 80057fc:	4770      	bx	lr
 80057fe:	7019      	strb	r1, [r3, #0]
 8005800:	6819      	ldr	r1, [r3, #0]
 8005802:	f362 211f 	bfi	r1, r2, #8, #24
 8005806:	2001      	movs	r0, #1
 8005808:	6019      	str	r1, [r3, #0]
 800580a:	4770      	bx	lr

0800580c <core_mem_alloc>:
 800580c:	b148      	cbz	r0, 8005822 <core_mem_alloc+0x16>
 800580e:	b508      	push	{r3, lr}
 8005810:	3004      	adds	r0, #4
 8005812:	f7fe f971 	bl	8003af8 <__wrap_malloc>
 8005816:	b110      	cbz	r0, 800581e <core_mem_alloc+0x12>
 8005818:	6000      	str	r0, [r0, #0]
 800581a:	3004      	adds	r0, #4
 800581c:	bd08      	pop	{r3, pc}
 800581e:	2000      	movs	r0, #0
 8005820:	bd08      	pop	{r3, pc}
 8005822:	2000      	movs	r0, #0
 8005824:	4770      	bx	lr
 8005826:	bf00      	nop

08005828 <core_mem_free>:
 8005828:	b168      	cbz	r0, 8005846 <core_mem_free+0x1e>
 800582a:	f850 2c04 	ldr.w	r2, [r0, #-4]
 800582e:	1f03      	subs	r3, r0, #4
 8005830:	4293      	cmp	r3, r2
 8005832:	d108      	bne.n	8005846 <core_mem_free+0x1e>
 8005834:	b510      	push	{r4, lr}
 8005836:	2400      	movs	r4, #0
 8005838:	f840 4c04 	str.w	r4, [r0, #-4]
 800583c:	4618      	mov	r0, r3
 800583e:	f7fe f983 	bl	8003b48 <__wrap_free>
 8005842:	4620      	mov	r0, r4
 8005844:	bd10      	pop	{r4, pc}
 8005846:	4770      	bx	lr

08005848 <ai_check_custom_types>:
 8005848:	b082      	sub	sp, #8
 800584a:	4b13      	ldr	r3, [pc, #76]	@ (8005898 <ai_check_custom_types+0x50>)
 800584c:	9301      	str	r3, [sp, #4]
 800584e:	b118      	cbz	r0, 8005858 <ai_check_custom_types+0x10>
 8005850:	7803      	ldrb	r3, [r0, #0]
 8005852:	2b03      	cmp	r3, #3
 8005854:	d002      	beq.n	800585c <ai_check_custom_types+0x14>
 8005856:	2000      	movs	r0, #0
 8005858:	b002      	add	sp, #8
 800585a:	4770      	bx	lr
 800585c:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8005860:	4293      	cmp	r3, r2
 8005862:	d004      	beq.n	800586e <ai_check_custom_types+0x26>
 8005864:	2001      	movs	r0, #1
 8005866:	f080 0001 	eor.w	r0, r0, #1
 800586a:	b002      	add	sp, #8
 800586c:	4770      	bx	lr
 800586e:	7842      	ldrb	r2, [r0, #1]
 8005870:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8005874:	429a      	cmp	r2, r3
 8005876:	f100 0001 	add.w	r0, r0, #1
 800587a:	d1f3      	bne.n	8005864 <ai_check_custom_types+0x1c>
 800587c:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 8005880:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8005884:	429a      	cmp	r2, r3
 8005886:	d1ed      	bne.n	8005864 <ai_check_custom_types+0x1c>
 8005888:	7842      	ldrb	r2, [r0, #1]
 800588a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800588e:	429a      	cmp	r2, r3
 8005890:	d1e8      	bne.n	8005864 <ai_check_custom_types+0x1c>
 8005892:	2000      	movs	r0, #0
 8005894:	e7e7      	b.n	8005866 <ai_check_custom_types+0x1e>
 8005896:	bf00      	nop
 8005898:	84048403 	.word	0x84048403

0800589c <ai_layer_type_name>:
 800589c:	f5b0 7fa1 	cmp.w	r0, #322	@ 0x142
 80058a0:	d809      	bhi.n	80058b6 <ai_layer_type_name+0x1a>
 80058a2:	f5b0 7f99 	cmp.w	r0, #306	@ 0x132
 80058a6:	d217      	bcs.n	80058d8 <ai_layer_type_name+0x3c>
 80058a8:	f5b0 7f82 	cmp.w	r0, #260	@ 0x104
 80058ac:	d80e      	bhi.n	80058cc <ai_layer_type_name+0x30>
 80058ae:	28ff      	cmp	r0, #255	@ 0xff
 80058b0:	d805      	bhi.n	80058be <ai_layer_type_name+0x22>
 80058b2:	480e      	ldr	r0, [pc, #56]	@ (80058ec <ai_layer_type_name+0x50>)
 80058b4:	4770      	bx	lr
 80058b6:	f5a0 73c0 	sub.w	r3, r0, #384	@ 0x180
 80058ba:	2b03      	cmp	r3, #3
 80058bc:	d8f9      	bhi.n	80058b2 <ai_layer_type_name+0x16>
 80058be:	f5a0 7080 	sub.w	r0, r0, #256	@ 0x100
 80058c2:	4b0b      	ldr	r3, [pc, #44]	@ (80058f0 <ai_layer_type_name+0x54>)
 80058c4:	b280      	uxth	r0, r0
 80058c6:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 80058ca:	4770      	bx	lr
 80058cc:	f5a0 7383 	sub.w	r3, r0, #262	@ 0x106
 80058d0:	2b27      	cmp	r3, #39	@ 0x27
 80058d2:	d9f4      	bls.n	80058be <ai_layer_type_name+0x22>
 80058d4:	4805      	ldr	r0, [pc, #20]	@ (80058ec <ai_layer_type_name+0x50>)
 80058d6:	4770      	bx	lr
 80058d8:	4b06      	ldr	r3, [pc, #24]	@ (80058f4 <ai_layer_type_name+0x58>)
 80058da:	f5a0 7299 	sub.w	r2, r0, #306	@ 0x132
 80058de:	b292      	uxth	r2, r2
 80058e0:	40d3      	lsrs	r3, r2
 80058e2:	07db      	lsls	r3, r3, #31
 80058e4:	d4eb      	bmi.n	80058be <ai_layer_type_name+0x22>
 80058e6:	4801      	ldr	r0, [pc, #4]	@ (80058ec <ai_layer_type_name+0x50>)
 80058e8:	4770      	bx	lr
 80058ea:	bf00      	nop
 80058ec:	08011fb0 	.word	0x08011fb0
 80058f0:	0801219c 	.word	0x0801219c
 80058f4:	00012007 	.word	0x00012007

080058f8 <ai_layers_init_all>:
 80058f8:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 80058fa:	2100      	movs	r1, #0
 80058fc:	b143      	cbz	r3, 8005910 <ai_layers_init_all+0x18>
 80058fe:	691a      	ldr	r2, [r3, #16]
 8005900:	60d8      	str	r0, [r3, #12]
 8005902:	429a      	cmp	r2, r3
 8005904:	f101 0101 	add.w	r1, r1, #1
 8005908:	d002      	beq.n	8005910 <ai_layers_init_all+0x18>
 800590a:	b10a      	cbz	r2, 8005910 <ai_layers_init_all+0x18>
 800590c:	4613      	mov	r3, r2
 800590e:	e7f5      	b.n	80058fc <ai_layers_init_all+0x4>
 8005910:	4608      	mov	r0, r1
 8005912:	4770      	bx	lr

08005914 <ai_layers_post_init_all>:
 8005914:	b538      	push	{r3, r4, r5, lr}
 8005916:	6b84      	ldr	r4, [r0, #56]	@ 0x38
 8005918:	2500      	movs	r5, #0
 800591a:	b16c      	cbz	r4, 8005938 <ai_layers_post_init_all+0x24>
 800591c:	6863      	ldr	r3, [r4, #4]
 800591e:	07db      	lsls	r3, r3, #31
 8005920:	d504      	bpl.n	800592c <ai_layers_post_init_all+0x18>
 8005922:	6a23      	ldr	r3, [r4, #32]
 8005924:	4620      	mov	r0, r4
 8005926:	b10b      	cbz	r3, 800592c <ai_layers_post_init_all+0x18>
 8005928:	4798      	blx	r3
 800592a:	3501      	adds	r5, #1
 800592c:	6923      	ldr	r3, [r4, #16]
 800592e:	42a3      	cmp	r3, r4
 8005930:	d002      	beq.n	8005938 <ai_layers_post_init_all+0x24>
 8005932:	b10b      	cbz	r3, 8005938 <ai_layers_post_init_all+0x24>
 8005934:	461c      	mov	r4, r3
 8005936:	e7f0      	b.n	800591a <ai_layers_post_init_all+0x6>
 8005938:	4628      	mov	r0, r5
 800593a:	bd38      	pop	{r3, r4, r5, pc}

0800593c <ai_layers_forward_all>:
 800593c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005940:	f8d0 8040 	ldr.w	r8, [r0, #64]	@ 0x40
 8005944:	4604      	mov	r4, r0
 8005946:	f1b8 0f00 	cmp.w	r8, #0
 800594a:	d02b      	beq.n	80059a4 <ai_layers_forward_all+0x68>
 800594c:	6b81      	ldr	r1, [r0, #56]	@ 0x38
 800594e:	63c1      	str	r1, [r0, #60]	@ 0x3c
 8005950:	b321      	cbz	r1, 800599c <ai_layers_forward_all+0x60>
 8005952:	6c42      	ldr	r2, [r0, #68]	@ 0x44
 8005954:	2001      	movs	r0, #1
 8005956:	47c0      	blx	r8
 8005958:	6be6      	ldr	r6, [r4, #60]	@ 0x3c
 800595a:	b1fe      	cbz	r6, 800599c <ai_layers_forward_all+0x60>
 800595c:	2700      	movs	r7, #0
 800595e:	4631      	mov	r1, r6
 8005960:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8005962:	2002      	movs	r0, #2
 8005964:	47c0      	blx	r8
 8005966:	6be5      	ldr	r5, [r4, #60]	@ 0x3c
 8005968:	4628      	mov	r0, r5
 800596a:	696b      	ldr	r3, [r5, #20]
 800596c:	4798      	blx	r3
 800596e:	692e      	ldr	r6, [r5, #16]
 8005970:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8005972:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 8005974:	42b5      	cmp	r5, r6
 8005976:	f04f 0003 	mov.w	r0, #3
 800597a:	d007      	beq.n	800598c <ai_layers_forward_all+0x50>
 800597c:	47c0      	blx	r8
 800597e:	3701      	adds	r7, #1
 8005980:	63e6      	str	r6, [r4, #60]	@ 0x3c
 8005982:	2e00      	cmp	r6, #0
 8005984:	d1eb      	bne.n	800595e <ai_layers_forward_all+0x22>
 8005986:	4638      	mov	r0, r7
 8005988:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800598c:	2003      	movs	r0, #3
 800598e:	47c0      	blx	r8
 8005990:	2300      	movs	r3, #0
 8005992:	3701      	adds	r7, #1
 8005994:	63e3      	str	r3, [r4, #60]	@ 0x3c
 8005996:	4638      	mov	r0, r7
 8005998:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800599c:	2700      	movs	r7, #0
 800599e:	4638      	mov	r0, r7
 80059a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80059a4:	6b85      	ldr	r5, [r0, #56]	@ 0x38
 80059a6:	63c5      	str	r5, [r0, #60]	@ 0x3c
 80059a8:	2d00      	cmp	r5, #0
 80059aa:	d0f7      	beq.n	800599c <ai_layers_forward_all+0x60>
 80059ac:	4647      	mov	r7, r8
 80059ae:	696b      	ldr	r3, [r5, #20]
 80059b0:	4628      	mov	r0, r5
 80059b2:	4798      	blx	r3
 80059b4:	462b      	mov	r3, r5
 80059b6:	692d      	ldr	r5, [r5, #16]
 80059b8:	429d      	cmp	r5, r3
 80059ba:	d004      	beq.n	80059c6 <ai_layers_forward_all+0x8a>
 80059bc:	63e5      	str	r5, [r4, #60]	@ 0x3c
 80059be:	3701      	adds	r7, #1
 80059c0:	2d00      	cmp	r5, #0
 80059c2:	d1f4      	bne.n	80059ae <ai_layers_forward_all+0x72>
 80059c4:	e7df      	b.n	8005986 <ai_layers_forward_all+0x4a>
 80059c6:	2300      	movs	r3, #0
 80059c8:	63e3      	str	r3, [r4, #60]	@ 0x3c
 80059ca:	3701      	adds	r7, #1
 80059cc:	e7db      	b.n	8005986 <ai_layers_forward_all+0x4a>
 80059ce:	bf00      	nop

080059d0 <ai_layers_destroy_all>:
 80059d0:	b538      	push	{r3, r4, r5, lr}
 80059d2:	6b84      	ldr	r4, [r0, #56]	@ 0x38
 80059d4:	2500      	movs	r5, #0
 80059d6:	b16c      	cbz	r4, 80059f4 <ai_layers_destroy_all+0x24>
 80059d8:	6863      	ldr	r3, [r4, #4]
 80059da:	075b      	lsls	r3, r3, #29
 80059dc:	d504      	bpl.n	80059e8 <ai_layers_destroy_all+0x18>
 80059de:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80059e0:	4620      	mov	r0, r4
 80059e2:	b10b      	cbz	r3, 80059e8 <ai_layers_destroy_all+0x18>
 80059e4:	4798      	blx	r3
 80059e6:	3501      	adds	r5, #1
 80059e8:	6923      	ldr	r3, [r4, #16]
 80059ea:	42a3      	cmp	r3, r4
 80059ec:	d002      	beq.n	80059f4 <ai_layers_destroy_all+0x24>
 80059ee:	b10b      	cbz	r3, 80059f4 <ai_layers_destroy_all+0x24>
 80059f0:	461c      	mov	r4, r3
 80059f2:	e7f0      	b.n	80059d6 <ai_layers_destroy_all+0x6>
 80059f4:	4628      	mov	r0, r5
 80059f6:	bd38      	pop	{r3, r4, r5, pc}

080059f8 <forward_dense>:
 80059f8:	6983      	ldr	r3, [r0, #24]
 80059fa:	881a      	ldrh	r2, [r3, #0]
 80059fc:	2a00      	cmp	r2, #0
 80059fe:	f000 80cc 	beq.w	8005b9a <forward_dense+0x1a2>
 8005a02:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a06:	ed2d 8b02 	vpush	{d8}
 8005a0a:	f8d3 c004 	ldr.w	ip, [r3, #4]
 8005a0e:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8005a12:	b09b      	sub	sp, #108	@ 0x6c
 8005a14:	b104      	cbz	r4, 8005a18 <forward_dense+0x20>
 8005a16:	6824      	ldr	r4, [r4, #0]
 8005a18:	2a01      	cmp	r2, #1
 8005a1a:	f000 81d7 	beq.w	8005dcc <forward_dense+0x3d4>
 8005a1e:	f8dc 5010 	ldr.w	r5, [ip, #16]
 8005a22:	b105      	cbz	r5, 8005a26 <forward_dense+0x2e>
 8005a24:	682d      	ldr	r5, [r5, #0]
 8005a26:	2a02      	cmp	r2, #2
 8005a28:	f000 80b9 	beq.w	8005b9e <forward_dense+0x1a6>
 8005a2c:	f8dc 301c 	ldr.w	r3, [ip, #28]
 8005a30:	9308      	str	r3, [sp, #32]
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	f000 81c1 	beq.w	8005dba <forward_dense+0x3c2>
 8005a38:	4619      	mov	r1, r3
 8005a3a:	f8bc 3018 	ldrh.w	r3, [ip, #24]
 8005a3e:	6809      	ldr	r1, [r1, #0]
 8005a40:	910a      	str	r1, [sp, #40]	@ 0x28
 8005a42:	2b01      	cmp	r3, #1
 8005a44:	f240 81bb 	bls.w	8005dbe <forward_dense+0x3c6>
 8005a48:	9b08      	ldr	r3, [sp, #32]
 8005a4a:	685b      	ldr	r3, [r3, #4]
 8005a4c:	9308      	str	r3, [sp, #32]
 8005a4e:	460b      	mov	r3, r1
 8005a50:	68e0      	ldr	r0, [r4, #12]
 8005a52:	68ee      	ldr	r6, [r5, #12]
 8005a54:	6840      	ldr	r0, [r0, #4]
 8005a56:	6999      	ldr	r1, [r3, #24]
 8005a58:	9010      	str	r0, [sp, #64]	@ 0x40
 8005a5a:	6870      	ldr	r0, [r6, #4]
 8005a5c:	680b      	ldr	r3, [r1, #0]
 8005a5e:	900f      	str	r0, [sp, #60]	@ 0x3c
 8005a60:	e9d6 7602 	ldrd	r7, r6, [r6, #8]
 8005a64:	f3c3 1ec6 	ubfx	lr, r3, #7, #7
 8005a68:	fb00 f707 	mul.w	r7, r0, r7
 8005a6c:	f3c3 5041 	ubfx	r0, r3, #21, #2
 8005a70:	fa4e f000 	asr.w	r0, lr, r0
 8005a74:	2a03      	cmp	r2, #3
 8005a76:	900d      	str	r0, [sp, #52]	@ 0x34
 8005a78:	f000 81a5 	beq.w	8005dc6 <forward_dense+0x3ce>
 8005a7c:	f8dc 8028 	ldr.w	r8, [ip, #40]	@ 0x28
 8005a80:	f1b8 0f00 	cmp.w	r8, #0
 8005a84:	d006      	beq.n	8005a94 <forward_dense+0x9c>
 8005a86:	f8d8 8000 	ldr.w	r8, [r8]
 8005a8a:	f1b8 0f00 	cmp.w	r8, #0
 8005a8e:	d001      	beq.n	8005a94 <forward_dense+0x9c>
 8005a90:	f8d8 8018 	ldr.w	r8, [r8, #24]
 8005a94:	f3c3 4343 	ubfx	r3, r3, #17, #4
 8005a98:	f46f 7288 	mvn.w	r2, #272	@ 0x110
 8005a9c:	fa42 f303 	asr.w	r3, r2, r3
 8005aa0:	07db      	lsls	r3, r3, #31
 8005aa2:	f140 8177 	bpl.w	8005d94 <forward_dense+0x39c>
 8005aa6:	f04f 0900 	mov.w	r9, #0
 8005aaa:	69a3      	ldr	r3, [r4, #24]
 8005aac:	69aa      	ldr	r2, [r5, #24]
 8005aae:	6891      	ldr	r1, [r2, #8]
 8005ab0:	689a      	ldr	r2, [r3, #8]
 8005ab2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005ab4:	9102      	str	r1, [sp, #8]
 8005ab6:	695b      	ldr	r3, [r3, #20]
 8005ab8:	685b      	ldr	r3, [r3, #4]
 8005aba:	9303      	str	r3, [sp, #12]
 8005abc:	fb07 f606 	mul.w	r6, r7, r6
 8005ac0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005ac2:	eb01 0086 	add.w	r0, r1, r6, lsl #2
 8005ac6:	009c      	lsls	r4, r3, #2
 8005ac8:	4281      	cmp	r1, r0
 8005aca:	900b      	str	r0, [sp, #44]	@ 0x2c
 8005acc:	9409      	str	r4, [sp, #36]	@ 0x24
 8005ace:	eb01 0883 	add.w	r8, r1, r3, lsl #2
 8005ad2:	d25d      	bcs.n	8005b90 <forward_dense+0x198>
 8005ad4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8005ad6:	ed9f 8abf 	vldr	s16, [pc, #764]	@ 8005dd4 <forward_dense+0x3dc>
 8005ada:	08d9      	lsrs	r1, r3, #3
 8005adc:	4693      	mov	fp, r2
 8005ade:	eb02 0a83 	add.w	sl, r2, r3, lsl #2
 8005ae2:	461a      	mov	r2, r3
 8005ae4:	f023 0301 	bic.w	r3, r3, #1
 8005ae8:	eb0b 0383 	add.w	r3, fp, r3, lsl #2
 8005aec:	9301      	str	r3, [sp, #4]
 8005aee:	014b      	lsls	r3, r1, #5
 8005af0:	eba3 0382 	sub.w	r3, r3, r2, lsl #2
 8005af4:	9311      	str	r3, [sp, #68]	@ 0x44
 8005af6:	0093      	lsls	r3, r2, #2
 8005af8:	930c      	str	r3, [sp, #48]	@ 0x30
 8005afa:	f002 0301 	and.w	r3, r2, #1
 8005afe:	464c      	mov	r4, r9
 8005b00:	9104      	str	r1, [sp, #16]
 8005b02:	9305      	str	r3, [sp, #20]
 8005b04:	46c1      	mov	r9, r8
 8005b06:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005b08:	699b      	ldr	r3, [r3, #24]
 8005b0a:	f8d3 c008 	ldr.w	ip, [r3, #8]
 8005b0e:	9b08      	ldr	r3, [sp, #32]
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d04a      	beq.n	8005baa <forward_dense+0x1b2>
 8005b14:	699b      	ldr	r3, [r3, #24]
 8005b16:	689d      	ldr	r5, [r3, #8]
 8005b18:	2c00      	cmp	r4, #0
 8005b1a:	d049      	beq.n	8005bb0 <forward_dense+0x1b8>
 8005b1c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005b1e:	2b04      	cmp	r3, #4
 8005b20:	9b02      	ldr	r3, [sp, #8]
 8005b22:	d057      	beq.n	8005bd4 <forward_dense+0x1dc>
 8005b24:	4599      	cmp	r9, r3
 8005b26:	d927      	bls.n	8005b78 <forward_dense+0x180>
 8005b28:	9e03      	ldr	r6, [sp, #12]
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	2d00      	cmp	r5, #0
 8005b2e:	d039      	beq.n	8005ba4 <forward_dense+0x1ac>
 8005b30:	ecb5 6a01 	vldmia	r5!, {s12}
 8005b34:	45da      	cmp	sl, fp
 8005b36:	d911      	bls.n	8005b5c <forward_dense+0x164>
 8005b38:	eddf 7aa6 	vldr	s15, [pc, #664]	@ 8005dd4 <forward_dense+0x3dc>
 8005b3c:	465a      	mov	r2, fp
 8005b3e:	4661      	mov	r1, ip
 8005b40:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005b44:	ecb2 7a01 	vldmia	r2!, {s14}
 8005b48:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005b4c:	edd3 6a00 	vldr	s13, [r3]
 8005b50:	4592      	cmp	sl, r2
 8005b52:	eee6 7a87 	vfma.f32	s15, s13, s14
 8005b56:	d8f3      	bhi.n	8005b40 <forward_dense+0x148>
 8005b58:	ee36 6a27 	vadd.f32	s12, s12, s15
 8005b5c:	eca0 6a01 	vstmia	r0!, {s12}
 8005b60:	4548      	cmp	r0, r9
 8005b62:	44b4      	add	ip, r6
 8005b64:	d3e2      	bcc.n	8005b2c <forward_dense+0x134>
 8005b66:	9a02      	ldr	r2, [sp, #8]
 8005b68:	eba9 0302 	sub.w	r3, r9, r2
 8005b6c:	3b01      	subs	r3, #1
 8005b6e:	f023 0303 	bic.w	r3, r3, #3
 8005b72:	3304      	adds	r3, #4
 8005b74:	18d3      	adds	r3, r2, r3
 8005b76:	9302      	str	r3, [sp, #8]
 8005b78:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005b7a:	9a01      	ldr	r2, [sp, #4]
 8005b7c:	4499      	add	r9, r3
 8005b7e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005b80:	441a      	add	r2, r3
 8005b82:	449a      	add	sl, r3
 8005b84:	449b      	add	fp, r3
 8005b86:	9201      	str	r2, [sp, #4]
 8005b88:	9b02      	ldr	r3, [sp, #8]
 8005b8a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8005b8c:	4293      	cmp	r3, r2
 8005b8e:	d3ba      	bcc.n	8005b06 <forward_dense+0x10e>
 8005b90:	b01b      	add	sp, #108	@ 0x6c
 8005b92:	ecbd 8b02 	vpop	{d8}
 8005b96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b9a:	6853      	ldr	r3, [r2, #4]
 8005b9c:	deff      	udf	#255	@ 0xff
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	685b      	ldr	r3, [r3, #4]
 8005ba2:	deff      	udf	#255	@ 0xff
 8005ba4:	ed9f 6a8b 	vldr	s12, [pc, #556]	@ 8005dd4 <forward_dense+0x3dc>
 8005ba8:	e7c4      	b.n	8005b34 <forward_dense+0x13c>
 8005baa:	461d      	mov	r5, r3
 8005bac:	2c00      	cmp	r4, #0
 8005bae:	d1b5      	bne.n	8005b1c <forward_dense+0x124>
 8005bb0:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8005bb2:	9217      	str	r2, [sp, #92]	@ 0x5c
 8005bb4:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8005bb6:	9b02      	ldr	r3, [sp, #8]
 8005bb8:	9218      	str	r2, [sp, #96]	@ 0x60
 8005bba:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005bbc:	e9cd 3b13 	strd	r3, fp, [sp, #76]	@ 0x4c
 8005bc0:	4413      	add	r3, r2
 8005bc2:	9302      	str	r3, [sp, #8]
 8005bc4:	a813      	add	r0, sp, #76	@ 0x4c
 8005bc6:	2301      	movs	r3, #1
 8005bc8:	e9cd c515 	strd	ip, r5, [sp, #84]	@ 0x54
 8005bcc:	9319      	str	r3, [sp, #100]	@ 0x64
 8005bce:	f002 facf 	bl	8008170 <forward_lite_dense_if32of32wf32>
 8005bd2:	e7d1      	b.n	8005b78 <forward_dense+0x180>
 8005bd4:	4599      	cmp	r9, r3
 8005bd6:	d9cf      	bls.n	8005b78 <forward_dense+0x180>
 8005bd8:	9a04      	ldr	r2, [sp, #16]
 8005bda:	9300      	str	r3, [sp, #0]
 8005bdc:	1c57      	adds	r7, r2, #1
 8005bde:	9b01      	ldr	r3, [sp, #4]
 8005be0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8005be2:	f8cd a038 	str.w	sl, [sp, #56]	@ 0x38
 8005be6:	4452      	add	r2, sl
 8005be8:	3b01      	subs	r3, #1
 8005bea:	eb0c 0787 	add.w	r7, ip, r7, lsl #2
 8005bee:	9206      	str	r2, [sp, #24]
 8005bf0:	9307      	str	r3, [sp, #28]
 8005bf2:	2d00      	cmp	r5, #0
 8005bf4:	f000 80c3 	beq.w	8005d7e <forward_dense+0x386>
 8005bf8:	9b04      	ldr	r3, [sp, #16]
 8005bfa:	ecf5 2a01 	vldmia	r5!, {s5}
 8005bfe:	ed9f 7a75 	vldr	s14, [pc, #468]	@ 8005dd4 <forward_dense+0x3dc>
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	f000 80c3 	beq.w	8005d8e <forward_dense+0x396>
 8005c08:	f10c 0204 	add.w	r2, ip, #4
 8005c0c:	f10b 0320 	add.w	r3, fp, #32
 8005c10:	f812 0c04 	ldrb.w	r0, [r2, #-4]
 8005c14:	ed13 2a07 	vldr	s4, [r3, #-28]	@ 0xffffffe4
 8005c18:	f812 1c03 	ldrb.w	r1, [r2, #-3]
 8005c1c:	ed53 3a08 	vldr	s7, [r3, #-32]	@ 0xffffffe0
 8005c20:	ed13 4a06 	vldr	s8, [r3, #-24]	@ 0xffffffe8
 8005c24:	ed53 4a05 	vldr	s9, [r3, #-20]	@ 0xffffffec
 8005c28:	ed13 5a04 	vldr	s10, [r3, #-16]
 8005c2c:	ed53 5a03 	vldr	s11, [r3, #-12]
 8005c30:	ed13 6a02 	vldr	s12, [r3, #-8]
 8005c34:	ed53 6a01 	vldr	s13, [r3, #-4]
 8005c38:	f000 060f 	and.w	r6, r0, #15
 8005c3c:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8005c40:	edd6 7a00 	vldr	s15, [r6]
 8005c44:	0900      	lsrs	r0, r0, #4
 8005c46:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8005c4a:	ed90 3a00 	vldr	s6, [r0]
 8005c4e:	ee67 7a82 	vmul.f32	s15, s15, s4
 8005c52:	0908      	lsrs	r0, r1, #4
 8005c54:	eee3 7a23 	vfma.f32	s15, s6, s7
 8005c58:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8005c5c:	f001 010f 	and.w	r1, r1, #15
 8005c60:	edd0 3a00 	vldr	s7, [r0]
 8005c64:	f812 0c02 	ldrb.w	r0, [r2, #-2]
 8005c68:	eee3 7a84 	vfma.f32	s15, s7, s8
 8005c6c:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8005c70:	0906      	lsrs	r6, r0, #4
 8005c72:	ed91 4a00 	vldr	s8, [r1]
 8005c76:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 8005c7a:	eee4 7a24 	vfma.f32	s15, s8, s9
 8005c7e:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8005c82:	f000 000f 	and.w	r0, r0, #15
 8005c86:	edd6 4a00 	vldr	s9, [r6]
 8005c8a:	eee4 7a85 	vfma.f32	s15, s9, s10
 8005c8e:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8005c92:	3204      	adds	r2, #4
 8005c94:	ed90 5a00 	vldr	s10, [r0]
 8005c98:	0908      	lsrs	r0, r1, #4
 8005c9a:	eee5 7a25 	vfma.f32	s15, s10, s11
 8005c9e:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8005ca2:	f001 010f 	and.w	r1, r1, #15
 8005ca6:	edd0 5a00 	vldr	s11, [r0]
 8005caa:	eee5 7a86 	vfma.f32	s15, s11, s12
 8005cae:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8005cb2:	42ba      	cmp	r2, r7
 8005cb4:	ed91 6a00 	vldr	s12, [r1]
 8005cb8:	eee6 7a26 	vfma.f32	s15, s12, s13
 8005cbc:	f103 0320 	add.w	r3, r3, #32
 8005cc0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005cc4:	d1a4      	bne.n	8005c10 <forward_dense+0x218>
 8005cc6:	f8dd e018 	ldr.w	lr, [sp, #24]
 8005cca:	f1a7 0804 	sub.w	r8, r7, #4
 8005cce:	9b01      	ldr	r3, [sp, #4]
 8005cd0:	459e      	cmp	lr, r3
 8005cd2:	d22a      	bcs.n	8005d2a <forward_dense+0x332>
 8005cd4:	9b07      	ldr	r3, [sp, #28]
 8005cd6:	eba3 060e 	sub.w	r6, r3, lr
 8005cda:	ea4f 0ad6 	mov.w	sl, r6, lsr #3
 8005cde:	f10e 0208 	add.w	r2, lr, #8
 8005ce2:	f108 30ff 	add.w	r0, r8, #4294967295
 8005ce6:	eb08 06d6 	add.w	r6, r8, r6, lsr #3
 8005cea:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 8005cee:	ed52 5a01 	vldr	s11, [r2, #-4]
 8005cf2:	ed52 6a02 	vldr	s13, [r2, #-8]
 8005cf6:	f003 010f 	and.w	r1, r3, #15
 8005cfa:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8005cfe:	edd1 7a00 	vldr	s15, [r1]
 8005d02:	091b      	lsrs	r3, r3, #4
 8005d04:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005d08:	ed93 6a00 	vldr	s12, [r3]
 8005d0c:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8005d10:	42b0      	cmp	r0, r6
 8005d12:	eee6 7a26 	vfma.f32	s15, s12, s13
 8005d16:	f102 0208 	add.w	r2, r2, #8
 8005d1a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005d1e:	d1e4      	bne.n	8005cea <forward_dense+0x2f2>
 8005d20:	f10a 0a01 	add.w	sl, sl, #1
 8005d24:	44d0      	add	r8, sl
 8005d26:	eb0e 0eca 	add.w	lr, lr, sl, lsl #3
 8005d2a:	9b05      	ldr	r3, [sp, #20]
 8005d2c:	b1cb      	cbz	r3, 8005d62 <forward_dense+0x36a>
 8005d2e:	f898 3000 	ldrb.w	r3, [r8]
 8005d32:	edde 7a00 	vldr	s15, [lr]
 8005d36:	9a03      	ldr	r2, [sp, #12]
 8005d38:	091b      	lsrs	r3, r3, #4
 8005d3a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005d3e:	edd3 6a00 	vldr	s13, [r3]
 8005d42:	9b00      	ldr	r3, [sp, #0]
 8005d44:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005d48:	4494      	add	ip, r2
 8005d4a:	4417      	add	r7, r2
 8005d4c:	ee32 7a87 	vadd.f32	s14, s5, s14
 8005d50:	eca3 7a01 	vstmia	r3!, {s14}
 8005d54:	4599      	cmp	r9, r3
 8005d56:	9300      	str	r3, [sp, #0]
 8005d58:	f63f af4b 	bhi.w	8005bf2 <forward_dense+0x1fa>
 8005d5c:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8005d60:	e701      	b.n	8005b66 <forward_dense+0x16e>
 8005d62:	9b00      	ldr	r3, [sp, #0]
 8005d64:	9a03      	ldr	r2, [sp, #12]
 8005d66:	ee72 2a87 	vadd.f32	s5, s5, s14
 8005d6a:	4494      	add	ip, r2
 8005d6c:	ece3 2a01 	vstmia	r3!, {s5}
 8005d70:	454b      	cmp	r3, r9
 8005d72:	9300      	str	r3, [sp, #0]
 8005d74:	4417      	add	r7, r2
 8005d76:	d2f1      	bcs.n	8005d5c <forward_dense+0x364>
 8005d78:	2d00      	cmp	r5, #0
 8005d7a:	f47f af3d 	bne.w	8005bf8 <forward_dense+0x200>
 8005d7e:	9b04      	ldr	r3, [sp, #16]
 8005d80:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8005dd4 <forward_dense+0x3dc>
 8005d84:	eef0 2a48 	vmov.f32	s5, s16
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	f47f af3d 	bne.w	8005c08 <forward_dense+0x210>
 8005d8e:	46de      	mov	lr, fp
 8005d90:	46e0      	mov	r8, ip
 8005d92:	e79c      	b.n	8005cce <forward_dense+0x2d6>
 8005d94:	f8d1 900c 	ldr.w	r9, [r1, #12]
 8005d98:	f1b8 0f00 	cmp.w	r8, #0
 8005d9c:	f43f ae85 	beq.w	8005aaa <forward_dense+0xb2>
 8005da0:	e9d8 0100 	ldrd	r0, r1, [r8]
 8005da4:	f002 fc90 	bl	80086c8 <ai_array_get_byte_size>
 8005da8:	f8d8 800c 	ldr.w	r8, [r8, #12]
 8005dac:	4602      	mov	r2, r0
 8005dae:	4641      	mov	r1, r8
 8005db0:	4648      	mov	r0, r9
 8005db2:	f002 fb93 	bl	80084dc <st_int8_copy>
 8005db6:	46c1      	mov	r9, r8
 8005db8:	e677      	b.n	8005aaa <forward_dense+0xb2>
 8005dba:	930a      	str	r3, [sp, #40]	@ 0x28
 8005dbc:	e648      	b.n	8005a50 <forward_dense+0x58>
 8005dbe:	2300      	movs	r3, #0
 8005dc0:	9308      	str	r3, [sp, #32]
 8005dc2:	460b      	mov	r3, r1
 8005dc4:	e644      	b.n	8005a50 <forward_dense+0x58>
 8005dc6:	2300      	movs	r3, #0
 8005dc8:	685b      	ldr	r3, [r3, #4]
 8005dca:	deff      	udf	#255	@ 0xff
 8005dcc:	2300      	movs	r3, #0
 8005dce:	685b      	ldr	r3, [r3, #4]
 8005dd0:	deff      	udf	#255	@ 0xff
 8005dd2:	bf00      	nop
 8005dd4:	00000000 	.word	0x00000000

08005dd8 <forward_concat>:
 8005dd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ddc:	ed2d 8b06 	vpush	{d8-d10}
 8005de0:	6982      	ldr	r2, [r0, #24]
 8005de2:	b085      	sub	sp, #20
 8005de4:	8813      	ldrh	r3, [r2, #0]
 8005de6:	9002      	str	r0, [sp, #8]
 8005de8:	b90b      	cbnz	r3, 8005dee <forward_concat+0x16>
 8005dea:	685b      	ldr	r3, [r3, #4]
 8005dec:	deff      	udf	#255	@ 0xff
 8005dee:	2b01      	cmp	r3, #1
 8005df0:	6856      	ldr	r6, [r2, #4]
 8005df2:	f000 829f 	beq.w	8006334 <forward_concat+0x55c>
 8005df6:	6933      	ldr	r3, [r6, #16]
 8005df8:	9301      	str	r3, [sp, #4]
 8005dfa:	b10b      	cbz	r3, 8005e00 <forward_concat+0x28>
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	9301      	str	r3, [sp, #4]
 8005e00:	8834      	ldrh	r4, [r6, #0]
 8005e02:	2300      	movs	r3, #0
 8005e04:	4621      	mov	r1, r4
 8005e06:	4618      	mov	r0, r3
 8005e08:	e00c      	b.n	8005e24 <forward_concat+0x4c>
 8005e0a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8005e0e:	b172      	cbz	r2, 8005e2e <forward_concat+0x56>
 8005e10:	6992      	ldr	r2, [r2, #24]
 8005e12:	6812      	ldr	r2, [r2, #0]
 8005e14:	f3c2 4243 	ubfx	r2, r2, #17, #4
 8005e18:	2a01      	cmp	r2, #1
 8005e1a:	bf0c      	ite	eq
 8005e1c:	2201      	moveq	r2, #1
 8005e1e:	2202      	movne	r2, #2
 8005e20:	3301      	adds	r3, #1
 8005e22:	4310      	orrs	r0, r2
 8005e24:	429c      	cmp	r4, r3
 8005e26:	d002      	beq.n	8005e2e <forward_concat+0x56>
 8005e28:	6872      	ldr	r2, [r6, #4]
 8005e2a:	2a00      	cmp	r2, #0
 8005e2c:	d1ed      	bne.n	8005e0a <forward_concat+0x32>
 8005e2e:	9b01      	ldr	r3, [sp, #4]
 8005e30:	699a      	ldr	r2, [r3, #24]
 8005e32:	6813      	ldr	r3, [r2, #0]
 8005e34:	f8d2 b008 	ldr.w	fp, [r2, #8]
 8005e38:	f3c3 4243 	ubfx	r2, r3, #17, #4
 8005e3c:	2a01      	cmp	r2, #1
 8005e3e:	d006      	beq.n	8005e4e <forward_concat+0x76>
 8005e40:	2801      	cmp	r0, #1
 8005e42:	d146      	bne.n	8005ed2 <forward_concat+0xfa>
 8005e44:	b005      	add	sp, #20
 8005e46:	ecbd 8b06 	vpop	{d8-d10}
 8005e4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e4e:	2801      	cmp	r0, #1
 8005e50:	d134      	bne.n	8005ebc <forward_concat+0xe4>
 8005e52:	f04f 0800 	mov.w	r8, #0
 8005e56:	4541      	cmp	r1, r8
 8005e58:	d9f4      	bls.n	8005e44 <forward_concat+0x6c>
 8005e5a:	6873      	ldr	r3, [r6, #4]
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d0f1      	beq.n	8005e44 <forward_concat+0x6c>
 8005e60:	f853 5028 	ldr.w	r5, [r3, r8, lsl #2]
 8005e64:	2d00      	cmp	r5, #0
 8005e66:	d0ed      	beq.n	8005e44 <forward_concat+0x6c>
 8005e68:	69ab      	ldr	r3, [r5, #24]
 8005e6a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005e6e:	f002 fc2b 	bl	80086c8 <ai_array_get_byte_size>
 8005e72:	69ab      	ldr	r3, [r5, #24]
 8005e74:	6969      	ldr	r1, [r5, #20]
 8005e76:	689c      	ldr	r4, [r3, #8]
 8005e78:	9b02      	ldr	r3, [sp, #8]
 8005e7a:	68ea      	ldr	r2, [r5, #12]
 8005e7c:	69db      	ldr	r3, [r3, #28]
 8005e7e:	f851 5023 	ldr.w	r5, [r1, r3, lsl #2]
 8005e82:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8005e86:	fb02 f905 	mul.w	r9, r2, r5
 8005e8a:	9a01      	ldr	r2, [sp, #4]
 8005e8c:	68d1      	ldr	r1, [r2, #12]
 8005e8e:	1827      	adds	r7, r4, r0
 8005e90:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005e94:	42bc      	cmp	r4, r7
 8005e96:	fb03 f505 	mul.w	r5, r3, r5
 8005e9a:	bf38      	it	cc
 8005e9c:	46da      	movcc	sl, fp
 8005e9e:	d208      	bcs.n	8005eb2 <forward_concat+0xda>
 8005ea0:	4651      	mov	r1, sl
 8005ea2:	4620      	mov	r0, r4
 8005ea4:	464a      	mov	r2, r9
 8005ea6:	444c      	add	r4, r9
 8005ea8:	f002 fb18 	bl	80084dc <st_int8_copy>
 8005eac:	42a7      	cmp	r7, r4
 8005eae:	44aa      	add	sl, r5
 8005eb0:	d8f6      	bhi.n	8005ea0 <forward_concat+0xc8>
 8005eb2:	8831      	ldrh	r1, [r6, #0]
 8005eb4:	44cb      	add	fp, r9
 8005eb6:	f108 0801 	add.w	r8, r8, #1
 8005eba:	e7cc      	b.n	8005e56 <forward_concat+0x7e>
 8005ebc:	0782      	lsls	r2, r0, #30
 8005ebe:	d4c1      	bmi.n	8005e44 <forward_concat+0x6c>
 8005ec0:	9a01      	ldr	r2, [sp, #4]
 8005ec2:	f8d2 8000 	ldr.w	r8, [r2]
 8005ec6:	f1b8 0f00 	cmp.w	r8, #0
 8005eca:	d109      	bne.n	8005ee0 <forward_concat+0x108>
 8005ecc:	ed9f 8aba 	vldr	s16, [pc, #744]	@ 80061b8 <forward_concat+0x3e0>
 8005ed0:	e011      	b.n	8005ef6 <forward_concat+0x11e>
 8005ed2:	9a01      	ldr	r2, [sp, #4]
 8005ed4:	f8d2 8000 	ldr.w	r8, [r2]
 8005ed8:	f1b8 0f00 	cmp.w	r8, #0
 8005edc:	f000 8222 	beq.w	8006324 <forward_concat+0x54c>
 8005ee0:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8005ee4:	2a00      	cmp	r2, #0
 8005ee6:	d0f1      	beq.n	8005ecc <forward_concat+0xf4>
 8005ee8:	f8b8 1002 	ldrh.w	r1, [r8, #2]
 8005eec:	2900      	cmp	r1, #0
 8005eee:	d0ed      	beq.n	8005ecc <forward_concat+0xf4>
 8005ef0:	6812      	ldr	r2, [r2, #0]
 8005ef2:	ed92 8a00 	vldr	s16, [r2]
 8005ef6:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8005efa:	ee87 9a88 	vdiv.f32	s18, s15, s16
 8005efe:	f3c3 53c0 	ubfx	r3, r3, #23, #1
 8005f02:	9303      	str	r3, [sp, #12]
 8005f04:	4621      	mov	r1, r4
 8005f06:	4633      	mov	r3, r6
 8005f08:	2700      	movs	r7, #0
 8005f0a:	4646      	mov	r6, r8
 8005f0c:	4698      	mov	r8, r3
 8005f0e:	ed9f aaa8 	vldr	s20, [pc, #672]	@ 80061b0 <forward_concat+0x3d8>
 8005f12:	eddf 8aa9 	vldr	s17, [pc, #676]	@ 80061b8 <forward_concat+0x3e0>
 8005f16:	eef6 9a00 	vmov.f32	s19, #96	@ 0x3f000000  0.5
 8005f1a:	42b9      	cmp	r1, r7
 8005f1c:	d992      	bls.n	8005e44 <forward_concat+0x6c>
 8005f1e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d08e      	beq.n	8005e44 <forward_concat+0x6c>
 8005f26:	f853 3027 	ldr.w	r3, [r3, r7, lsl #2]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d08a      	beq.n	8005e44 <forward_concat+0x6c>
 8005f2e:	9a02      	ldr	r2, [sp, #8]
 8005f30:	68d9      	ldr	r1, [r3, #12]
 8005f32:	69d4      	ldr	r4, [r2, #28]
 8005f34:	9a01      	ldr	r2, [sp, #4]
 8005f36:	f851 5024 	ldr.w	r5, [r1, r4, lsl #2]
 8005f3a:	68d2      	ldr	r2, [r2, #12]
 8005f3c:	6958      	ldr	r0, [r3, #20]
 8005f3e:	f852 1024 	ldr.w	r1, [r2, r4, lsl #2]
 8005f42:	699a      	ldr	r2, [r3, #24]
 8005f44:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8005f48:	f8d2 9000 	ldr.w	r9, [r2]
 8005f4c:	9300      	str	r3, [sp, #0]
 8005f4e:	fb01 fa00 	mul.w	sl, r1, r0
 8005f52:	fb00 f505 	mul.w	r5, r0, r5
 8005f56:	e9d2 1401 	ldrd	r1, r4, [r2, #4]
 8005f5a:	4648      	mov	r0, r9
 8005f5c:	f002 fbb4 	bl	80086c8 <ai_array_get_byte_size>
 8005f60:	f3c9 4243 	ubfx	r2, r9, #17, #4
 8005f64:	2a01      	cmp	r2, #1
 8005f66:	9b00      	ldr	r3, [sp, #0]
 8005f68:	eb04 0900 	add.w	r9, r4, r0
 8005f6c:	d079      	beq.n	8006062 <forward_concat+0x28a>
 8005f6e:	6818      	ldr	r0, [r3, #0]
 8005f70:	2800      	cmp	r0, #0
 8005f72:	f000 8118 	beq.w	80061a6 <forward_concat+0x3ce>
 8005f76:	6841      	ldr	r1, [r0, #4]
 8005f78:	2900      	cmp	r1, #0
 8005f7a:	f000 8172 	beq.w	8006262 <forward_concat+0x48a>
 8005f7e:	8842      	ldrh	r2, [r0, #2]
 8005f80:	2a00      	cmp	r2, #0
 8005f82:	f000 816b 	beq.w	800625c <forward_concat+0x484>
 8005f86:	680b      	ldr	r3, [r1, #0]
 8005f88:	edd3 6a00 	vldr	s13, [r3]
 8005f8c:	684b      	ldr	r3, [r1, #4]
 8005f8e:	f993 2000 	ldrsb.w	r2, [r3]
 8005f92:	2e00      	cmp	r6, #0
 8005f94:	f000 8105 	beq.w	80061a2 <forward_concat+0x3ca>
 8005f98:	6871      	ldr	r1, [r6, #4]
 8005f9a:	2900      	cmp	r1, #0
 8005f9c:	f000 8165 	beq.w	800626a <forward_concat+0x492>
 8005fa0:	8873      	ldrh	r3, [r6, #2]
 8005fa2:	b113      	cbz	r3, 8005faa <forward_concat+0x1d2>
 8005fa4:	684b      	ldr	r3, [r1, #4]
 8005fa6:	f993 3000 	ldrsb.w	r3, [r3]
 8005faa:	eeb4 8a66 	vcmp.f32	s16, s13
 8005fae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005fb2:	d102      	bne.n	8005fba <forward_concat+0x1e2>
 8005fb4:	429a      	cmp	r2, r3
 8005fb6:	f000 8197 	beq.w	80062e8 <forward_concat+0x510>
 8005fba:	9b03      	ldr	r3, [sp, #12]
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	f040 809a 	bne.w	80060f6 <forward_concat+0x31e>
 8005fc2:	2800      	cmp	r0, #0
 8005fc4:	f000 815c 	beq.w	8006280 <forward_concat+0x4a8>
 8005fc8:	6843      	ldr	r3, [r0, #4]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	f000 814f 	beq.w	800626e <forward_concat+0x496>
 8005fd0:	8842      	ldrh	r2, [r0, #2]
 8005fd2:	2a00      	cmp	r2, #0
 8005fd4:	f000 814b 	beq.w	800626e <forward_concat+0x496>
 8005fd8:	685b      	ldr	r3, [r3, #4]
 8005fda:	7819      	ldrb	r1, [r3, #0]
 8005fdc:	2e00      	cmp	r6, #0
 8005fde:	f000 814a 	beq.w	8006276 <forward_concat+0x49e>
 8005fe2:	6872      	ldr	r2, [r6, #4]
 8005fe4:	2a00      	cmp	r2, #0
 8005fe6:	f000 8179 	beq.w	80062dc <forward_concat+0x504>
 8005fea:	8873      	ldrh	r3, [r6, #2]
 8005fec:	b10b      	cbz	r3, 8005ff2 <forward_concat+0x21a>
 8005fee:	6853      	ldr	r3, [r2, #4]
 8005ff0:	781b      	ldrb	r3, [r3, #0]
 8005ff2:	eeb4 8a66 	vcmp.f32	s16, s13
 8005ff6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ffa:	d102      	bne.n	8006002 <forward_concat+0x22a>
 8005ffc:	4299      	cmp	r1, r3
 8005ffe:	f000 8158 	beq.w	80062b2 <forward_concat+0x4da>
 8006002:	454c      	cmp	r4, r9
 8006004:	ee66 6a89 	vmul.f32	s13, s13, s18
 8006008:	f080 80c7 	bcs.w	800619a <forward_concat+0x3c2>
 800600c:	2d00      	cmp	r5, #0
 800600e:	f340 80c4 	ble.w	800619a <forward_concat+0x3c2>
 8006012:	ee07 3a90 	vmov	s15, r3
 8006016:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 800601a:	1960      	adds	r0, r4, r5
 800601c:	ee36 6a29 	vadd.f32	s12, s12, s19
 8006020:	4602      	mov	r2, r0
 8006022:	46dc      	mov	ip, fp
 8006024:	46e6      	mov	lr, ip
 8006026:	f814 3b01 	ldrb.w	r3, [r4], #1
 800602a:	1a5b      	subs	r3, r3, r1
 800602c:	ee07 3a90 	vmov	s15, r3
 8006030:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006034:	eeb0 7a46 	vmov.f32	s14, s12
 8006038:	eea7 7aa6 	vfma.f32	s14, s15, s13
 800603c:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 8006040:	ee17 3a90 	vmov	r3, s15
 8006044:	f383 0308 	usat	r3, #8, r3
 8006048:	4294      	cmp	r4, r2
 800604a:	f80e 3b01 	strb.w	r3, [lr], #1
 800604e:	d1ea      	bne.n	8006026 <forward_concat+0x24e>
 8006050:	4548      	cmp	r0, r9
 8006052:	eb04 0205 	add.w	r2, r4, r5
 8006056:	44d4      	add	ip, sl
 8006058:	4604      	mov	r4, r0
 800605a:	f080 809e 	bcs.w	800619a <forward_concat+0x3c2>
 800605e:	4428      	add	r0, r5
 8006060:	e7e0      	b.n	8006024 <forward_concat+0x24c>
 8006062:	2d00      	cmp	r5, #0
 8006064:	9b03      	ldr	r3, [sp, #12]
 8006066:	4629      	mov	r1, r5
 8006068:	bfb8      	it	lt
 800606a:	1ce9      	addlt	r1, r5, #3
 800606c:	1089      	asrs	r1, r1, #2
 800606e:	2b00      	cmp	r3, #0
 8006070:	f040 80a4 	bne.w	80061bc <forward_concat+0x3e4>
 8006074:	2e00      	cmp	r6, #0
 8006076:	f000 8100 	beq.w	800627a <forward_concat+0x4a2>
 800607a:	6873      	ldr	r3, [r6, #4]
 800607c:	2b00      	cmp	r3, #0
 800607e:	f000 80fc 	beq.w	800627a <forward_concat+0x4a2>
 8006082:	8872      	ldrh	r2, [r6, #2]
 8006084:	2a00      	cmp	r2, #0
 8006086:	f000 80f8 	beq.w	800627a <forward_concat+0x4a2>
 800608a:	685b      	ldr	r3, [r3, #4]
 800608c:	781b      	ldrb	r3, [r3, #0]
 800608e:	ee06 3a90 	vmov	s13, r3
 8006092:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8006096:	ee76 6aa9 	vadd.f32	s13, s13, s19
 800609a:	454c      	cmp	r4, r9
 800609c:	d226      	bcs.n	80060ec <forward_concat+0x314>
 800609e:	2d03      	cmp	r5, #3
 80060a0:	ebaa 0a01 	sub.w	sl, sl, r1
 80060a4:	bfc8      	it	gt
 80060a6:	46de      	movgt	lr, fp
 80060a8:	dd20      	ble.n	80060ec <forward_concat+0x314>
 80060aa:	46f4      	mov	ip, lr
 80060ac:	4620      	mov	r0, r4
 80060ae:	2200      	movs	r2, #0
 80060b0:	f810 3b01 	ldrb.w	r3, [r0], #1
 80060b4:	ee07 3a10 	vmov	s14, r3
 80060b8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80060bc:	eef0 7a66 	vmov.f32	s15, s13
 80060c0:	eee7 7a09 	vfma.f32	s15, s14, s18
 80060c4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80060c8:	ee17 3a90 	vmov	r3, s15
 80060cc:	f383 0308 	usat	r3, #8, r3
 80060d0:	3201      	adds	r2, #1
 80060d2:	4291      	cmp	r1, r2
 80060d4:	f80c 3b01 	strb.w	r3, [ip], #1
 80060d8:	dcea      	bgt.n	80060b0 <forward_concat+0x2d8>
 80060da:	2d03      	cmp	r5, #3
 80060dc:	bfcc      	ite	gt
 80060de:	460b      	movgt	r3, r1
 80060e0:	2301      	movle	r3, #1
 80060e2:	441c      	add	r4, r3
 80060e4:	45a1      	cmp	r9, r4
 80060e6:	4453      	add	r3, sl
 80060e8:	449e      	add	lr, r3
 80060ea:	d8de      	bhi.n	80060aa <forward_concat+0x2d2>
 80060ec:	448b      	add	fp, r1
 80060ee:	f8b8 1000 	ldrh.w	r1, [r8]
 80060f2:	3701      	adds	r7, #1
 80060f4:	e711      	b.n	8005f1a <forward_concat+0x142>
 80060f6:	b140      	cbz	r0, 800610a <forward_concat+0x332>
 80060f8:	6843      	ldr	r3, [r0, #4]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	f000 80f0 	beq.w	80062e0 <forward_concat+0x508>
 8006100:	8840      	ldrh	r0, [r0, #2]
 8006102:	b110      	cbz	r0, 800610a <forward_concat+0x332>
 8006104:	685b      	ldr	r3, [r3, #4]
 8006106:	f993 0000 	ldrsb.w	r0, [r3]
 800610a:	2e00      	cmp	r6, #0
 800610c:	f000 80ba 	beq.w	8006284 <forward_concat+0x4ac>
 8006110:	6872      	ldr	r2, [r6, #4]
 8006112:	2a00      	cmp	r2, #0
 8006114:	f000 80e6 	beq.w	80062e4 <forward_concat+0x50c>
 8006118:	8873      	ldrh	r3, [r6, #2]
 800611a:	b113      	cbz	r3, 8006122 <forward_concat+0x34a>
 800611c:	6853      	ldr	r3, [r2, #4]
 800611e:	f993 3000 	ldrsb.w	r3, [r3]
 8006122:	eeb4 8a66 	vcmp.f32	s16, s13
 8006126:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800612a:	d102      	bne.n	8006132 <forward_concat+0x35a>
 800612c:	4298      	cmp	r0, r3
 800612e:	f000 80ab 	beq.w	8006288 <forward_concat+0x4b0>
 8006132:	454c      	cmp	r4, r9
 8006134:	ee66 6a89 	vmul.f32	s13, s13, s18
 8006138:	d22f      	bcs.n	800619a <forward_concat+0x3c2>
 800613a:	2d00      	cmp	r5, #0
 800613c:	dd2d      	ble.n	800619a <forward_concat+0x3c2>
 800613e:	ee07 3a90 	vmov	s15, r3
 8006142:	eb0b 0e05 	add.w	lr, fp, r5
 8006146:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 800614a:	46f4      	mov	ip, lr
 800614c:	465a      	mov	r2, fp
 800614e:	4621      	mov	r1, r4
 8006150:	f911 3b01 	ldrsb.w	r3, [r1], #1
 8006154:	1a1b      	subs	r3, r3, r0
 8006156:	ee07 3a90 	vmov	s15, r3
 800615a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800615e:	eef0 7a46 	vmov.f32	s15, s12
 8006162:	eee7 7a26 	vfma.f32	s15, s14, s13
 8006166:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800616a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800616e:	bf4c      	ite	mi
 8006170:	ee77 7aca 	vsubmi.f32	s15, s15, s20
 8006174:	ee77 7aa9 	vaddpl.f32	s15, s15, s19
 8006178:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800617c:	ee17 3a90 	vmov	r3, s15
 8006180:	f303 0307 	ssat	r3, #8, r3
 8006184:	f802 3b01 	strb.w	r3, [r2], #1
 8006188:	4562      	cmp	r2, ip
 800618a:	d1e1      	bne.n	8006150 <forward_concat+0x378>
 800618c:	442c      	add	r4, r5
 800618e:	454c      	cmp	r4, r9
 8006190:	44d3      	add	fp, sl
 8006192:	44d4      	add	ip, sl
 8006194:	d3da      	bcc.n	800614c <forward_concat+0x374>
 8006196:	46f3      	mov	fp, lr
 8006198:	e7a9      	b.n	80060ee <forward_concat+0x316>
 800619a:	eb0b 0e05 	add.w	lr, fp, r5
 800619e:	46f3      	mov	fp, lr
 80061a0:	e7a5      	b.n	80060ee <forward_concat+0x316>
 80061a2:	4633      	mov	r3, r6
 80061a4:	e701      	b.n	8005faa <forward_concat+0x1d2>
 80061a6:	eef0 6a68 	vmov.f32	s13, s17
 80061aa:	4602      	mov	r2, r0
 80061ac:	e6f1      	b.n	8005f92 <forward_concat+0x1ba>
 80061ae:	bf00      	nop
 80061b0:	3efffffc 	.word	0x3efffffc
 80061b4:	7f800000 	.word	0x7f800000
 80061b8:	00000000 	.word	0x00000000
 80061bc:	2e00      	cmp	r6, #0
 80061be:	f000 80a8 	beq.w	8006312 <forward_concat+0x53a>
 80061c2:	6873      	ldr	r3, [r6, #4]
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	f000 80aa 	beq.w	800631e <forward_concat+0x546>
 80061ca:	8872      	ldrh	r2, [r6, #2]
 80061cc:	2a00      	cmp	r2, #0
 80061ce:	f000 80a3 	beq.w	8006318 <forward_concat+0x540>
 80061d2:	685b      	ldr	r3, [r3, #4]
 80061d4:	f993 3000 	ldrsb.w	r3, [r3]
 80061d8:	ee06 3a90 	vmov	s13, r3
 80061dc:	454c      	cmp	r4, r9
 80061de:	d285      	bcs.n	80060ec <forward_concat+0x314>
 80061e0:	2d03      	cmp	r5, #3
 80061e2:	ebaa 0a01 	sub.w	sl, sl, r1
 80061e6:	dd81      	ble.n	80060ec <forward_concat+0x314>
 80061e8:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80061ec:	46de      	mov	lr, fp
 80061ee:	46f4      	mov	ip, lr
 80061f0:	4620      	mov	r0, r4
 80061f2:	2200      	movs	r2, #0
 80061f4:	f810 3b01 	ldrb.w	r3, [r0], #1
 80061f8:	ee07 3a10 	vmov	s14, r3
 80061fc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8006200:	eef0 7a66 	vmov.f32	s15, s13
 8006204:	eee7 7a09 	vfma.f32	s15, s14, s18
 8006208:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800620c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006210:	d416      	bmi.n	8006240 <forward_concat+0x468>
 8006212:	ee77 7aa9 	vadd.f32	s15, s15, s19
 8006216:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800621a:	ee17 3a90 	vmov	r3, s15
 800621e:	f303 0307 	ssat	r3, #8, r3
 8006222:	3201      	adds	r2, #1
 8006224:	4291      	cmp	r1, r2
 8006226:	f80c 3b01 	strb.w	r3, [ip], #1
 800622a:	dce3      	bgt.n	80061f4 <forward_concat+0x41c>
 800622c:	2d03      	cmp	r5, #3
 800622e:	bfcc      	ite	gt
 8006230:	460b      	movgt	r3, r1
 8006232:	2301      	movle	r3, #1
 8006234:	441c      	add	r4, r3
 8006236:	45a1      	cmp	r9, r4
 8006238:	4453      	add	r3, sl
 800623a:	449e      	add	lr, r3
 800623c:	d8d7      	bhi.n	80061ee <forward_concat+0x416>
 800623e:	e755      	b.n	80060ec <forward_concat+0x314>
 8006240:	ee77 7aca 	vsub.f32	s15, s15, s20
 8006244:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006248:	ee17 3a90 	vmov	r3, s15
 800624c:	f303 0307 	ssat	r3, #8, r3
 8006250:	3201      	adds	r2, #1
 8006252:	428a      	cmp	r2, r1
 8006254:	f80c 3b01 	strb.w	r3, [ip], #1
 8006258:	dbcc      	blt.n	80061f4 <forward_concat+0x41c>
 800625a:	e7e7      	b.n	800622c <forward_concat+0x454>
 800625c:	eef0 6a68 	vmov.f32	s13, s17
 8006260:	e697      	b.n	8005f92 <forward_concat+0x1ba>
 8006262:	eef0 6a68 	vmov.f32	s13, s17
 8006266:	460a      	mov	r2, r1
 8006268:	e693      	b.n	8005f92 <forward_concat+0x1ba>
 800626a:	460b      	mov	r3, r1
 800626c:	e69d      	b.n	8005faa <forward_concat+0x1d2>
 800626e:	9903      	ldr	r1, [sp, #12]
 8006270:	2e00      	cmp	r6, #0
 8006272:	f47f aeb6 	bne.w	8005fe2 <forward_concat+0x20a>
 8006276:	4633      	mov	r3, r6
 8006278:	e6bb      	b.n	8005ff2 <forward_concat+0x21a>
 800627a:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 800627e:	e70c      	b.n	800609a <forward_concat+0x2c2>
 8006280:	4619      	mov	r1, r3
 8006282:	e6ab      	b.n	8005fdc <forward_concat+0x204>
 8006284:	4633      	mov	r3, r6
 8006286:	e74c      	b.n	8006122 <forward_concat+0x34a>
 8006288:	454c      	cmp	r4, r9
 800628a:	d286      	bcs.n	800619a <forward_concat+0x3c2>
 800628c:	9600      	str	r6, [sp, #0]
 800628e:	462e      	mov	r6, r5
 8006290:	464d      	mov	r5, r9
 8006292:	46d9      	mov	r9, fp
 8006294:	4649      	mov	r1, r9
 8006296:	4620      	mov	r0, r4
 8006298:	4632      	mov	r2, r6
 800629a:	4434      	add	r4, r6
 800629c:	f002 f91e 	bl	80084dc <st_int8_copy>
 80062a0:	42a5      	cmp	r5, r4
 80062a2:	44d1      	add	r9, sl
 80062a4:	d8f6      	bhi.n	8006294 <forward_concat+0x4bc>
 80062a6:	4635      	mov	r5, r6
 80062a8:	9e00      	ldr	r6, [sp, #0]
 80062aa:	eb0b 0e05 	add.w	lr, fp, r5
 80062ae:	46f3      	mov	fp, lr
 80062b0:	e71d      	b.n	80060ee <forward_concat+0x316>
 80062b2:	454c      	cmp	r4, r9
 80062b4:	f4bf af71 	bcs.w	800619a <forward_concat+0x3c2>
 80062b8:	9600      	str	r6, [sp, #0]
 80062ba:	462e      	mov	r6, r5
 80062bc:	464d      	mov	r5, r9
 80062be:	46d9      	mov	r9, fp
 80062c0:	4649      	mov	r1, r9
 80062c2:	4620      	mov	r0, r4
 80062c4:	4632      	mov	r2, r6
 80062c6:	4434      	add	r4, r6
 80062c8:	f002 f908 	bl	80084dc <st_int8_copy>
 80062cc:	42a5      	cmp	r5, r4
 80062ce:	44d1      	add	r9, sl
 80062d0:	d8f6      	bhi.n	80062c0 <forward_concat+0x4e8>
 80062d2:	4635      	mov	r5, r6
 80062d4:	eb0b 0e05 	add.w	lr, fp, r5
 80062d8:	9e00      	ldr	r6, [sp, #0]
 80062da:	e7e8      	b.n	80062ae <forward_concat+0x4d6>
 80062dc:	4613      	mov	r3, r2
 80062de:	e688      	b.n	8005ff2 <forward_concat+0x21a>
 80062e0:	4618      	mov	r0, r3
 80062e2:	e712      	b.n	800610a <forward_concat+0x332>
 80062e4:	4613      	mov	r3, r2
 80062e6:	e71c      	b.n	8006122 <forward_concat+0x34a>
 80062e8:	454c      	cmp	r4, r9
 80062ea:	f4bf af56 	bcs.w	800619a <forward_concat+0x3c2>
 80062ee:	9600      	str	r6, [sp, #0]
 80062f0:	462e      	mov	r6, r5
 80062f2:	464d      	mov	r5, r9
 80062f4:	46d9      	mov	r9, fp
 80062f6:	4649      	mov	r1, r9
 80062f8:	4620      	mov	r0, r4
 80062fa:	4632      	mov	r2, r6
 80062fc:	4434      	add	r4, r6
 80062fe:	f002 f8ed 	bl	80084dc <st_int8_copy>
 8006302:	42a5      	cmp	r5, r4
 8006304:	44d1      	add	r9, sl
 8006306:	d8f6      	bhi.n	80062f6 <forward_concat+0x51e>
 8006308:	4635      	mov	r5, r6
 800630a:	eb0b 0e05 	add.w	lr, fp, r5
 800630e:	9e00      	ldr	r6, [sp, #0]
 8006310:	e7cd      	b.n	80062ae <forward_concat+0x4d6>
 8006312:	ee06 6a90 	vmov	s13, r6
 8006316:	e761      	b.n	80061dc <forward_concat+0x404>
 8006318:	ee06 2a90 	vmov	s13, r2
 800631c:	e75e      	b.n	80061dc <forward_concat+0x404>
 800631e:	ee06 3a90 	vmov	s13, r3
 8006322:	e75b      	b.n	80061dc <forward_concat+0x404>
 8006324:	f3c3 53c0 	ubfx	r3, r3, #23, #1
 8006328:	ed1f 9a5e 	vldr	s18, [pc, #-376]	@ 80061b4 <forward_concat+0x3dc>
 800632c:	ed1f 8a5e 	vldr	s16, [pc, #-376]	@ 80061b8 <forward_concat+0x3e0>
 8006330:	9303      	str	r3, [sp, #12]
 8006332:	e5e8      	b.n	8005f06 <forward_concat+0x12e>
 8006334:	2300      	movs	r3, #0
 8006336:	e558      	b.n	8005dea <forward_concat+0x12>

08006338 <nl_func_sigmoid_array_f32>:
 8006338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800633a:	ed2d 8b02 	vpush	{d8}
 800633e:	698f      	ldr	r7, [r1, #24]
 8006340:	6980      	ldr	r0, [r0, #24]
 8006342:	68b9      	ldr	r1, [r7, #8]
 8006344:	6886      	ldr	r6, [r0, #8]
 8006346:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
 800634a:	3a01      	subs	r2, #1
 800634c:	0093      	lsls	r3, r2, #2
 800634e:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8006352:	4291      	cmp	r1, r2
 8006354:	d815      	bhi.n	8006382 <nl_func_sigmoid_array_f32+0x4a>
 8006356:	3304      	adds	r3, #4
 8006358:	1d14      	adds	r4, r2, #4
 800635a:	441e      	add	r6, r3
 800635c:	eeb7 8a00 	vmov.f32	s16, #112	@ 0x3f800000  1.0
 8006360:	4625      	mov	r5, r4
 8006362:	ed34 0a01 	vldmdb	r4!, {s0}
 8006366:	eeb1 0a40 	vneg.f32	s0, s0
 800636a:	f004 ffd3 	bl	800b314 <expf>
 800636e:	ee30 0a08 	vadd.f32	s0, s0, s16
 8006372:	3d08      	subs	r5, #8
 8006374:	eec8 7a00 	vdiv.f32	s15, s16, s0
 8006378:	ed66 7a01 	vstmdb	r6!, {s15}
 800637c:	68bb      	ldr	r3, [r7, #8]
 800637e:	42ab      	cmp	r3, r5
 8006380:	d9ee      	bls.n	8006360 <nl_func_sigmoid_array_f32+0x28>
 8006382:	ecbd 8b02 	vpop	{d8}
 8006386:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006388 <forward_sigmoid>:
 8006388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800638a:	ed2d 8b02 	vpush	{d8}
 800638e:	6982      	ldr	r2, [r0, #24]
 8006390:	8813      	ldrh	r3, [r2, #0]
 8006392:	2b00      	cmp	r3, #0
 8006394:	d03b      	beq.n	800640e <forward_sigmoid+0x86>
 8006396:	6852      	ldr	r2, [r2, #4]
 8006398:	6854      	ldr	r4, [r2, #4]
 800639a:	b104      	cbz	r4, 800639e <forward_sigmoid+0x16>
 800639c:	6824      	ldr	r4, [r4, #0]
 800639e:	2b01      	cmp	r3, #1
 80063a0:	d034      	beq.n	800640c <forward_sigmoid+0x84>
 80063a2:	6915      	ldr	r5, [r2, #16]
 80063a4:	b105      	cbz	r5, 80063a8 <forward_sigmoid+0x20>
 80063a6:	682d      	ldr	r5, [r5, #0]
 80063a8:	68a3      	ldr	r3, [r4, #8]
 80063aa:	0a1b      	lsrs	r3, r3, #8
 80063ac:	d031      	beq.n	8006412 <forward_sigmoid+0x8a>
 80063ae:	68e0      	ldr	r0, [r4, #12]
 80063b0:	2201      	movs	r2, #1
 80063b2:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 80063b6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80063ba:	4298      	cmp	r0, r3
 80063bc:	fb01 f202 	mul.w	r2, r1, r2
 80063c0:	d1f9      	bne.n	80063b6 <forward_sigmoid+0x2e>
 80063c2:	69a7      	ldr	r7, [r4, #24]
 80063c4:	69a9      	ldr	r1, [r5, #24]
 80063c6:	68bb      	ldr	r3, [r7, #8]
 80063c8:	688e      	ldr	r6, [r1, #8]
 80063ca:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
 80063ce:	3a01      	subs	r2, #1
 80063d0:	eb03 0582 	add.w	r5, r3, r2, lsl #2
 80063d4:	42ab      	cmp	r3, r5
 80063d6:	eb06 0682 	add.w	r6, r6, r2, lsl #2
 80063da:	d814      	bhi.n	8006406 <forward_sigmoid+0x7e>
 80063dc:	3504      	adds	r5, #4
 80063de:	3604      	adds	r6, #4
 80063e0:	eeb7 8a00 	vmov.f32	s16, #112	@ 0x3f800000  1.0
 80063e4:	462c      	mov	r4, r5
 80063e6:	ed35 0a01 	vldmdb	r5!, {s0}
 80063ea:	eeb1 0a40 	vneg.f32	s0, s0
 80063ee:	f004 ff91 	bl	800b314 <expf>
 80063f2:	ee30 0a08 	vadd.f32	s0, s0, s16
 80063f6:	3c08      	subs	r4, #8
 80063f8:	eec8 7a00 	vdiv.f32	s15, s16, s0
 80063fc:	ed66 7a01 	vstmdb	r6!, {s15}
 8006400:	68bb      	ldr	r3, [r7, #8]
 8006402:	42a3      	cmp	r3, r4
 8006404:	d9ee      	bls.n	80063e4 <forward_sigmoid+0x5c>
 8006406:	ecbd 8b02 	vpop	{d8}
 800640a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800640c:	2300      	movs	r3, #0
 800640e:	685b      	ldr	r3, [r3, #4]
 8006410:	deff      	udf	#255	@ 0xff
 8006412:	69ab      	ldr	r3, [r5, #24]
 8006414:	69a7      	ldr	r7, [r4, #24]
 8006416:	689e      	ldr	r6, [r3, #8]
 8006418:	68bd      	ldr	r5, [r7, #8]
 800641a:	e7df      	b.n	80063dc <forward_sigmoid+0x54>

0800641c <nl_func_tanh_array_f32>:
 800641c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800641e:	698f      	ldr	r7, [r1, #24]
 8006420:	6980      	ldr	r0, [r0, #24]
 8006422:	68b9      	ldr	r1, [r7, #8]
 8006424:	6886      	ldr	r6, [r0, #8]
 8006426:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
 800642a:	3a01      	subs	r2, #1
 800642c:	0093      	lsls	r3, r2, #2
 800642e:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8006432:	4291      	cmp	r1, r2
 8006434:	d80d      	bhi.n	8006452 <nl_func_tanh_array_f32+0x36>
 8006436:	3304      	adds	r3, #4
 8006438:	1d14      	adds	r4, r2, #4
 800643a:	441e      	add	r6, r3
 800643c:	4625      	mov	r5, r4
 800643e:	ed34 0a01 	vldmdb	r4!, {s0}
 8006442:	f004 ffa5 	bl	800b390 <tanhf>
 8006446:	ed26 0a01 	vstmdb	r6!, {s0}
 800644a:	68bb      	ldr	r3, [r7, #8]
 800644c:	3d08      	subs	r5, #8
 800644e:	42ab      	cmp	r3, r5
 8006450:	d9f4      	bls.n	800643c <nl_func_tanh_array_f32+0x20>
 8006452:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006454 <forward_relu>:
 8006454:	6982      	ldr	r2, [r0, #24]
 8006456:	8813      	ldrh	r3, [r2, #0]
 8006458:	b323      	cbz	r3, 80064a4 <forward_relu+0x50>
 800645a:	6851      	ldr	r1, [r2, #4]
 800645c:	684a      	ldr	r2, [r1, #4]
 800645e:	b102      	cbz	r2, 8006462 <forward_relu+0xe>
 8006460:	6812      	ldr	r2, [r2, #0]
 8006462:	2b01      	cmp	r3, #1
 8006464:	f000 808d 	beq.w	8006582 <forward_relu+0x12e>
 8006468:	b470      	push	{r4, r5, r6}
 800646a:	6909      	ldr	r1, [r1, #16]
 800646c:	b101      	cbz	r1, 8006470 <forward_relu+0x1c>
 800646e:	6809      	ldr	r1, [r1, #0]
 8006470:	69c6      	ldr	r6, [r0, #28]
 8006472:	b1ce      	cbz	r6, 80064a8 <forward_relu+0x54>
 8006474:	6873      	ldr	r3, [r6, #4]
 8006476:	6988      	ldr	r0, [r1, #24]
 8006478:	6991      	ldr	r1, [r2, #24]
 800647a:	2b01      	cmp	r3, #1
 800647c:	d044      	beq.n	8006508 <forward_relu+0xb4>
 800647e:	6893      	ldr	r3, [r2, #8]
 8006480:	6880      	ldr	r0, [r0, #8]
 8006482:	6889      	ldr	r1, [r1, #8]
 8006484:	0a1b      	lsrs	r3, r3, #8
 8006486:	d073      	beq.n	8006570 <forward_relu+0x11c>
 8006488:	68d5      	ldr	r5, [r2, #12]
 800648a:	2201      	movs	r2, #1
 800648c:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8006490:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 8006494:	429d      	cmp	r5, r3
 8006496:	fb04 f202 	mul.w	r2, r4, r2
 800649a:	d1f9      	bne.n	8006490 <forward_relu+0x3c>
 800649c:	68b3      	ldr	r3, [r6, #8]
 800649e:	bc70      	pop	{r4, r5, r6}
 80064a0:	f001 bde8 	b.w	8008074 <forward_lite_nl_relu_generic_if32of32_kernel>
 80064a4:	685b      	ldr	r3, [r3, #4]
 80064a6:	deff      	udf	#255	@ 0xff
 80064a8:	6893      	ldr	r3, [r2, #8]
 80064aa:	6989      	ldr	r1, [r1, #24]
 80064ac:	6990      	ldr	r0, [r2, #24]
 80064ae:	6889      	ldr	r1, [r1, #8]
 80064b0:	6884      	ldr	r4, [r0, #8]
 80064b2:	0a1b      	lsrs	r3, r3, #8
 80064b4:	d05e      	beq.n	8006574 <forward_relu+0x120>
 80064b6:	68d5      	ldr	r5, [r2, #12]
 80064b8:	2201      	movs	r2, #1
 80064ba:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80064be:	f853 0d04 	ldr.w	r0, [r3, #-4]!
 80064c2:	429d      	cmp	r5, r3
 80064c4:	fb00 f202 	mul.w	r2, r0, r2
 80064c8:	d1f9      	bne.n	80064be <forward_relu+0x6a>
 80064ca:	f102 4380 	add.w	r3, r2, #1073741824	@ 0x40000000
 80064ce:	3b01      	subs	r3, #1
 80064d0:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 80064d4:	4294      	cmp	r4, r2
 80064d6:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 80064da:	d813      	bhi.n	8006504 <forward_relu+0xb0>
 80064dc:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 8006588 <forward_relu+0x134>
 80064e0:	3204      	adds	r2, #4
 80064e2:	3104      	adds	r1, #4
 80064e4:	4613      	mov	r3, r2
 80064e6:	ed72 7a01 	vldmdb	r2!, {s15}
 80064ea:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80064ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80064f2:	f1a3 0308 	sub.w	r3, r3, #8
 80064f6:	bfb8      	it	lt
 80064f8:	eef0 7a47 	vmovlt.f32	s15, s14
 80064fc:	429c      	cmp	r4, r3
 80064fe:	ed61 7a01 	vstmdb	r1!, {s15}
 8006502:	d9ef      	bls.n	80064e4 <forward_relu+0x90>
 8006504:	bc70      	pop	{r4, r5, r6}
 8006506:	4770      	bx	lr
 8006508:	688c      	ldr	r4, [r1, #8]
 800650a:	6891      	ldr	r1, [r2, #8]
 800650c:	6880      	ldr	r0, [r0, #8]
 800650e:	0a09      	lsrs	r1, r1, #8
 8006510:	d032      	beq.n	8006578 <forward_relu+0x124>
 8006512:	68d5      	ldr	r5, [r2, #12]
 8006514:	eb05 0281 	add.w	r2, r5, r1, lsl #2
 8006518:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800651c:	4295      	cmp	r5, r2
 800651e:	fb01 f303 	mul.w	r3, r1, r3
 8006522:	d1f9      	bne.n	8006518 <forward_relu+0xc4>
 8006524:	f103 4280 	add.w	r2, r3, #1073741824	@ 0x40000000
 8006528:	3a01      	subs	r2, #1
 800652a:	68b1      	ldr	r1, [r6, #8]
 800652c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006530:	429c      	cmp	r4, r3
 8006532:	ed91 7a00 	vldr	s14, [r1]
 8006536:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 800653a:	d8e3      	bhi.n	8006504 <forward_relu+0xb0>
 800653c:	2500      	movs	r5, #0
 800653e:	3304      	adds	r3, #4
 8006540:	1d02      	adds	r2, r0, #4
 8006542:	ed53 7a01 	vldr	s15, [r3, #-4]
 8006546:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800654a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800654e:	f1a3 0104 	sub.w	r1, r3, #4
 8006552:	f1a3 0308 	sub.w	r3, r3, #8
 8006556:	d405      	bmi.n	8006564 <forward_relu+0x110>
 8006558:	429c      	cmp	r4, r3
 800655a:	f842 5d04 	str.w	r5, [r2, #-4]!
 800655e:	d8d1      	bhi.n	8006504 <forward_relu+0xb0>
 8006560:	460b      	mov	r3, r1
 8006562:	e7ee      	b.n	8006542 <forward_relu+0xee>
 8006564:	429c      	cmp	r4, r3
 8006566:	ed62 7a01 	vstmdb	r2!, {s15}
 800656a:	d8cb      	bhi.n	8006504 <forward_relu+0xb0>
 800656c:	460b      	mov	r3, r1
 800656e:	e7e8      	b.n	8006542 <forward_relu+0xee>
 8006570:	2201      	movs	r2, #1
 8006572:	e793      	b.n	800649c <forward_relu+0x48>
 8006574:	4622      	mov	r2, r4
 8006576:	e7b1      	b.n	80064dc <forward_relu+0x88>
 8006578:	68b2      	ldr	r2, [r6, #8]
 800657a:	4623      	mov	r3, r4
 800657c:	ed92 7a00 	vldr	s14, [r2]
 8006580:	e7dc      	b.n	800653c <forward_relu+0xe8>
 8006582:	2300      	movs	r3, #0
 8006584:	685b      	ldr	r3, [r3, #4]
 8006586:	deff      	udf	#255	@ 0xff
 8006588:	00000000 	.word	0x00000000

0800658c <forward_mp>:
 800658c:	6983      	ldr	r3, [r0, #24]
 800658e:	881a      	ldrh	r2, [r3, #0]
 8006590:	2a00      	cmp	r2, #0
 8006592:	f000 80c5 	beq.w	8006720 <forward_mp+0x194>
 8006596:	6859      	ldr	r1, [r3, #4]
 8006598:	684b      	ldr	r3, [r1, #4]
 800659a:	b103      	cbz	r3, 800659e <forward_mp+0x12>
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	2a01      	cmp	r2, #1
 80065a0:	f000 80c0 	beq.w	8006724 <forward_mp+0x198>
 80065a4:	690a      	ldr	r2, [r1, #16]
 80065a6:	2a00      	cmp	r2, #0
 80065a8:	f000 80bf 	beq.w	800672a <forward_mp+0x19e>
 80065ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065b0:	6811      	ldr	r1, [r2, #0]
 80065b2:	68ca      	ldr	r2, [r1, #12]
 80065b4:	6989      	ldr	r1, [r1, #24]
 80065b6:	68d4      	ldr	r4, [r2, #12]
 80065b8:	6895      	ldr	r5, [r2, #8]
 80065ba:	688a      	ldr	r2, [r1, #8]
 80065bc:	68d9      	ldr	r1, [r3, #12]
 80065be:	699b      	ldr	r3, [r3, #24]
 80065c0:	f8d1 9004 	ldr.w	r9, [r1, #4]
 80065c4:	689b      	ldr	r3, [r3, #8]
 80065c6:	b093      	sub	sp, #76	@ 0x4c
 80065c8:	9200      	str	r2, [sp, #0]
 80065ca:	6b02      	ldr	r2, [r0, #48]	@ 0x30
 80065cc:	930e      	str	r3, [sp, #56]	@ 0x38
 80065ce:	e9d2 3600 	ldrd	r3, r6, [r2]
 80065d2:	e9d1 7202 	ldrd	r7, r2, [r1, #8]
 80065d6:	69c1      	ldr	r1, [r0, #28]
 80065d8:	9109      	str	r1, [sp, #36]	@ 0x24
 80065da:	6a01      	ldr	r1, [r0, #32]
 80065dc:	910a      	str	r1, [sp, #40]	@ 0x28
 80065de:	6a41      	ldr	r1, [r0, #36]	@ 0x24
 80065e0:	910b      	str	r1, [sp, #44]	@ 0x2c
 80065e2:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 80065e4:	9408      	str	r4, [sp, #32]
 80065e6:	9504      	str	r5, [sp, #16]
 80065e8:	960d      	str	r6, [sp, #52]	@ 0x34
 80065ea:	9705      	str	r7, [sp, #20]
 80065ec:	910c      	str	r1, [sp, #48]	@ 0x30
 80065ee:	f1c3 0a00 	rsb	sl, r3, #0
 80065f2:	2c00      	cmp	r4, #0
 80065f4:	f000 8091 	beq.w	800671a <forward_mp+0x18e>
 80065f8:	441a      	add	r2, r3
 80065fa:	9b05      	ldr	r3, [sp, #20]
 80065fc:	9201      	str	r2, [sp, #4]
 80065fe:	fb09 f303 	mul.w	r3, r9, r3
 8006602:	ea4f 0789 	mov.w	r7, r9, lsl #2
 8006606:	ea4f 0883 	mov.w	r8, r3, lsl #2
 800660a:	4273      	negs	r3, r6
 800660c:	9310      	str	r3, [sp, #64]	@ 0x40
 800660e:	fb05 f307 	mul.w	r3, r5, r7
 8006612:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006614:	f04f 0b00 	mov.w	fp, #0
 8006618:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800661a:	9901      	ldr	r1, [sp, #4]
 800661c:	428a      	cmp	r2, r1
 800661e:	bf94      	ite	ls
 8006620:	eb0a 0e02 	addls.w	lr, sl, r2
 8006624:	eb0a 0e01 	addhi.w	lr, sl, r1
 8006628:	9a04      	ldr	r2, [sp, #16]
 800662a:	ea2a 73ea 	bic.w	r3, sl, sl, asr #31
 800662e:	9307      	str	r3, [sp, #28]
 8006630:	2a00      	cmp	r2, #0
 8006632:	d067      	beq.n	8006704 <forward_mp+0x178>
 8006634:	9a05      	ldr	r2, [sp, #20]
 8006636:	9d00      	ldr	r5, [sp, #0]
 8006638:	f8cd b044 	str.w	fp, [sp, #68]	@ 0x44
 800663c:	fb02 f303 	mul.w	r3, r2, r3
 8006640:	9303      	str	r3, [sp, #12]
 8006642:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006644:	18d3      	adds	r3, r2, r3
 8006646:	9302      	str	r3, [sp, #8]
 8006648:	2200      	movs	r2, #0
 800664a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800664c:	9206      	str	r2, [sp, #24]
 800664e:	2b00      	cmp	r3, #0
 8006650:	bfac      	ite	ge
 8006652:	9a03      	ldrge	r2, [sp, #12]
 8006654:	9e03      	ldrlt	r6, [sp, #12]
 8006656:	9902      	ldr	r1, [sp, #8]
 8006658:	bfa8      	it	ge
 800665a:	18d6      	addge	r6, r2, r3
 800665c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800665e:	fb06 2607 	mla	r6, r6, r7, r2
 8006662:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006664:	469b      	mov	fp, r3
 8006666:	bfb8      	it	lt
 8006668:	2300      	movlt	r3, #0
 800666a:	428a      	cmp	r2, r1
 800666c:	bf94      	ite	ls
 800666e:	445a      	addls	r2, fp
 8006670:	eb0b 0201 	addhi.w	r2, fp, r1
 8006674:	1ad4      	subs	r4, r2, r3
 8006676:	f1b9 0f00 	cmp.w	r9, #0
 800667a:	d008      	beq.n	800668e <forward_mp+0x102>
 800667c:	4633      	mov	r3, r6
 800667e:	462a      	mov	r2, r5
 8006680:	19b9      	adds	r1, r7, r6
 8006682:	f853 0b04 	ldr.w	r0, [r3], #4
 8006686:	f842 0b04 	str.w	r0, [r2], #4
 800668a:	4299      	cmp	r1, r3
 800668c:	d1f9      	bne.n	8006682 <forward_mp+0xf6>
 800668e:	9b07      	ldr	r3, [sp, #28]
 8006690:	459e      	cmp	lr, r3
 8006692:	dd24      	ble.n	80066de <forward_mp+0x152>
 8006694:	469c      	mov	ip, r3
 8006696:	fb07 6404 	mla	r4, r7, r4, r6
 800669a:	42a6      	cmp	r6, r4
 800669c:	d219      	bcs.n	80066d2 <forward_mp+0x146>
 800669e:	f1b9 0f00 	cmp.w	r9, #0
 80066a2:	d016      	beq.n	80066d2 <forward_mp+0x146>
 80066a4:	19f1      	adds	r1, r6, r7
 80066a6:	4630      	mov	r0, r6
 80066a8:	4602      	mov	r2, r0
 80066aa:	462b      	mov	r3, r5
 80066ac:	ecf2 7a01 	vldmia	r2!, {s15}
 80066b0:	ed93 7a00 	vldr	s14, [r3]
 80066b4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80066b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80066bc:	bfb8      	it	lt
 80066be:	eef0 7a47 	vmovlt.f32	s15, s14
 80066c2:	428a      	cmp	r2, r1
 80066c4:	ece3 7a01 	vstmia	r3!, {s15}
 80066c8:	d1f0      	bne.n	80066ac <forward_mp+0x120>
 80066ca:	4438      	add	r0, r7
 80066cc:	42a0      	cmp	r0, r4
 80066ce:	4439      	add	r1, r7
 80066d0:	d3ea      	bcc.n	80066a8 <forward_mp+0x11c>
 80066d2:	f10c 0c01 	add.w	ip, ip, #1
 80066d6:	45e6      	cmp	lr, ip
 80066d8:	4446      	add	r6, r8
 80066da:	4444      	add	r4, r8
 80066dc:	d1dd      	bne.n	800669a <forward_mp+0x10e>
 80066de:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80066e0:	9802      	ldr	r0, [sp, #8]
 80066e2:	9a06      	ldr	r2, [sp, #24]
 80066e4:	eb01 030b 	add.w	r3, r1, fp
 80066e8:	1a41      	subs	r1, r0, r1
 80066ea:	9102      	str	r1, [sp, #8]
 80066ec:	9904      	ldr	r1, [sp, #16]
 80066ee:	3201      	adds	r2, #1
 80066f0:	4291      	cmp	r1, r2
 80066f2:	9206      	str	r2, [sp, #24]
 80066f4:	443d      	add	r5, r7
 80066f6:	d1aa      	bne.n	800664e <forward_mp+0xc2>
 80066f8:	9b00      	ldr	r3, [sp, #0]
 80066fa:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80066fc:	f8dd b044 	ldr.w	fp, [sp, #68]	@ 0x44
 8006700:	4413      	add	r3, r2
 8006702:	9300      	str	r3, [sp, #0]
 8006704:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006706:	9a01      	ldr	r2, [sp, #4]
 8006708:	449a      	add	sl, r3
 800670a:	1ad3      	subs	r3, r2, r3
 800670c:	9301      	str	r3, [sp, #4]
 800670e:	9b08      	ldr	r3, [sp, #32]
 8006710:	f10b 0b01 	add.w	fp, fp, #1
 8006714:	455b      	cmp	r3, fp
 8006716:	f47f af7f 	bne.w	8006618 <forward_mp+0x8c>
 800671a:	b013      	add	sp, #76	@ 0x4c
 800671c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006720:	6853      	ldr	r3, [r2, #4]
 8006722:	deff      	udf	#255	@ 0xff
 8006724:	2300      	movs	r3, #0
 8006726:	685b      	ldr	r3, [r3, #4]
 8006728:	deff      	udf	#255	@ 0xff
 800672a:	68d3      	ldr	r3, [r2, #12]
 800672c:	deff      	udf	#255	@ 0xff
 800672e:	bf00      	nop

08006730 <array_f32_identity>:
 8006730:	6980      	ldr	r0, [r0, #24]
 8006732:	698b      	ldr	r3, [r1, #24]
 8006734:	4298      	cmp	r0, r3
 8006736:	d004      	beq.n	8006742 <array_f32_identity+0x12>
 8006738:	68c1      	ldr	r1, [r0, #12]
 800673a:	68d8      	ldr	r0, [r3, #12]
 800673c:	0092      	lsls	r2, r2, #2
 800673e:	f001 becd 	b.w	80084dc <st_int8_copy>
 8006742:	4770      	bx	lr

08006744 <forward_lstm>:
 8006744:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006748:	ed2d 8b06 	vpush	{d8-d10}
 800674c:	f5ad 7d0b 	sub.w	sp, sp, #556	@ 0x22c
 8006750:	6983      	ldr	r3, [r0, #24]
 8006752:	af00      	add	r7, sp, #0
 8006754:	881a      	ldrh	r2, [r3, #0]
 8006756:	60b8      	str	r0, [r7, #8]
 8006758:	2a00      	cmp	r2, #0
 800675a:	f001 8485 	beq.w	8008068 <forward_lstm+0x1924>
 800675e:	685b      	ldr	r3, [r3, #4]
 8006760:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006764:	2a01      	cmp	r2, #1
 8006766:	f001 847f 	beq.w	8008068 <forward_lstm+0x1924>
 800676a:	2a02      	cmp	r2, #2
 800676c:	f001 847c 	beq.w	8008068 <forward_lstm+0x1924>
 8006770:	69d8      	ldr	r0, [r3, #28]
 8006772:	2800      	cmp	r0, #0
 8006774:	f001 846c 	beq.w	8008050 <forward_lstm+0x190c>
 8006778:	8b1b      	ldrh	r3, [r3, #24]
 800677a:	6801      	ldr	r1, [r0, #0]
 800677c:	f8c7 110c 	str.w	r1, [r7, #268]	@ 0x10c
 8006780:	2b01      	cmp	r3, #1
 8006782:	e9d0 b302 	ldrd	fp, r3, [r0, #8]
 8006786:	bf88      	it	hi
 8006788:	f8d0 a004 	ldrhi.w	sl, [r0, #4]
 800678c:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8006790:	bf98      	it	ls
 8006792:	f04f 0a00 	movls.w	sl, #0
 8006796:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800679a:	685b      	ldr	r3, [r3, #4]
 800679c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800679e:	b10b      	cbz	r3, 80067a4 <forward_lstm+0x60>
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80067a4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80067a8:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80067aa:	899b      	ldrh	r3, [r3, #12]
 80067ac:	f8d1 c00c 	ldr.w	ip, [r1, #12]
 80067b0:	0099      	lsls	r1, r3, #2
 80067b2:	3107      	adds	r1, #7
 80067b4:	08c9      	lsrs	r1, r1, #3
 80067b6:	466c      	mov	r4, sp
 80067b8:	eba4 04c1 	sub.w	r4, r4, r1, lsl #3
 80067bc:	46a5      	mov	sp, r4
 80067be:	1ddc      	adds	r4, r3, #7
 80067c0:	466e      	mov	r6, sp
 80067c2:	08e4      	lsrs	r4, r4, #3
 80067c4:	eba6 04c4 	sub.w	r4, r6, r4, lsl #3
 80067c8:	46a5      	mov	sp, r4
 80067ca:	46ee      	mov	lr, sp
 80067cc:	ebae 05c1 	sub.w	r5, lr, r1, lsl #3
 80067d0:	68bc      	ldr	r4, [r7, #8]
 80067d2:	46ad      	mov	sp, r5
 80067d4:	eba5 01c1 	sub.w	r1, r5, r1, lsl #3
 80067d8:	6ae4      	ldr	r4, [r4, #44]	@ 0x2c
 80067da:	f8c7 d010 	str.w	sp, [r7, #16]
 80067de:	468d      	mov	sp, r1
 80067e0:	f8dc 100c 	ldr.w	r1, [ip, #12]
 80067e4:	6579      	str	r1, [r7, #84]	@ 0x54
 80067e6:	f8dc 1004 	ldr.w	r1, [ip, #4]
 80067ea:	67b9      	str	r1, [r7, #120]	@ 0x78
 80067ec:	00a1      	lsls	r1, r4, #2
 80067ee:	66fc      	str	r4, [r7, #108]	@ 0x6c
 80067f0:	ee09 1a90 	vmov	s19, r1
 80067f4:	466c      	mov	r4, sp
 80067f6:	2800      	cmp	r0, #0
 80067f8:	f001 8410 	beq.w	800801c <forward_lstm+0x18d8>
 80067fc:	6945      	ldr	r5, [r0, #20]
 80067fe:	6901      	ldr	r1, [r0, #16]
 8006800:	ee09 5a10 	vmov	s18, r5
 8006804:	6985      	ldr	r5, [r0, #24]
 8006806:	ee0a 1a90 	vmov	s21, r1
 800680a:	e9d0 8007 	ldrd	r8, r0, [r0, #28]
 800680e:	ee0a 5a10 	vmov	s20, r5
 8006812:	b119      	cbz	r1, 800681c <forward_lstm+0xd8>
 8006814:	6989      	ldr	r1, [r1, #24]
 8006816:	6889      	ldr	r1, [r1, #8]
 8006818:	ee0a 1a90 	vmov	s21, r1
 800681c:	ee19 1a10 	vmov	r1, s18
 8006820:	b119      	cbz	r1, 800682a <forward_lstm+0xe6>
 8006822:	6989      	ldr	r1, [r1, #24]
 8006824:	6889      	ldr	r1, [r1, #8]
 8006826:	ee09 1a10 	vmov	s18, r1
 800682a:	ee1a 1a10 	vmov	r1, s20
 800682e:	b119      	cbz	r1, 8006838 <forward_lstm+0xf4>
 8006830:	6989      	ldr	r1, [r1, #24]
 8006832:	6889      	ldr	r1, [r1, #8]
 8006834:	ee0a 1a10 	vmov	s20, r1
 8006838:	f1b8 0f00 	cmp.w	r8, #0
 800683c:	d003      	beq.n	8006846 <forward_lstm+0x102>
 800683e:	f8d8 1018 	ldr.w	r1, [r8, #24]
 8006842:	f8d1 8008 	ldr.w	r8, [r1, #8]
 8006846:	b108      	cbz	r0, 800684c <forward_lstm+0x108>
 8006848:	6981      	ldr	r1, [r0, #24]
 800684a:	6888      	ldr	r0, [r1, #8]
 800684c:	2a03      	cmp	r2, #3
 800684e:	f001 840b 	beq.w	8008068 <forward_lstm+0x1924>
 8006852:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006856:	f8d2 9028 	ldr.w	r9, [r2, #40]	@ 0x28
 800685a:	f1b9 0f00 	cmp.w	r9, #0
 800685e:	f001 83ff 	beq.w	8008060 <forward_lstm+0x191c>
 8006862:	f8d9 2000 	ldr.w	r2, [r9]
 8006866:	f8c7 2110 	str.w	r2, [r7, #272]	@ 0x110
 800686a:	1f22      	subs	r2, r4, #4
 800686c:	4473      	add	r3, lr
 800686e:	4671      	mov	r1, lr
 8006870:	60fa      	str	r2, [r7, #12]
 8006872:	f1c4 0e04 	rsb	lr, r4, #4
 8006876:	4614      	mov	r4, r2
 8006878:	693a      	ldr	r2, [r7, #16]
 800687a:	f8d7 c094 	ldr.w	ip, [r7, #148]	@ 0x94
 800687e:	e9c7 8946 	strd	r8, r9, [r7, #280]	@ 0x118
 8006882:	3e04      	subs	r6, #4
 8006884:	f8d7 906c 	ldr.w	r9, [r7, #108]	@ 0x6c
 8006888:	1f15      	subs	r5, r2, #4
 800688a:	4698      	mov	r8, r3
 800688c:	e016      	b.n	80068bc <forward_lstm+0x178>
 800688e:	4423      	add	r3, r4
 8006890:	f853 200e 	ldr.w	r2, [r3, lr]
 8006894:	b1c2      	cbz	r2, 80068c8 <forward_lstm+0x184>
 8006896:	68d3      	ldr	r3, [r2, #12]
 8006898:	f846 2f04 	str.w	r2, [r6, #4]!
 800689c:	68db      	ldr	r3, [r3, #12]
 800689e:	6992      	ldr	r2, [r2, #24]
 80068a0:	2b01      	cmp	r3, #1
 80068a2:	6893      	ldr	r3, [r2, #8]
 80068a4:	f845 3f04 	str.w	r3, [r5, #4]!
 80068a8:	bf8c      	ite	hi
 80068aa:	2301      	movhi	r3, #1
 80068ac:	2300      	movls	r3, #0
 80068ae:	f801 3b01 	strb.w	r3, [r1], #1
 80068b2:	bf8c      	ite	hi
 80068b4:	464b      	movhi	r3, r9
 80068b6:	2300      	movls	r3, #0
 80068b8:	f844 3f04 	str.w	r3, [r4, #4]!
 80068bc:	4588      	cmp	r8, r1
 80068be:	d003      	beq.n	80068c8 <forward_lstm+0x184>
 80068c0:	f8dc 3010 	ldr.w	r3, [ip, #16]
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d1e2      	bne.n	800688e <forward_lstm+0x14a>
 80068c8:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80068cc:	f8d7 210c 	ldr.w	r2, [r7, #268]	@ 0x10c
 80068d0:	699b      	ldr	r3, [r3, #24]
 80068d2:	f8da 1018 	ldr.w	r1, [sl, #24]
 80068d6:	689d      	ldr	r5, [r3, #8]
 80068d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068dc:	6994      	ldr	r4, [r2, #24]
 80068de:	699b      	ldr	r3, [r3, #24]
 80068e0:	6889      	ldr	r1, [r1, #8]
 80068e2:	689b      	ldr	r3, [r3, #8]
 80068e4:	f8db 2018 	ldr.w	r2, [fp, #24]
 80068e8:	6679      	str	r1, [r7, #100]	@ 0x64
 80068ea:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80068ec:	ee19 1a90 	vmov	r1, s19
 80068f0:	68bb      	ldr	r3, [r7, #8]
 80068f2:	6892      	ldr	r2, [r2, #8]
 80068f4:	68a4      	ldr	r4, [r4, #8]
 80068f6:	685b      	ldr	r3, [r3, #4]
 80068f8:	663a      	str	r2, [r7, #96]	@ 0x60
 80068fa:	186a      	adds	r2, r5, r1
 80068fc:	66bc      	str	r4, [r7, #104]	@ 0x68
 80068fe:	f8c7 2108 	str.w	r2, [r7, #264]	@ 0x108
 8006902:	eb05 0441 	add.w	r4, r5, r1, lsl #1
 8006906:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006908:	677d      	str	r5, [r7, #116]	@ 0x74
 800690a:	1861      	adds	r1, r4, r1
 800690c:	f013 7380 	ands.w	r3, r3, #16777216	@ 0x1000000
 8006910:	e9d7 8946 	ldrd	r8, r9, [r7, #280]	@ 0x118
 8006914:	f8c7 4098 	str.w	r4, [r7, #152]	@ 0x98
 8006918:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800691c:	f8c7 1084 	str.w	r1, [r7, #132]	@ 0x84
 8006920:	607b      	str	r3, [r7, #4]
 8006922:	f001 82aa 	beq.w	8007e7a <forward_lstm+0x1736>
 8006926:	f1b9 0f00 	cmp.w	r9, #0
 800692a:	f001 83a0 	beq.w	800806e <forward_lstm+0x192a>
 800692e:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8006932:	699b      	ldr	r3, [r3, #24]
 8006934:	68d8      	ldr	r0, [r3, #12]
 8006936:	68bb      	ldr	r3, [r7, #8]
 8006938:	4629      	mov	r1, r5
 800693a:	61d8      	str	r0, [r3, #28]
 800693c:	f001 fdce 	bl	80084dc <st_int8_copy>
 8006940:	ee19 2a90 	vmov	r2, s19
 8006944:	f8d7 1098 	ldr.w	r1, [r7, #152]	@ 0x98
 8006948:	2000      	movs	r0, #0
 800694a:	f001 fd6b 	bl	8008424 <st_int8_fill>
 800694e:	68ba      	ldr	r2, [r7, #8]
 8006950:	4bb2      	ldr	r3, [pc, #712]	@ (8006c1c <forward_lstm+0x4d8>)
 8006952:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8006954:	edd2 8a10 	vldr	s17, [r2, #64]	@ 0x40
 8006958:	2900      	cmp	r1, #0
 800695a:	bf08      	it	eq
 800695c:	4619      	moveq	r1, r3
 800695e:	6479      	str	r1, [r7, #68]	@ 0x44
 8006960:	6b51      	ldr	r1, [r2, #52]	@ 0x34
 8006962:	2900      	cmp	r1, #0
 8006964:	bf08      	it	eq
 8006966:	4619      	moveq	r1, r3
 8006968:	f8c7 1080 	str.w	r1, [r7, #128]	@ 0x80
 800696c:	6b91      	ldr	r1, [r2, #56]	@ 0x38
 800696e:	2900      	cmp	r1, #0
 8006970:	bf08      	it	eq
 8006972:	4619      	moveq	r1, r3
 8006974:	f892 303c 	ldrb.w	r3, [r2, #60]	@ 0x3c
 8006978:	6439      	str	r1, [r7, #64]	@ 0x40
 800697a:	2b00      	cmp	r3, #0
 800697c:	f001 8347 	beq.w	800800e <forward_lstm+0x18ca>
 8006980:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006982:	3b01      	subs	r3, #1
 8006984:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006988:	f04f 33ff 	mov.w	r3, #4294967295
 800698c:	673b      	str	r3, [r7, #112]	@ 0x70
 800698e:	4613      	mov	r3, r2
 8006990:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006994:	b1b3      	cbz	r3, 80069c4 <forward_lstm+0x280>
 8006996:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800699a:	899d      	ldrh	r5, [r3, #12]
 800699c:	b195      	cbz	r5, 80069c4 <forward_lstm+0x280>
 800699e:	693a      	ldr	r2, [r7, #16]
 80069a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80069a2:	68f8      	ldr	r0, [r7, #12]
 80069a4:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 80069a8:	1e5e      	subs	r6, r3, #1
 80069aa:	f850 3f04 	ldr.w	r3, [r0, #4]!
 80069ae:	6811      	ldr	r1, [r2, #0]
 80069b0:	fb03 f406 	mul.w	r4, r3, r6
 80069b4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80069b8:	f842 1b04 	str.w	r1, [r2], #4
 80069bc:	425b      	negs	r3, r3
 80069be:	4295      	cmp	r5, r2
 80069c0:	6003      	str	r3, [r0, #0]
 80069c2:	d1f2      	bne.n	80069aa <forward_lstm+0x266>
 80069c4:	6fbd      	ldr	r5, [r7, #120]	@ 0x78
 80069c6:	f8d7 c06c 	ldr.w	ip, [r7, #108]	@ 0x6c
 80069ca:	ed9f 8a96 	vldr	s16, [pc, #600]	@ 8006c24 <forward_lstm+0x4e0>
 80069ce:	b2a9      	uxth	r1, r5
 80069d0:	f1a1 0310 	sub.w	r3, r1, #16
 80069d4:	091b      	lsrs	r3, r3, #4
 80069d6:	3301      	adds	r3, #1
 80069d8:	fa1f f28c 	uxth.w	r2, ip
 80069dc:	019b      	lsls	r3, r3, #6
 80069de:	0096      	lsls	r6, r2, #2
 80069e0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80069e4:	4613      	mov	r3, r2
 80069e6:	fb06 f001 	mul.w	r0, r6, r1
 80069ea:	f8c7 10e8 	str.w	r1, [r7, #232]	@ 0xe8
 80069ee:	fb03 f103 	mul.w	r1, r3, r3
 80069f2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80069f6:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 80069fa:	eb03 0346 	add.w	r3, r3, r6, lsl #1
 80069fe:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006a02:	00ab      	lsls	r3, r5, #2
 8006a04:	6ebd      	ldr	r5, [r7, #104]	@ 0x68
 8006a06:	f8c7 60d8 	str.w	r6, [r7, #216]	@ 0xd8
 8006a0a:	eb05 0e40 	add.w	lr, r5, r0, lsl #1
 8006a0e:	6e7d      	ldr	r5, [r7, #100]	@ 0x64
 8006a10:	f8c7 e050 	str.w	lr, [r7, #80]	@ 0x50
 8006a14:	3a10      	subs	r2, #16
 8006a16:	eb05 0ec1 	add.w	lr, r5, r1, lsl #3
 8006a1a:	6dfd      	ldr	r5, [r7, #92]	@ 0x5c
 8006a1c:	f8c7 e04c 	str.w	lr, [r7, #76]	@ 0x4c
 8006a20:	0912      	lsrs	r2, r2, #4
 8006a22:	eb05 0e46 	add.w	lr, r5, r6, lsl #1
 8006a26:	1c55      	adds	r5, r2, #1
 8006a28:	0192      	lsls	r2, r2, #6
 8006a2a:	61fa      	str	r2, [r7, #28]
 8006a2c:	01aa      	lsls	r2, r5, #6
 8006a2e:	f8c7 20e0 	str.w	r2, [r7, #224]	@ 0xe0
 8006a32:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8006a34:	f8d7 5084 	ldr.w	r5, [r7, #132]	@ 0x84
 8006a38:	f8c7 e048 	str.w	lr, [r7, #72]	@ 0x48
 8006a3c:	4402      	add	r2, r0
 8006a3e:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8006a40:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8006a42:	1810      	adds	r0, r2, r0
 8006a44:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8006a46:	63b8      	str	r0, [r7, #56]	@ 0x38
 8006a48:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8006a4c:	637a      	str	r2, [r7, #52]	@ 0x34
 8006a4e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006a50:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 8006a52:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8006a56:	633a      	str	r2, [r7, #48]	@ 0x30
 8006a58:	4632      	mov	r2, r6
 8006a5a:	1986      	adds	r6, r0, r6
 8006a5c:	62fe      	str	r6, [r7, #44]	@ 0x2c
 8006a5e:	6dfe      	ldr	r6, [r7, #92]	@ 0x5c
 8006a60:	f8d7 00ac 	ldr.w	r0, [r7, #172]	@ 0xac
 8006a64:	4416      	add	r6, r2
 8006a66:	62be      	str	r6, [r7, #40]	@ 0x28
 8006a68:	18ae      	adds	r6, r5, r2
 8006a6a:	f8c7 60b0 	str.w	r6, [r7, #176]	@ 0xb0
 8006a6e:	1886      	adds	r6, r0, r2
 8006a70:	f8c7 608c 	str.w	r6, [r7, #140]	@ 0x8c
 8006a74:	6fbd      	ldr	r5, [r7, #120]	@ 0x78
 8006a76:	f8d7 10e8 	ldr.w	r1, [r7, #232]	@ 0xe8
 8006a7a:	f64f 74f0 	movw	r4, #65520	@ 0xfff0
 8006a7e:	ea05 0604 	and.w	r6, r5, r4
 8006a82:	ea0c 0404 	and.w	r4, ip, r4
 8006a86:	f8c7 4110 	str.w	r4, [r7, #272]	@ 0x110
 8006a8a:	008c      	lsls	r4, r1, #2
 8006a8c:	f8c7 40bc 	str.w	r4, [r7, #188]	@ 0xbc
 8006a90:	6f3c      	ldr	r4, [r7, #112]	@ 0x70
 8006a92:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8006a94:	f8c7 610c 	str.w	r6, [r7, #268]	@ 0x10c
 8006a98:	fb03 f404 	mul.w	r4, r3, r4
 8006a9c:	627c      	str	r4, [r7, #36]	@ 0x24
 8006a9e:	f8d7 4090 	ldr.w	r4, [r7, #144]	@ 0x90
 8006aa2:	fb03 f404 	mul.w	r4, r3, r4
 8006aa6:	4673      	mov	r3, lr
 8006aa8:	4413      	add	r3, r2
 8006aaa:	eb01 0142 	add.w	r1, r1, r2, lsl #1
 8006aae:	61bb      	str	r3, [r7, #24]
 8006ab0:	eb00 0342 	add.w	r3, r0, r2, lsl #1
 8006ab4:	f8c7 4088 	str.w	r4, [r7, #136]	@ 0x88
 8006ab8:	6239      	str	r1, [r7, #32]
 8006aba:	617b      	str	r3, [r7, #20]
 8006abc:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8006ac0:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8006ac2:	f8d7 1088 	ldr.w	r1, [r7, #136]	@ 0x88
 8006ac6:	f8d7 50b0 	ldr.w	r5, [r7, #176]	@ 0xb0
 8006aca:	f8d7 4084 	ldr.w	r4, [r7, #132]	@ 0x84
 8006ace:	4413      	add	r3, r2
 8006ad0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006ad4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006ad8:	4b51      	ldr	r3, [pc, #324]	@ (8006c20 <forward_lstm+0x4dc>)
 8006ada:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8006ade:	e9c7 324c 	strd	r3, r2, [r7, #304]	@ 0x130
 8006ae2:	e9c7 3250 	strd	r3, r2, [r7, #320]	@ 0x140
 8006ae6:	e9c7 3254 	strd	r3, r2, [r7, #336]	@ 0x150
 8006aea:	e9c7 3258 	strd	r3, r2, [r7, #352]	@ 0x160
 8006aee:	e9c7 325c 	strd	r3, r2, [r7, #368]	@ 0x170
 8006af2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006af4:	f8c7 2124 	str.w	r2, [r7, #292]	@ 0x124
 8006af8:	699b      	ldr	r3, [r3, #24]
 8006afa:	689b      	ldr	r3, [r3, #8]
 8006afc:	f8c7 4128 	str.w	r4, [r7, #296]	@ 0x128
 8006b00:	185e      	adds	r6, r3, r1
 8006b02:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006b06:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 8006b0a:	f8c7 60ec 	str.w	r6, [r7, #236]	@ 0xec
 8006b0e:	f507 7090 	add.w	r0, r7, #288	@ 0x120
 8006b12:	e9c7 554e 	strd	r5, r5, [r7, #312]	@ 0x138
 8006b16:	e9c7 3352 	strd	r3, r3, [r7, #328]	@ 0x148
 8006b1a:	f8c7 412c 	str.w	r4, [r7, #300]	@ 0x12c
 8006b1e:	e9c7 1156 	strd	r1, r1, [r7, #344]	@ 0x158
 8006b22:	f8c7 0198 	str.w	r0, [r7, #408]	@ 0x198
 8006b26:	f507 7098 	add.w	r0, r7, #304	@ 0x130
 8006b2a:	f8d7 1098 	ldr.w	r1, [r7, #152]	@ 0x98
 8006b2e:	f8c7 01b4 	str.w	r0, [r7, #436]	@ 0x1b4
 8006b32:	f507 70a0 	add.w	r0, r7, #320	@ 0x140
 8006b36:	f8c7 01d0 	str.w	r0, [r7, #464]	@ 0x1d0
 8006b3a:	f507 70a8 	add.w	r0, r7, #336	@ 0x150
 8006b3e:	e9c7 115a 	strd	r1, r1, [r7, #360]	@ 0x168
 8006b42:	f8c7 01ec 	str.w	r0, [r7, #492]	@ 0x1ec
 8006b46:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 8006b48:	f507 70b0 	add.w	r0, r7, #352	@ 0x160
 8006b4c:	f8c7 0208 	str.w	r0, [r7, #520]	@ 0x208
 8006b50:	f507 70b8 	add.w	r0, r7, #368	@ 0x170
 8006b54:	e9c7 115e 	strd	r1, r1, [r7, #376]	@ 0x178
 8006b58:	f8c7 0224 	str.w	r0, [r7, #548]	@ 0x224
 8006b5c:	2a00      	cmp	r2, #0
 8006b5e:	f001 81e6 	beq.w	8007f2e <forward_lstm+0x17ea>
 8006b62:	69fa      	ldr	r2, [r7, #28]
 8006b64:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006b68:	f102 0080 	add.w	r0, r2, #128	@ 0x80
 8006b6c:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 8006b70:	67f9      	str	r1, [r7, #124]	@ 0x7c
 8006b72:	eb00 0802 	add.w	r8, r0, r2
 8006b76:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8006b78:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4
 8006b7c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006b7e:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
 8006b82:	469e      	mov	lr, r3
 8006b84:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 8006b86:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006b88:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
 8006b8c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8006b90:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8006b92:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006b94:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
 8006b98:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006b9c:	f8d7 00e4 	ldr.w	r0, [r7, #228]	@ 0xe4
 8006ba0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ba2:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006ba6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006ba8:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8006bac:	1830      	adds	r0, r6, r0
 8006bae:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006bb0:	f8c7 00a8 	str.w	r0, [r7, #168]	@ 0xa8
 8006bb4:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8006bb8:	f8d7 00e0 	ldr.w	r0, [r7, #224]	@ 0xe0
 8006bbc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006bbe:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8006bc2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006bc4:	f8c7 5114 	str.w	r5, [r7, #276]	@ 0x114
 8006bc8:	4402      	add	r2, r0
 8006bca:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8006bce:	f003 030f 	and.w	r3, r3, #15
 8006bd2:	6a3a      	ldr	r2, [r7, #32]
 8006bd4:	f8c7 20c8 	str.w	r2, [r7, #200]	@ 0xc8
 8006bd8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006bdc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006bde:	f8c7 10dc 	str.w	r1, [r7, #220]	@ 0xdc
 8006be2:	e9c7 e846 	strd	lr, r8, [r7, #280]	@ 0x118
 8006be6:	f003 030f 	and.w	r3, r3, #15
 8006bea:	46a4      	mov	ip, r4
 8006bec:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006bf0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006bf4:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 8006c24 <forward_lstm+0x4e0>
 8006bf8:	ecac 8a01 	vstmia	ip!, {s16}
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	f001 8173 	beq.w	8007ee8 <forward_lstm+0x17a4>
 8006c02:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8006c06:	f8d7 10e8 	ldr.w	r1, [r7, #232]	@ 0xe8
 8006c0a:	f8d7 011c 	ldr.w	r0, [r7, #284]	@ 0x11c
 8006c0e:	f103 0240 	add.w	r2, r3, #64	@ 0x40
 8006c12:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c16:	3340      	adds	r3, #64	@ 0x40
 8006c18:	e006      	b.n	8006c28 <forward_lstm+0x4e4>
 8006c1a:	bf00      	nop
 8006c1c:	08006731 	.word	0x08006731
 8006c20:	01821040 	.word	0x01821040
 8006c24:	00000000 	.word	0x00000000
 8006c28:	ed53 5a0f 	vldr	s11, [r3, #-60]	@ 0xffffffc4
 8006c2c:	ed52 7a0f 	vldr	s15, [r2, #-60]	@ 0xffffffc4
 8006c30:	ed12 6a10 	vldr	s12, [r2, #-64]	@ 0xffffffc0
 8006c34:	ed53 6a10 	vldr	s13, [r3, #-64]	@ 0xffffffc0
 8006c38:	ed52 4a0d 	vldr	s9, [r2, #-52]	@ 0xffffffcc
 8006c3c:	ed12 5a0c 	vldr	s10, [r2, #-48]	@ 0xffffffd0
 8006c40:	ed12 3a0a 	vldr	s6, [r2, #-40]	@ 0xffffffd8
 8006c44:	ed53 3a0a 	vldr	s7, [r3, #-40]	@ 0xffffffd8
 8006c48:	ed12 4a09 	vldr	s8, [r2, #-36]	@ 0xffffffdc
 8006c4c:	ed12 1a06 	vldr	s2, [r2, #-24]	@ 0xffffffe8
 8006c50:	ed53 1a06 	vldr	s3, [r3, #-24]	@ 0xffffffe8
 8006c54:	ed12 2a05 	vldr	s4, [r2, #-20]	@ 0xffffffec
 8006c58:	ed53 2a05 	vldr	s5, [r3, #-20]	@ 0xffffffec
 8006c5c:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8006c60:	ed52 5a0e 	vldr	s11, [r2, #-56]	@ 0xffffffc8
 8006c64:	eee6 7a26 	vfma.f32	s15, s12, s13
 8006c68:	3910      	subs	r1, #16
 8006c6a:	290f      	cmp	r1, #15
 8006c6c:	ed13 6a0e 	vldr	s12, [r3, #-56]	@ 0xffffffc8
 8006c70:	ed53 6a0d 	vldr	s13, [r3, #-52]	@ 0xffffffcc
 8006c74:	eee5 7a86 	vfma.f32	s15, s11, s12
 8006c78:	f102 0240 	add.w	r2, r2, #64	@ 0x40
 8006c7c:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 8006c80:	ed53 5a1c 	vldr	s11, [r3, #-112]	@ 0xffffff90
 8006c84:	ed12 6a1b 	vldr	s12, [r2, #-108]	@ 0xffffff94
 8006c88:	eee4 7aa6 	vfma.f32	s15, s9, s13
 8006c8c:	ed53 6a1b 	vldr	s13, [r3, #-108]	@ 0xffffff94
 8006c90:	ed53 4a19 	vldr	s9, [r3, #-100]	@ 0xffffff9c
 8006c94:	eee5 7a25 	vfma.f32	s15, s10, s11
 8006c98:	ed12 5a18 	vldr	s10, [r2, #-96]	@ 0xffffffa0
 8006c9c:	ed53 5a18 	vldr	s11, [r3, #-96]	@ 0xffffffa0
 8006ca0:	eee6 7a26 	vfma.f32	s15, s12, s13
 8006ca4:	ed12 6a17 	vldr	s12, [r2, #-92]	@ 0xffffffa4
 8006ca8:	ed53 6a17 	vldr	s13, [r3, #-92]	@ 0xffffffa4
 8006cac:	eee3 7a23 	vfma.f32	s15, s6, s7
 8006cb0:	ed12 3a14 	vldr	s6, [r2, #-80]	@ 0xffffffb0
 8006cb4:	ed53 3a14 	vldr	s7, [r3, #-80]	@ 0xffffffb0
 8006cb8:	eee4 7a24 	vfma.f32	s15, s8, s9
 8006cbc:	ed12 4a13 	vldr	s8, [r2, #-76]	@ 0xffffffb4
 8006cc0:	ed53 4a13 	vldr	s9, [r3, #-76]	@ 0xffffffb4
 8006cc4:	eee5 7a25 	vfma.f32	s15, s10, s11
 8006cc8:	ed12 5a12 	vldr	s10, [r2, #-72]	@ 0xffffffb8
 8006ccc:	ed53 5a12 	vldr	s11, [r3, #-72]	@ 0xffffffb8
 8006cd0:	eee6 7a26 	vfma.f32	s15, s12, s13
 8006cd4:	ed12 6a11 	vldr	s12, [r2, #-68]	@ 0xffffffbc
 8006cd8:	ed53 6a11 	vldr	s13, [r3, #-68]	@ 0xffffffbc
 8006cdc:	eee1 7a21 	vfma.f32	s15, s2, s3
 8006ce0:	eee2 7a22 	vfma.f32	s15, s4, s5
 8006ce4:	eee3 7a23 	vfma.f32	s15, s6, s7
 8006ce8:	eee4 7a24 	vfma.f32	s15, s8, s9
 8006cec:	eee5 7a25 	vfma.f32	s15, s10, s11
 8006cf0:	eee6 7a26 	vfma.f32	s15, s12, s13
 8006cf4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006cf8:	d896      	bhi.n	8006c28 <forward_lstm+0x4e4>
 8006cfa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006cfe:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8006d02:	f8d7 a0a0 	ldr.w	sl, [r7, #160]	@ 0xa0
 8006d06:	f8d7 40a8 	ldr.w	r4, [r7, #168]	@ 0xa8
 8006d0a:	f8c7 011c 	str.w	r0, [r7, #284]	@ 0x11c
 8006d0e:	4413      	add	r3, r2
 8006d10:	f1ba 0f03 	cmp.w	sl, #3
 8006d14:	f241 80e4 	bls.w	8007ee0 <forward_lstm+0x179c>
 8006d18:	edd3 6a01 	vldr	s13, [r3, #4]
 8006d1c:	edd4 7a01 	vldr	s15, [r4, #4]
 8006d20:	ed94 6a00 	vldr	s12, [r4]
 8006d24:	ed94 5a02 	vldr	s10, [r4, #8]
 8006d28:	edd3 5a02 	vldr	s11, [r3, #8]
 8006d2c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8006d30:	edd3 6a00 	vldr	s13, [r3]
 8006d34:	eee6 7a26 	vfma.f32	s15, s12, s13
 8006d38:	f1aa 0804 	sub.w	r8, sl, #4
 8006d3c:	f1b8 0f03 	cmp.w	r8, #3
 8006d40:	ed94 6a03 	vldr	s12, [r4, #12]
 8006d44:	edd3 6a03 	vldr	s13, [r3, #12]
 8006d48:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006d4c:	eee5 7a25 	vfma.f32	s15, s10, s11
 8006d50:	eee6 7a26 	vfma.f32	s15, s12, s13
 8006d54:	eeb0 7a67 	vmov.f32	s14, s15
 8006d58:	d937      	bls.n	8006dca <forward_lstm+0x686>
 8006d5a:	edd3 6a05 	vldr	s13, [r3, #20]
 8006d5e:	edd4 7a05 	vldr	s15, [r4, #20]
 8006d62:	ed94 6a04 	vldr	s12, [r4, #16]
 8006d66:	ed94 5a06 	vldr	s10, [r4, #24]
 8006d6a:	edd3 5a06 	vldr	s11, [r3, #24]
 8006d6e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8006d72:	edd3 6a04 	vldr	s13, [r3, #16]
 8006d76:	eee6 7a26 	vfma.f32	s15, s12, s13
 8006d7a:	f1aa 0208 	sub.w	r2, sl, #8
 8006d7e:	2a03      	cmp	r2, #3
 8006d80:	ed94 6a07 	vldr	s12, [r4, #28]
 8006d84:	edd3 6a07 	vldr	s13, [r3, #28]
 8006d88:	eee5 7a25 	vfma.f32	s15, s10, s11
 8006d8c:	eee6 7a26 	vfma.f32	s15, s12, s13
 8006d90:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006d94:	d919      	bls.n	8006dca <forward_lstm+0x686>
 8006d96:	edd4 6a09 	vldr	s13, [r4, #36]	@ 0x24
 8006d9a:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8006d9e:	ed93 6a08 	vldr	s12, [r3, #32]
 8006da2:	ed93 5a0a 	vldr	s10, [r3, #40]	@ 0x28
 8006da6:	edd4 5a0a 	vldr	s11, [r4, #40]	@ 0x28
 8006daa:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8006dae:	edd4 6a08 	vldr	s13, [r4, #32]
 8006db2:	eee6 7a26 	vfma.f32	s15, s12, s13
 8006db6:	ed93 6a0b 	vldr	s12, [r3, #44]	@ 0x2c
 8006dba:	edd4 6a0b 	vldr	s13, [r4, #44]	@ 0x2c
 8006dbe:	eee5 7a25 	vfma.f32	s15, s10, s11
 8006dc2:	eee6 7a26 	vfma.f32	s15, s12, s13
 8006dc6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006dca:	ea4f 0898 	mov.w	r8, r8, lsr #2
 8006dce:	f108 0801 	add.w	r8, r8, #1
 8006dd2:	eb03 1308 	add.w	r3, r3, r8, lsl #4
 8006dd6:	f00a 0103 	and.w	r1, sl, #3
 8006dda:	eb04 1808 	add.w	r8, r4, r8, lsl #4
 8006dde:	b1a9      	cbz	r1, 8006e0c <forward_lstm+0x6c8>
 8006de0:	edd8 6a00 	vldr	s13, [r8]
 8006de4:	edd3 7a00 	vldr	s15, [r3]
 8006de8:	1e4a      	subs	r2, r1, #1
 8006dea:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006dee:	d00d      	beq.n	8006e0c <forward_lstm+0x6c8>
 8006df0:	edd8 6a01 	vldr	s13, [r8, #4]
 8006df4:	edd3 7a01 	vldr	s15, [r3, #4]
 8006df8:	2a01      	cmp	r2, #1
 8006dfa:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006dfe:	d005      	beq.n	8006e0c <forward_lstm+0x6c8>
 8006e00:	edd3 6a02 	vldr	s13, [r3, #8]
 8006e04:	edd8 7a02 	vldr	s15, [r8, #8]
 8006e08:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006e0c:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8006e10:	ed5f 6a7c 	vldr	s13, [pc, #-496]	@ 8006c24 <forward_lstm+0x4e0>
 8006e14:	ed0c 7a01 	vstr	s14, [ip, #-4]
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	f001 8080 	beq.w	8007f1e <forward_lstm+0x17da>
 8006e1e:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8006e22:	f8d7 2100 	ldr.w	r2, [r7, #256]	@ 0x100
 8006e26:	f8d7 011c 	ldr.w	r0, [r7, #284]	@ 0x11c
 8006e2a:	3340      	adds	r3, #64	@ 0x40
 8006e2c:	3240      	adds	r2, #64	@ 0x40
 8006e2e:	ed53 7a0f 	vldr	s15, [r3, #-60]	@ 0xffffffc4
 8006e32:	ed12 5a0f 	vldr	s10, [r2, #-60]	@ 0xffffffc4
 8006e36:	ed53 5a10 	vldr	s11, [r3, #-64]	@ 0xffffffc0
 8006e3a:	ed12 6a10 	vldr	s12, [r2, #-64]	@ 0xffffffc0
 8006e3e:	ed13 4a0d 	vldr	s8, [r3, #-52]	@ 0xffffffcc
 8006e42:	ed53 4a0c 	vldr	s9, [r3, #-48]	@ 0xffffffd0
 8006e46:	ed53 2a0a 	vldr	s5, [r3, #-40]	@ 0xffffffd8
 8006e4a:	ed12 3a0a 	vldr	s6, [r2, #-40]	@ 0xffffffd8
 8006e4e:	ed53 3a09 	vldr	s7, [r3, #-36]	@ 0xffffffdc
 8006e52:	ed53 0a06 	vldr	s1, [r3, #-24]	@ 0xffffffe8
 8006e56:	ed12 1a06 	vldr	s2, [r2, #-24]	@ 0xffffffe8
 8006e5a:	ed53 1a05 	vldr	s3, [r3, #-20]	@ 0xffffffec
 8006e5e:	ed12 2a05 	vldr	s4, [r2, #-20]	@ 0xffffffec
 8006e62:	ee67 7a85 	vmul.f32	s15, s15, s10
 8006e66:	ed13 5a0e 	vldr	s10, [r3, #-56]	@ 0xffffffc8
 8006e6a:	eee5 7a86 	vfma.f32	s15, s11, s12
 8006e6e:	3340      	adds	r3, #64	@ 0x40
 8006e70:	3240      	adds	r2, #64	@ 0x40
 8006e72:	ed52 5a1e 	vldr	s11, [r2, #-120]	@ 0xffffff88
 8006e76:	ed12 6a1d 	vldr	s12, [r2, #-116]	@ 0xffffff8c
 8006e7a:	eee5 7a25 	vfma.f32	s15, s10, s11
 8006e7e:	ed12 5a1c 	vldr	s10, [r2, #-112]	@ 0xffffff90
 8006e82:	ed53 5a1b 	vldr	s11, [r3, #-108]	@ 0xffffff94
 8006e86:	eee4 7a06 	vfma.f32	s15, s8, s12
 8006e8a:	ed12 6a1b 	vldr	s12, [r2, #-108]	@ 0xffffff94
 8006e8e:	ed12 4a19 	vldr	s8, [r2, #-100]	@ 0xffffff9c
 8006e92:	eee4 7a85 	vfma.f32	s15, s9, s10
 8006e96:	ed53 4a18 	vldr	s9, [r3, #-96]	@ 0xffffffa0
 8006e9a:	ed12 5a18 	vldr	s10, [r2, #-96]	@ 0xffffffa0
 8006e9e:	eee5 7a86 	vfma.f32	s15, s11, s12
 8006ea2:	ed53 5a17 	vldr	s11, [r3, #-92]	@ 0xffffffa4
 8006ea6:	ed12 6a17 	vldr	s12, [r2, #-92]	@ 0xffffffa4
 8006eaa:	eee2 7a83 	vfma.f32	s15, s5, s6
 8006eae:	ed53 2a14 	vldr	s5, [r3, #-80]	@ 0xffffffb0
 8006eb2:	ed12 3a14 	vldr	s6, [r2, #-80]	@ 0xffffffb0
 8006eb6:	eee3 7a84 	vfma.f32	s15, s7, s8
 8006eba:	ed53 3a13 	vldr	s7, [r3, #-76]	@ 0xffffffb4
 8006ebe:	ed12 4a13 	vldr	s8, [r2, #-76]	@ 0xffffffb4
 8006ec2:	eee4 7a85 	vfma.f32	s15, s9, s10
 8006ec6:	ed53 4a12 	vldr	s9, [r3, #-72]	@ 0xffffffb8
 8006eca:	ed12 5a12 	vldr	s10, [r2, #-72]	@ 0xffffffb8
 8006ece:	eee5 7a86 	vfma.f32	s15, s11, s12
 8006ed2:	ed53 5a11 	vldr	s11, [r3, #-68]	@ 0xffffffbc
 8006ed6:	ed12 6a11 	vldr	s12, [r2, #-68]	@ 0xffffffbc
 8006eda:	eee0 7a81 	vfma.f32	s15, s1, s2
 8006ede:	4298      	cmp	r0, r3
 8006ee0:	eee1 7a82 	vfma.f32	s15, s3, s4
 8006ee4:	eee2 7a83 	vfma.f32	s15, s5, s6
 8006ee8:	eee3 7a84 	vfma.f32	s15, s7, s8
 8006eec:	eee4 7a85 	vfma.f32	s15, s9, s10
 8006ef0:	eee5 7a86 	vfma.f32	s15, s11, s12
 8006ef4:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8006ef8:	d199      	bne.n	8006e2e <forward_lstm+0x6ea>
 8006efa:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8006efe:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8006f02:	f8d7 909c 	ldr.w	r9, [r7, #156]	@ 0x9c
 8006f06:	f8d7 50a4 	ldr.w	r5, [r7, #164]	@ 0xa4
 8006f0a:	f8c7 011c 	str.w	r0, [r7, #284]	@ 0x11c
 8006f0e:	4413      	add	r3, r2
 8006f10:	f1b9 0f03 	cmp.w	r9, #3
 8006f14:	f240 87e0 	bls.w	8007ed8 <forward_lstm+0x1794>
 8006f18:	ed93 6a01 	vldr	s12, [r3, #4]
 8006f1c:	edd5 7a01 	vldr	s15, [r5, #4]
 8006f20:	edd5 5a00 	vldr	s11, [r5]
 8006f24:	edd5 4a02 	vldr	s9, [r5, #8]
 8006f28:	ed93 5a02 	vldr	s10, [r3, #8]
 8006f2c:	ee67 7a86 	vmul.f32	s15, s15, s12
 8006f30:	ed93 6a00 	vldr	s12, [r3]
 8006f34:	eee5 7a86 	vfma.f32	s15, s11, s12
 8006f38:	f1a9 0604 	sub.w	r6, r9, #4
 8006f3c:	2e03      	cmp	r6, #3
 8006f3e:	edd5 5a03 	vldr	s11, [r5, #12]
 8006f42:	ed93 6a03 	vldr	s12, [r3, #12]
 8006f46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f4a:	eee4 7a85 	vfma.f32	s15, s9, s10
 8006f4e:	eee5 7a86 	vfma.f32	s15, s11, s12
 8006f52:	eef0 6a67 	vmov.f32	s13, s15
 8006f56:	d937      	bls.n	8006fc8 <forward_lstm+0x884>
 8006f58:	ed93 6a05 	vldr	s12, [r3, #20]
 8006f5c:	edd5 7a05 	vldr	s15, [r5, #20]
 8006f60:	edd5 5a04 	vldr	s11, [r5, #16]
 8006f64:	edd5 4a06 	vldr	s9, [r5, #24]
 8006f68:	ed93 5a06 	vldr	s10, [r3, #24]
 8006f6c:	ee67 7a86 	vmul.f32	s15, s15, s12
 8006f70:	ed93 6a04 	vldr	s12, [r3, #16]
 8006f74:	eee5 7a86 	vfma.f32	s15, s11, s12
 8006f78:	f1a9 0208 	sub.w	r2, r9, #8
 8006f7c:	2a03      	cmp	r2, #3
 8006f7e:	edd5 5a07 	vldr	s11, [r5, #28]
 8006f82:	ed93 6a07 	vldr	s12, [r3, #28]
 8006f86:	eee4 7a85 	vfma.f32	s15, s9, s10
 8006f8a:	eee5 7a86 	vfma.f32	s15, s11, s12
 8006f8e:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8006f92:	d919      	bls.n	8006fc8 <forward_lstm+0x884>
 8006f94:	ed95 6a09 	vldr	s12, [r5, #36]	@ 0x24
 8006f98:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8006f9c:	edd3 5a08 	vldr	s11, [r3, #32]
 8006fa0:	edd3 4a0a 	vldr	s9, [r3, #40]	@ 0x28
 8006fa4:	ed95 5a0a 	vldr	s10, [r5, #40]	@ 0x28
 8006fa8:	ee67 7a86 	vmul.f32	s15, s15, s12
 8006fac:	ed95 6a08 	vldr	s12, [r5, #32]
 8006fb0:	eee5 7a86 	vfma.f32	s15, s11, s12
 8006fb4:	edd3 5a0b 	vldr	s11, [r3, #44]	@ 0x2c
 8006fb8:	ed95 6a0b 	vldr	s12, [r5, #44]	@ 0x2c
 8006fbc:	eee4 7a85 	vfma.f32	s15, s9, s10
 8006fc0:	eee5 7a86 	vfma.f32	s15, s11, s12
 8006fc4:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8006fc8:	08b6      	lsrs	r6, r6, #2
 8006fca:	3601      	adds	r6, #1
 8006fcc:	eb03 1306 	add.w	r3, r3, r6, lsl #4
 8006fd0:	f009 0e03 	and.w	lr, r9, #3
 8006fd4:	eb05 1606 	add.w	r6, r5, r6, lsl #4
 8006fd8:	f1be 0f00 	cmp.w	lr, #0
 8006fdc:	d016      	beq.n	800700c <forward_lstm+0x8c8>
 8006fde:	ed96 6a00 	vldr	s12, [r6]
 8006fe2:	edd3 7a00 	vldr	s15, [r3]
 8006fe6:	f1be 0201 	subs.w	r2, lr, #1
 8006fea:	eee6 6a27 	vfma.f32	s13, s12, s15
 8006fee:	d00d      	beq.n	800700c <forward_lstm+0x8c8>
 8006ff0:	ed96 6a01 	vldr	s12, [r6, #4]
 8006ff4:	edd3 7a01 	vldr	s15, [r3, #4]
 8006ff8:	2a01      	cmp	r2, #1
 8006ffa:	eee6 6a27 	vfma.f32	s13, s12, s15
 8006ffe:	d005      	beq.n	800700c <forward_lstm+0x8c8>
 8007000:	ed93 6a02 	vldr	s12, [r3, #8]
 8007004:	edd6 7a02 	vldr	s15, [r6, #8]
 8007008:	eee6 6a27 	vfma.f32	s13, s12, s15
 800700c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8007010:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8007014:	ee37 7a26 	vadd.f32	s14, s14, s13
 8007018:	ed0c 7a01 	vstr	s14, [ip, #-4]
 800701c:	ecb3 6a01 	vldmia	r3!, {s12}
 8007020:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007024:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007028:	ecf3 7a01 	vldmia	r3!, {s15}
 800702c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8007030:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007034:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007038:	edd3 6a00 	vldr	s13, [r3]
 800703c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007040:	eee6 7a26 	vfma.f32	s15, s12, s13
 8007044:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007048:	ed9f 7aee 	vldr	s14, [pc, #952]	@ 8007404 <forward_lstm+0xcc0>
 800704c:	ed4c 7a01 	vstr	s15, [ip, #-4]
 8007050:	ed82 8a00 	vstr	s16, [r2]
 8007054:	2b00      	cmp	r3, #0
 8007056:	f000 875e 	beq.w	8007f16 <forward_lstm+0x17d2>
 800705a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800705e:	f8d7 b0e8 	ldr.w	fp, [r7, #232]	@ 0xe8
 8007062:	f8d7 011c 	ldr.w	r0, [r7, #284]	@ 0x11c
 8007066:	f103 0240 	add.w	r2, r3, #64	@ 0x40
 800706a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800706e:	3340      	adds	r3, #64	@ 0x40
 8007070:	ed53 5a0f 	vldr	s11, [r3, #-60]	@ 0xffffffc4
 8007074:	ed52 7a0f 	vldr	s15, [r2, #-60]	@ 0xffffffc4
 8007078:	ed12 6a10 	vldr	s12, [r2, #-64]	@ 0xffffffc0
 800707c:	ed53 6a10 	vldr	s13, [r3, #-64]	@ 0xffffffc0
 8007080:	ed52 4a0d 	vldr	s9, [r2, #-52]	@ 0xffffffcc
 8007084:	ed12 5a0c 	vldr	s10, [r2, #-48]	@ 0xffffffd0
 8007088:	ed12 3a0a 	vldr	s6, [r2, #-40]	@ 0xffffffd8
 800708c:	ed53 3a0a 	vldr	s7, [r3, #-40]	@ 0xffffffd8
 8007090:	ed12 4a09 	vldr	s8, [r2, #-36]	@ 0xffffffdc
 8007094:	ed12 1a06 	vldr	s2, [r2, #-24]	@ 0xffffffe8
 8007098:	ed53 1a06 	vldr	s3, [r3, #-24]	@ 0xffffffe8
 800709c:	ed12 2a05 	vldr	s4, [r2, #-20]	@ 0xffffffec
 80070a0:	ed53 2a05 	vldr	s5, [r3, #-20]	@ 0xffffffec
 80070a4:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80070a8:	ed52 5a0e 	vldr	s11, [r2, #-56]	@ 0xffffffc8
 80070ac:	eee6 7a26 	vfma.f32	s15, s12, s13
 80070b0:	f1ab 0b10 	sub.w	fp, fp, #16
 80070b4:	f1bb 0f0f 	cmp.w	fp, #15
 80070b8:	ed13 6a0e 	vldr	s12, [r3, #-56]	@ 0xffffffc8
 80070bc:	ed53 6a0d 	vldr	s13, [r3, #-52]	@ 0xffffffcc
 80070c0:	eee5 7a86 	vfma.f32	s15, s11, s12
 80070c4:	f102 0240 	add.w	r2, r2, #64	@ 0x40
 80070c8:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 80070cc:	ed53 5a1c 	vldr	s11, [r3, #-112]	@ 0xffffff90
 80070d0:	ed12 6a1b 	vldr	s12, [r2, #-108]	@ 0xffffff94
 80070d4:	eee4 7aa6 	vfma.f32	s15, s9, s13
 80070d8:	ed53 6a1b 	vldr	s13, [r3, #-108]	@ 0xffffff94
 80070dc:	ed53 4a19 	vldr	s9, [r3, #-100]	@ 0xffffff9c
 80070e0:	eee5 7a25 	vfma.f32	s15, s10, s11
 80070e4:	ed12 5a18 	vldr	s10, [r2, #-96]	@ 0xffffffa0
 80070e8:	ed53 5a18 	vldr	s11, [r3, #-96]	@ 0xffffffa0
 80070ec:	eee6 7a26 	vfma.f32	s15, s12, s13
 80070f0:	ed12 6a17 	vldr	s12, [r2, #-92]	@ 0xffffffa4
 80070f4:	ed53 6a17 	vldr	s13, [r3, #-92]	@ 0xffffffa4
 80070f8:	eee3 7a23 	vfma.f32	s15, s6, s7
 80070fc:	ed12 3a14 	vldr	s6, [r2, #-80]	@ 0xffffffb0
 8007100:	ed53 3a14 	vldr	s7, [r3, #-80]	@ 0xffffffb0
 8007104:	eee4 7a24 	vfma.f32	s15, s8, s9
 8007108:	ed12 4a13 	vldr	s8, [r2, #-76]	@ 0xffffffb4
 800710c:	ed53 4a13 	vldr	s9, [r3, #-76]	@ 0xffffffb4
 8007110:	eee5 7a25 	vfma.f32	s15, s10, s11
 8007114:	ed12 5a12 	vldr	s10, [r2, #-72]	@ 0xffffffb8
 8007118:	ed53 5a12 	vldr	s11, [r3, #-72]	@ 0xffffffb8
 800711c:	eee6 7a26 	vfma.f32	s15, s12, s13
 8007120:	ed12 6a11 	vldr	s12, [r2, #-68]	@ 0xffffffbc
 8007124:	ed53 6a11 	vldr	s13, [r3, #-68]	@ 0xffffffbc
 8007128:	eee1 7a21 	vfma.f32	s15, s2, s3
 800712c:	eee2 7a22 	vfma.f32	s15, s4, s5
 8007130:	eee3 7a23 	vfma.f32	s15, s6, s7
 8007134:	eee4 7a24 	vfma.f32	s15, s8, s9
 8007138:	eee5 7a25 	vfma.f32	s15, s10, s11
 800713c:	eee6 7a26 	vfma.f32	s15, s12, s13
 8007140:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007144:	d894      	bhi.n	8007070 <forward_lstm+0x92c>
 8007146:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800714a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800714e:	f8c7 011c 	str.w	r0, [r7, #284]	@ 0x11c
 8007152:	4413      	add	r3, r2
 8007154:	f1ba 0f03 	cmp.w	sl, #3
 8007158:	d95c      	bls.n	8007214 <forward_lstm+0xad0>
 800715a:	edd3 6a01 	vldr	s13, [r3, #4]
 800715e:	edd4 7a01 	vldr	s15, [r4, #4]
 8007162:	ed94 6a00 	vldr	s12, [r4]
 8007166:	ed94 5a02 	vldr	s10, [r4, #8]
 800716a:	edd3 5a02 	vldr	s11, [r3, #8]
 800716e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8007172:	edd3 6a00 	vldr	s13, [r3]
 8007176:	eee6 7a26 	vfma.f32	s15, s12, s13
 800717a:	f1aa 0204 	sub.w	r2, sl, #4
 800717e:	2a03      	cmp	r2, #3
 8007180:	ed94 6a03 	vldr	s12, [r4, #12]
 8007184:	edd3 6a03 	vldr	s13, [r3, #12]
 8007188:	ee77 7a27 	vadd.f32	s15, s14, s15
 800718c:	eee5 7a25 	vfma.f32	s15, s10, s11
 8007190:	eee6 7a26 	vfma.f32	s15, s12, s13
 8007194:	eeb0 7a67 	vmov.f32	s14, s15
 8007198:	d938      	bls.n	800720c <forward_lstm+0xac8>
 800719a:	edd3 6a05 	vldr	s13, [r3, #20]
 800719e:	edd4 7a05 	vldr	s15, [r4, #20]
 80071a2:	ed94 6a04 	vldr	s12, [r4, #16]
 80071a6:	ed94 5a06 	vldr	s10, [r4, #24]
 80071aa:	edd3 5a06 	vldr	s11, [r3, #24]
 80071ae:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80071b2:	edd3 6a04 	vldr	s13, [r3, #16]
 80071b6:	eee6 7a26 	vfma.f32	s15, s12, s13
 80071ba:	f1aa 0b08 	sub.w	fp, sl, #8
 80071be:	f1bb 0f03 	cmp.w	fp, #3
 80071c2:	ed94 6a07 	vldr	s12, [r4, #28]
 80071c6:	edd3 6a07 	vldr	s13, [r3, #28]
 80071ca:	eee5 7a25 	vfma.f32	s15, s10, s11
 80071ce:	eee6 7a26 	vfma.f32	s15, s12, s13
 80071d2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80071d6:	d919      	bls.n	800720c <forward_lstm+0xac8>
 80071d8:	edd4 6a09 	vldr	s13, [r4, #36]	@ 0x24
 80071dc:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 80071e0:	ed93 6a08 	vldr	s12, [r3, #32]
 80071e4:	ed93 5a0a 	vldr	s10, [r3, #40]	@ 0x28
 80071e8:	edd4 5a0a 	vldr	s11, [r4, #40]	@ 0x28
 80071ec:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80071f0:	edd4 6a08 	vldr	s13, [r4, #32]
 80071f4:	eee6 7a26 	vfma.f32	s15, s12, s13
 80071f8:	ed93 6a0b 	vldr	s12, [r3, #44]	@ 0x2c
 80071fc:	edd4 6a0b 	vldr	s13, [r4, #44]	@ 0x2c
 8007200:	eee5 7a25 	vfma.f32	s15, s10, s11
 8007204:	eee6 7a26 	vfma.f32	s15, s12, s13
 8007208:	ee37 7a27 	vadd.f32	s14, s14, s15
 800720c:	0892      	lsrs	r2, r2, #2
 800720e:	3201      	adds	r2, #1
 8007210:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 8007214:	b1a9      	cbz	r1, 8007242 <forward_lstm+0xafe>
 8007216:	edd8 6a00 	vldr	s13, [r8]
 800721a:	edd3 7a00 	vldr	s15, [r3]
 800721e:	1e4a      	subs	r2, r1, #1
 8007220:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007224:	d00d      	beq.n	8007242 <forward_lstm+0xafe>
 8007226:	edd8 6a01 	vldr	s13, [r8, #4]
 800722a:	edd3 7a01 	vldr	s15, [r3, #4]
 800722e:	2a01      	cmp	r2, #1
 8007230:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007234:	d005      	beq.n	8007242 <forward_lstm+0xafe>
 8007236:	edd3 6a02 	vldr	s13, [r3, #8]
 800723a:	edd8 7a02 	vldr	s15, [r8, #8]
 800723e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007242:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007246:	ed83 7a00 	vstr	s14, [r3]
 800724a:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800724e:	eddf 6a6d 	vldr	s13, [pc, #436]	@ 8007404 <forward_lstm+0xcc0>
 8007252:	2b00      	cmp	r3, #0
 8007254:	f000 865b 	beq.w	8007f0e <forward_lstm+0x17ca>
 8007258:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800725c:	f8d7 20f8 	ldr.w	r2, [r7, #248]	@ 0xf8
 8007260:	f8d7 011c 	ldr.w	r0, [r7, #284]	@ 0x11c
 8007264:	3340      	adds	r3, #64	@ 0x40
 8007266:	3240      	adds	r2, #64	@ 0x40
 8007268:	ed53 7a0f 	vldr	s15, [r3, #-60]	@ 0xffffffc4
 800726c:	ed12 5a0f 	vldr	s10, [r2, #-60]	@ 0xffffffc4
 8007270:	ed53 5a10 	vldr	s11, [r3, #-64]	@ 0xffffffc0
 8007274:	ed12 6a10 	vldr	s12, [r2, #-64]	@ 0xffffffc0
 8007278:	ed13 4a0d 	vldr	s8, [r3, #-52]	@ 0xffffffcc
 800727c:	ed53 4a0c 	vldr	s9, [r3, #-48]	@ 0xffffffd0
 8007280:	ed53 2a0a 	vldr	s5, [r3, #-40]	@ 0xffffffd8
 8007284:	ed12 3a0a 	vldr	s6, [r2, #-40]	@ 0xffffffd8
 8007288:	ed53 3a09 	vldr	s7, [r3, #-36]	@ 0xffffffdc
 800728c:	ed53 0a06 	vldr	s1, [r3, #-24]	@ 0xffffffe8
 8007290:	ed12 1a06 	vldr	s2, [r2, #-24]	@ 0xffffffe8
 8007294:	ed53 1a05 	vldr	s3, [r3, #-20]	@ 0xffffffec
 8007298:	ed12 2a05 	vldr	s4, [r2, #-20]	@ 0xffffffec
 800729c:	ee67 7a85 	vmul.f32	s15, s15, s10
 80072a0:	ed13 5a0e 	vldr	s10, [r3, #-56]	@ 0xffffffc8
 80072a4:	eee5 7a86 	vfma.f32	s15, s11, s12
 80072a8:	3340      	adds	r3, #64	@ 0x40
 80072aa:	3240      	adds	r2, #64	@ 0x40
 80072ac:	ed52 5a1e 	vldr	s11, [r2, #-120]	@ 0xffffff88
 80072b0:	ed12 6a1d 	vldr	s12, [r2, #-116]	@ 0xffffff8c
 80072b4:	eee5 7a25 	vfma.f32	s15, s10, s11
 80072b8:	ed12 5a1c 	vldr	s10, [r2, #-112]	@ 0xffffff90
 80072bc:	ed53 5a1b 	vldr	s11, [r3, #-108]	@ 0xffffff94
 80072c0:	eee4 7a06 	vfma.f32	s15, s8, s12
 80072c4:	ed12 6a1b 	vldr	s12, [r2, #-108]	@ 0xffffff94
 80072c8:	ed12 4a19 	vldr	s8, [r2, #-100]	@ 0xffffff9c
 80072cc:	eee4 7a85 	vfma.f32	s15, s9, s10
 80072d0:	ed53 4a18 	vldr	s9, [r3, #-96]	@ 0xffffffa0
 80072d4:	ed12 5a18 	vldr	s10, [r2, #-96]	@ 0xffffffa0
 80072d8:	eee5 7a86 	vfma.f32	s15, s11, s12
 80072dc:	ed53 5a17 	vldr	s11, [r3, #-92]	@ 0xffffffa4
 80072e0:	ed12 6a17 	vldr	s12, [r2, #-92]	@ 0xffffffa4
 80072e4:	eee2 7a83 	vfma.f32	s15, s5, s6
 80072e8:	ed53 2a14 	vldr	s5, [r3, #-80]	@ 0xffffffb0
 80072ec:	ed12 3a14 	vldr	s6, [r2, #-80]	@ 0xffffffb0
 80072f0:	eee3 7a84 	vfma.f32	s15, s7, s8
 80072f4:	ed53 3a13 	vldr	s7, [r3, #-76]	@ 0xffffffb4
 80072f8:	ed12 4a13 	vldr	s8, [r2, #-76]	@ 0xffffffb4
 80072fc:	eee4 7a85 	vfma.f32	s15, s9, s10
 8007300:	ed53 4a12 	vldr	s9, [r3, #-72]	@ 0xffffffb8
 8007304:	ed12 5a12 	vldr	s10, [r2, #-72]	@ 0xffffffb8
 8007308:	eee5 7a86 	vfma.f32	s15, s11, s12
 800730c:	ed53 5a11 	vldr	s11, [r3, #-68]	@ 0xffffffbc
 8007310:	ed12 6a11 	vldr	s12, [r2, #-68]	@ 0xffffffbc
 8007314:	eee0 7a81 	vfma.f32	s15, s1, s2
 8007318:	4298      	cmp	r0, r3
 800731a:	eee1 7a82 	vfma.f32	s15, s3, s4
 800731e:	eee2 7a83 	vfma.f32	s15, s5, s6
 8007322:	eee3 7a84 	vfma.f32	s15, s7, s8
 8007326:	eee4 7a85 	vfma.f32	s15, s9, s10
 800732a:	eee5 7a86 	vfma.f32	s15, s11, s12
 800732e:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8007332:	d199      	bne.n	8007268 <forward_lstm+0xb24>
 8007334:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007338:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800733c:	f8c7 011c 	str.w	r0, [r7, #284]	@ 0x11c
 8007340:	4413      	add	r3, r2
 8007342:	f1b9 0f03 	cmp.w	r9, #3
 8007346:	d95f      	bls.n	8007408 <forward_lstm+0xcc4>
 8007348:	ed93 6a01 	vldr	s12, [r3, #4]
 800734c:	edd5 7a01 	vldr	s15, [r5, #4]
 8007350:	edd5 5a00 	vldr	s11, [r5]
 8007354:	edd5 4a02 	vldr	s9, [r5, #8]
 8007358:	ed93 5a02 	vldr	s10, [r3, #8]
 800735c:	ee67 7a86 	vmul.f32	s15, s15, s12
 8007360:	ed93 6a00 	vldr	s12, [r3]
 8007364:	eee5 7a86 	vfma.f32	s15, s11, s12
 8007368:	f1a9 0204 	sub.w	r2, r9, #4
 800736c:	2a03      	cmp	r2, #3
 800736e:	edd5 5a03 	vldr	s11, [r5, #12]
 8007372:	ed93 6a03 	vldr	s12, [r3, #12]
 8007376:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800737a:	eee4 7a85 	vfma.f32	s15, s9, s10
 800737e:	eee5 7a86 	vfma.f32	s15, s11, s12
 8007382:	eef0 6a67 	vmov.f32	s13, s15
 8007386:	d938      	bls.n	80073fa <forward_lstm+0xcb6>
 8007388:	ed93 6a05 	vldr	s12, [r3, #20]
 800738c:	edd5 7a05 	vldr	s15, [r5, #20]
 8007390:	edd5 5a04 	vldr	s11, [r5, #16]
 8007394:	edd5 4a06 	vldr	s9, [r5, #24]
 8007398:	ed93 5a06 	vldr	s10, [r3, #24]
 800739c:	ee67 7a86 	vmul.f32	s15, s15, s12
 80073a0:	ed93 6a04 	vldr	s12, [r3, #16]
 80073a4:	eee5 7a86 	vfma.f32	s15, s11, s12
 80073a8:	f1a9 0b08 	sub.w	fp, r9, #8
 80073ac:	f1bb 0f03 	cmp.w	fp, #3
 80073b0:	edd5 5a07 	vldr	s11, [r5, #28]
 80073b4:	ed93 6a07 	vldr	s12, [r3, #28]
 80073b8:	eee4 7a85 	vfma.f32	s15, s9, s10
 80073bc:	eee5 7a86 	vfma.f32	s15, s11, s12
 80073c0:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80073c4:	d919      	bls.n	80073fa <forward_lstm+0xcb6>
 80073c6:	ed95 6a09 	vldr	s12, [r5, #36]	@ 0x24
 80073ca:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 80073ce:	edd3 5a08 	vldr	s11, [r3, #32]
 80073d2:	edd3 4a0a 	vldr	s9, [r3, #40]	@ 0x28
 80073d6:	ed95 5a0a 	vldr	s10, [r5, #40]	@ 0x28
 80073da:	ee67 7a86 	vmul.f32	s15, s15, s12
 80073de:	ed95 6a08 	vldr	s12, [r5, #32]
 80073e2:	eee5 7a86 	vfma.f32	s15, s11, s12
 80073e6:	edd3 5a0b 	vldr	s11, [r3, #44]	@ 0x2c
 80073ea:	ed95 6a0b 	vldr	s12, [r5, #44]	@ 0x2c
 80073ee:	eee4 7a85 	vfma.f32	s15, s9, s10
 80073f2:	eee5 7a86 	vfma.f32	s15, s11, s12
 80073f6:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80073fa:	0892      	lsrs	r2, r2, #2
 80073fc:	3201      	adds	r2, #1
 80073fe:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 8007402:	e001      	b.n	8007408 <forward_lstm+0xcc4>
 8007404:	00000000 	.word	0x00000000
 8007408:	f1be 0f00 	cmp.w	lr, #0
 800740c:	d016      	beq.n	800743c <forward_lstm+0xcf8>
 800740e:	ed96 6a00 	vldr	s12, [r6]
 8007412:	edd3 7a00 	vldr	s15, [r3]
 8007416:	f1be 0201 	subs.w	r2, lr, #1
 800741a:	eee6 6a27 	vfma.f32	s13, s12, s15
 800741e:	d00d      	beq.n	800743c <forward_lstm+0xcf8>
 8007420:	ed96 6a01 	vldr	s12, [r6, #4]
 8007424:	edd3 7a01 	vldr	s15, [r3, #4]
 8007428:	2a01      	cmp	r2, #1
 800742a:	eee6 6a27 	vfma.f32	s13, s12, s15
 800742e:	d005      	beq.n	800743c <forward_lstm+0xcf8>
 8007430:	ed93 6a02 	vldr	s12, [r3, #8]
 8007434:	edd6 7a02 	vldr	s15, [r6, #8]
 8007438:	eee6 6a27 	vfma.f32	s13, s12, s15
 800743c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007440:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8007444:	3304      	adds	r3, #4
 8007446:	ee76 6a87 	vadd.f32	s13, s13, s14
 800744a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800744e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007452:	edc3 6a00 	vstr	s13, [r3]
 8007456:	ed92 7a00 	vldr	s14, [r2]
 800745a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800745e:	ecb2 6a01 	vldmia	r2!, {s12}
 8007462:	f8c7 20c8 	str.w	r2, [r7, #200]	@ 0xc8
 8007466:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 800746a:	ecf2 7a01 	vldmia	r2!, {s15}
 800746e:	eee6 7a07 	vfma.f32	s15, s12, s14
 8007472:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 8007476:	ed1f 7a1d 	vldr	s14, [pc, #-116]	@ 8007404 <forward_lstm+0xcc0>
 800747a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800747e:	ece3 7a01 	vstmia	r3!, {s15}
 8007482:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8007486:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800748a:	ed83 8a00 	vstr	s16, [r3]
 800748e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007492:	2b00      	cmp	r3, #0
 8007494:	f000 8537 	beq.w	8007f06 <forward_lstm+0x17c2>
 8007498:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800749c:	f8d7 b0e8 	ldr.w	fp, [r7, #232]	@ 0xe8
 80074a0:	f8d7 011c 	ldr.w	r0, [r7, #284]	@ 0x11c
 80074a4:	f103 0240 	add.w	r2, r3, #64	@ 0x40
 80074a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80074ac:	3340      	adds	r3, #64	@ 0x40
 80074ae:	ed53 5a0f 	vldr	s11, [r3, #-60]	@ 0xffffffc4
 80074b2:	ed52 7a0f 	vldr	s15, [r2, #-60]	@ 0xffffffc4
 80074b6:	ed12 6a10 	vldr	s12, [r2, #-64]	@ 0xffffffc0
 80074ba:	ed53 6a10 	vldr	s13, [r3, #-64]	@ 0xffffffc0
 80074be:	ed52 4a0d 	vldr	s9, [r2, #-52]	@ 0xffffffcc
 80074c2:	ed12 5a0c 	vldr	s10, [r2, #-48]	@ 0xffffffd0
 80074c6:	ed12 3a0a 	vldr	s6, [r2, #-40]	@ 0xffffffd8
 80074ca:	ed53 3a0a 	vldr	s7, [r3, #-40]	@ 0xffffffd8
 80074ce:	ed12 4a09 	vldr	s8, [r2, #-36]	@ 0xffffffdc
 80074d2:	ed12 1a06 	vldr	s2, [r2, #-24]	@ 0xffffffe8
 80074d6:	ed53 1a06 	vldr	s3, [r3, #-24]	@ 0xffffffe8
 80074da:	ed12 2a05 	vldr	s4, [r2, #-20]	@ 0xffffffec
 80074de:	ed53 2a05 	vldr	s5, [r3, #-20]	@ 0xffffffec
 80074e2:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80074e6:	ed52 5a0e 	vldr	s11, [r2, #-56]	@ 0xffffffc8
 80074ea:	eee6 7a26 	vfma.f32	s15, s12, s13
 80074ee:	f1ab 0b10 	sub.w	fp, fp, #16
 80074f2:	f1bb 0f0f 	cmp.w	fp, #15
 80074f6:	ed13 6a0e 	vldr	s12, [r3, #-56]	@ 0xffffffc8
 80074fa:	ed53 6a0d 	vldr	s13, [r3, #-52]	@ 0xffffffcc
 80074fe:	eee5 7a86 	vfma.f32	s15, s11, s12
 8007502:	f102 0240 	add.w	r2, r2, #64	@ 0x40
 8007506:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 800750a:	ed53 5a1c 	vldr	s11, [r3, #-112]	@ 0xffffff90
 800750e:	ed12 6a1b 	vldr	s12, [r2, #-108]	@ 0xffffff94
 8007512:	eee4 7aa6 	vfma.f32	s15, s9, s13
 8007516:	ed53 6a1b 	vldr	s13, [r3, #-108]	@ 0xffffff94
 800751a:	ed53 4a19 	vldr	s9, [r3, #-100]	@ 0xffffff9c
 800751e:	eee5 7a25 	vfma.f32	s15, s10, s11
 8007522:	ed12 5a18 	vldr	s10, [r2, #-96]	@ 0xffffffa0
 8007526:	ed53 5a18 	vldr	s11, [r3, #-96]	@ 0xffffffa0
 800752a:	eee6 7a26 	vfma.f32	s15, s12, s13
 800752e:	ed12 6a17 	vldr	s12, [r2, #-92]	@ 0xffffffa4
 8007532:	ed53 6a17 	vldr	s13, [r3, #-92]	@ 0xffffffa4
 8007536:	eee3 7a23 	vfma.f32	s15, s6, s7
 800753a:	ed12 3a14 	vldr	s6, [r2, #-80]	@ 0xffffffb0
 800753e:	ed53 3a14 	vldr	s7, [r3, #-80]	@ 0xffffffb0
 8007542:	eee4 7a24 	vfma.f32	s15, s8, s9
 8007546:	ed12 4a13 	vldr	s8, [r2, #-76]	@ 0xffffffb4
 800754a:	ed53 4a13 	vldr	s9, [r3, #-76]	@ 0xffffffb4
 800754e:	eee5 7a25 	vfma.f32	s15, s10, s11
 8007552:	ed12 5a12 	vldr	s10, [r2, #-72]	@ 0xffffffb8
 8007556:	ed53 5a12 	vldr	s11, [r3, #-72]	@ 0xffffffb8
 800755a:	eee6 7a26 	vfma.f32	s15, s12, s13
 800755e:	ed12 6a11 	vldr	s12, [r2, #-68]	@ 0xffffffbc
 8007562:	ed53 6a11 	vldr	s13, [r3, #-68]	@ 0xffffffbc
 8007566:	eee1 7a21 	vfma.f32	s15, s2, s3
 800756a:	eee2 7a22 	vfma.f32	s15, s4, s5
 800756e:	eee3 7a23 	vfma.f32	s15, s6, s7
 8007572:	eee4 7a24 	vfma.f32	s15, s8, s9
 8007576:	eee5 7a25 	vfma.f32	s15, s10, s11
 800757a:	eee6 7a26 	vfma.f32	s15, s12, s13
 800757e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007582:	d894      	bhi.n	80074ae <forward_lstm+0xd6a>
 8007584:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007588:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800758c:	f8c7 011c 	str.w	r0, [r7, #284]	@ 0x11c
 8007590:	4413      	add	r3, r2
 8007592:	f1ba 0f03 	cmp.w	sl, #3
 8007596:	d95c      	bls.n	8007652 <forward_lstm+0xf0e>
 8007598:	edd3 6a01 	vldr	s13, [r3, #4]
 800759c:	edd4 7a01 	vldr	s15, [r4, #4]
 80075a0:	ed94 6a00 	vldr	s12, [r4]
 80075a4:	ed94 5a02 	vldr	s10, [r4, #8]
 80075a8:	edd3 5a02 	vldr	s11, [r3, #8]
 80075ac:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80075b0:	edd3 6a00 	vldr	s13, [r3]
 80075b4:	eee6 7a26 	vfma.f32	s15, s12, s13
 80075b8:	f1aa 0204 	sub.w	r2, sl, #4
 80075bc:	2a03      	cmp	r2, #3
 80075be:	ed94 6a03 	vldr	s12, [r4, #12]
 80075c2:	edd3 6a03 	vldr	s13, [r3, #12]
 80075c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80075ca:	eee5 7a25 	vfma.f32	s15, s10, s11
 80075ce:	eee6 7a26 	vfma.f32	s15, s12, s13
 80075d2:	eeb0 7a67 	vmov.f32	s14, s15
 80075d6:	d938      	bls.n	800764a <forward_lstm+0xf06>
 80075d8:	edd3 6a05 	vldr	s13, [r3, #20]
 80075dc:	edd4 7a05 	vldr	s15, [r4, #20]
 80075e0:	ed94 6a04 	vldr	s12, [r4, #16]
 80075e4:	ed94 5a06 	vldr	s10, [r4, #24]
 80075e8:	edd3 5a06 	vldr	s11, [r3, #24]
 80075ec:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80075f0:	edd3 6a04 	vldr	s13, [r3, #16]
 80075f4:	eee6 7a26 	vfma.f32	s15, s12, s13
 80075f8:	f1aa 0b08 	sub.w	fp, sl, #8
 80075fc:	f1bb 0f03 	cmp.w	fp, #3
 8007600:	ed94 6a07 	vldr	s12, [r4, #28]
 8007604:	edd3 6a07 	vldr	s13, [r3, #28]
 8007608:	eee5 7a25 	vfma.f32	s15, s10, s11
 800760c:	eee6 7a26 	vfma.f32	s15, s12, s13
 8007610:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007614:	d919      	bls.n	800764a <forward_lstm+0xf06>
 8007616:	edd4 6a09 	vldr	s13, [r4, #36]	@ 0x24
 800761a:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800761e:	ed93 6a08 	vldr	s12, [r3, #32]
 8007622:	ed93 5a0a 	vldr	s10, [r3, #40]	@ 0x28
 8007626:	edd4 5a0a 	vldr	s11, [r4, #40]	@ 0x28
 800762a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800762e:	edd4 6a08 	vldr	s13, [r4, #32]
 8007632:	eee6 7a26 	vfma.f32	s15, s12, s13
 8007636:	ed93 6a0b 	vldr	s12, [r3, #44]	@ 0x2c
 800763a:	edd4 6a0b 	vldr	s13, [r4, #44]	@ 0x2c
 800763e:	eee5 7a25 	vfma.f32	s15, s10, s11
 8007642:	eee6 7a26 	vfma.f32	s15, s12, s13
 8007646:	ee37 7a27 	vadd.f32	s14, s14, s15
 800764a:	0892      	lsrs	r2, r2, #2
 800764c:	3201      	adds	r2, #1
 800764e:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 8007652:	b1a9      	cbz	r1, 8007680 <forward_lstm+0xf3c>
 8007654:	edd8 6a00 	vldr	s13, [r8]
 8007658:	edd3 7a00 	vldr	s15, [r3]
 800765c:	1e4a      	subs	r2, r1, #1
 800765e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007662:	d00d      	beq.n	8007680 <forward_lstm+0xf3c>
 8007664:	edd8 6a01 	vldr	s13, [r8, #4]
 8007668:	edd3 7a01 	vldr	s15, [r3, #4]
 800766c:	2a01      	cmp	r2, #1
 800766e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007672:	d005      	beq.n	8007680 <forward_lstm+0xf3c>
 8007674:	edd3 6a02 	vldr	s13, [r3, #8]
 8007678:	edd8 7a02 	vldr	s15, [r8, #8]
 800767c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007680:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8007684:	ed83 7a00 	vstr	s14, [r3]
 8007688:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800768c:	ed5f 6aa3 	vldr	s13, [pc, #-652]	@ 8007404 <forward_lstm+0xcc0>
 8007690:	2b00      	cmp	r3, #0
 8007692:	f000 8435 	beq.w	8007f00 <forward_lstm+0x17bc>
 8007696:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800769a:	f8d7 20f0 	ldr.w	r2, [r7, #240]	@ 0xf0
 800769e:	f8d7 011c 	ldr.w	r0, [r7, #284]	@ 0x11c
 80076a2:	3340      	adds	r3, #64	@ 0x40
 80076a4:	3240      	adds	r2, #64	@ 0x40
 80076a6:	ed53 7a0f 	vldr	s15, [r3, #-60]	@ 0xffffffc4
 80076aa:	ed12 5a0f 	vldr	s10, [r2, #-60]	@ 0xffffffc4
 80076ae:	ed53 5a10 	vldr	s11, [r3, #-64]	@ 0xffffffc0
 80076b2:	ed12 6a10 	vldr	s12, [r2, #-64]	@ 0xffffffc0
 80076b6:	ed13 4a0d 	vldr	s8, [r3, #-52]	@ 0xffffffcc
 80076ba:	ed53 4a0c 	vldr	s9, [r3, #-48]	@ 0xffffffd0
 80076be:	ed53 2a0a 	vldr	s5, [r3, #-40]	@ 0xffffffd8
 80076c2:	ed12 3a0a 	vldr	s6, [r2, #-40]	@ 0xffffffd8
 80076c6:	ed53 3a09 	vldr	s7, [r3, #-36]	@ 0xffffffdc
 80076ca:	ed53 0a06 	vldr	s1, [r3, #-24]	@ 0xffffffe8
 80076ce:	ed12 1a06 	vldr	s2, [r2, #-24]	@ 0xffffffe8
 80076d2:	ed53 1a05 	vldr	s3, [r3, #-20]	@ 0xffffffec
 80076d6:	ed12 2a05 	vldr	s4, [r2, #-20]	@ 0xffffffec
 80076da:	ee67 7a85 	vmul.f32	s15, s15, s10
 80076de:	ed13 5a0e 	vldr	s10, [r3, #-56]	@ 0xffffffc8
 80076e2:	eee5 7a86 	vfma.f32	s15, s11, s12
 80076e6:	3340      	adds	r3, #64	@ 0x40
 80076e8:	3240      	adds	r2, #64	@ 0x40
 80076ea:	ed52 5a1e 	vldr	s11, [r2, #-120]	@ 0xffffff88
 80076ee:	ed12 6a1d 	vldr	s12, [r2, #-116]	@ 0xffffff8c
 80076f2:	eee5 7a25 	vfma.f32	s15, s10, s11
 80076f6:	ed12 5a1c 	vldr	s10, [r2, #-112]	@ 0xffffff90
 80076fa:	ed53 5a1b 	vldr	s11, [r3, #-108]	@ 0xffffff94
 80076fe:	eee4 7a06 	vfma.f32	s15, s8, s12
 8007702:	ed12 6a1b 	vldr	s12, [r2, #-108]	@ 0xffffff94
 8007706:	ed12 4a19 	vldr	s8, [r2, #-100]	@ 0xffffff9c
 800770a:	eee4 7a85 	vfma.f32	s15, s9, s10
 800770e:	ed53 4a18 	vldr	s9, [r3, #-96]	@ 0xffffffa0
 8007712:	ed12 5a18 	vldr	s10, [r2, #-96]	@ 0xffffffa0
 8007716:	eee5 7a86 	vfma.f32	s15, s11, s12
 800771a:	ed53 5a17 	vldr	s11, [r3, #-92]	@ 0xffffffa4
 800771e:	ed12 6a17 	vldr	s12, [r2, #-92]	@ 0xffffffa4
 8007722:	eee2 7a83 	vfma.f32	s15, s5, s6
 8007726:	ed53 2a14 	vldr	s5, [r3, #-80]	@ 0xffffffb0
 800772a:	ed12 3a14 	vldr	s6, [r2, #-80]	@ 0xffffffb0
 800772e:	eee3 7a84 	vfma.f32	s15, s7, s8
 8007732:	ed53 3a13 	vldr	s7, [r3, #-76]	@ 0xffffffb4
 8007736:	ed12 4a13 	vldr	s8, [r2, #-76]	@ 0xffffffb4
 800773a:	eee4 7a85 	vfma.f32	s15, s9, s10
 800773e:	ed53 4a12 	vldr	s9, [r3, #-72]	@ 0xffffffb8
 8007742:	ed12 5a12 	vldr	s10, [r2, #-72]	@ 0xffffffb8
 8007746:	eee5 7a86 	vfma.f32	s15, s11, s12
 800774a:	ed53 5a11 	vldr	s11, [r3, #-68]	@ 0xffffffbc
 800774e:	ed12 6a11 	vldr	s12, [r2, #-68]	@ 0xffffffbc
 8007752:	eee0 7a81 	vfma.f32	s15, s1, s2
 8007756:	4298      	cmp	r0, r3
 8007758:	eee1 7a82 	vfma.f32	s15, s3, s4
 800775c:	eee2 7a83 	vfma.f32	s15, s5, s6
 8007760:	eee3 7a84 	vfma.f32	s15, s7, s8
 8007764:	eee4 7a85 	vfma.f32	s15, s9, s10
 8007768:	eee5 7a86 	vfma.f32	s15, s11, s12
 800776c:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8007770:	d199      	bne.n	80076a6 <forward_lstm+0xf62>
 8007772:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8007776:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800777a:	f8c7 011c 	str.w	r0, [r7, #284]	@ 0x11c
 800777e:	4413      	add	r3, r2
 8007780:	f1b9 0f03 	cmp.w	r9, #3
 8007784:	d95c      	bls.n	8007840 <forward_lstm+0x10fc>
 8007786:	ed93 6a01 	vldr	s12, [r3, #4]
 800778a:	edd5 7a01 	vldr	s15, [r5, #4]
 800778e:	edd5 5a00 	vldr	s11, [r5]
 8007792:	edd5 4a02 	vldr	s9, [r5, #8]
 8007796:	ed93 5a02 	vldr	s10, [r3, #8]
 800779a:	ee67 7a86 	vmul.f32	s15, s15, s12
 800779e:	ed93 6a00 	vldr	s12, [r3]
 80077a2:	eee5 7a86 	vfma.f32	s15, s11, s12
 80077a6:	f1a9 0204 	sub.w	r2, r9, #4
 80077aa:	2a03      	cmp	r2, #3
 80077ac:	edd5 5a03 	vldr	s11, [r5, #12]
 80077b0:	ed93 6a03 	vldr	s12, [r3, #12]
 80077b4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80077b8:	eee4 7a85 	vfma.f32	s15, s9, s10
 80077bc:	eee5 7a86 	vfma.f32	s15, s11, s12
 80077c0:	eef0 6a67 	vmov.f32	s13, s15
 80077c4:	d938      	bls.n	8007838 <forward_lstm+0x10f4>
 80077c6:	ed93 6a05 	vldr	s12, [r3, #20]
 80077ca:	edd5 7a05 	vldr	s15, [r5, #20]
 80077ce:	edd5 5a04 	vldr	s11, [r5, #16]
 80077d2:	edd5 4a06 	vldr	s9, [r5, #24]
 80077d6:	ed93 5a06 	vldr	s10, [r3, #24]
 80077da:	ee67 7a86 	vmul.f32	s15, s15, s12
 80077de:	ed93 6a04 	vldr	s12, [r3, #16]
 80077e2:	eee5 7a86 	vfma.f32	s15, s11, s12
 80077e6:	f1a9 0b08 	sub.w	fp, r9, #8
 80077ea:	f1bb 0f03 	cmp.w	fp, #3
 80077ee:	edd5 5a07 	vldr	s11, [r5, #28]
 80077f2:	ed93 6a07 	vldr	s12, [r3, #28]
 80077f6:	eee4 7a85 	vfma.f32	s15, s9, s10
 80077fa:	eee5 7a86 	vfma.f32	s15, s11, s12
 80077fe:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8007802:	d919      	bls.n	8007838 <forward_lstm+0x10f4>
 8007804:	ed95 6a09 	vldr	s12, [r5, #36]	@ 0x24
 8007808:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800780c:	edd3 5a08 	vldr	s11, [r3, #32]
 8007810:	edd3 4a0a 	vldr	s9, [r3, #40]	@ 0x28
 8007814:	ed95 5a0a 	vldr	s10, [r5, #40]	@ 0x28
 8007818:	ee67 7a86 	vmul.f32	s15, s15, s12
 800781c:	ed95 6a08 	vldr	s12, [r5, #32]
 8007820:	eee5 7a86 	vfma.f32	s15, s11, s12
 8007824:	edd3 5a0b 	vldr	s11, [r3, #44]	@ 0x2c
 8007828:	ed95 6a0b 	vldr	s12, [r5, #44]	@ 0x2c
 800782c:	eee4 7a85 	vfma.f32	s15, s9, s10
 8007830:	eee5 7a86 	vfma.f32	s15, s11, s12
 8007834:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8007838:	0892      	lsrs	r2, r2, #2
 800783a:	3201      	adds	r2, #1
 800783c:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 8007840:	f1be 0f00 	cmp.w	lr, #0
 8007844:	d016      	beq.n	8007874 <forward_lstm+0x1130>
 8007846:	ed96 6a00 	vldr	s12, [r6]
 800784a:	edd3 7a00 	vldr	s15, [r3]
 800784e:	f1be 0201 	subs.w	r2, lr, #1
 8007852:	eee6 6a27 	vfma.f32	s13, s12, s15
 8007856:	d00d      	beq.n	8007874 <forward_lstm+0x1130>
 8007858:	ed96 6a01 	vldr	s12, [r6, #4]
 800785c:	edd3 7a01 	vldr	s15, [r3, #4]
 8007860:	2a01      	cmp	r2, #1
 8007862:	eee6 6a27 	vfma.f32	s13, s12, s15
 8007866:	d005      	beq.n	8007874 <forward_lstm+0x1130>
 8007868:	ed93 6a02 	vldr	s12, [r3, #8]
 800786c:	edd6 7a02 	vldr	s15, [r6, #8]
 8007870:	eee6 6a27 	vfma.f32	s13, s12, s15
 8007874:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8007878:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 800787c:	f8d7 0100 	ldr.w	r0, [r7, #256]	@ 0x100
 8007880:	441a      	add	r2, r3
 8007882:	ee37 7a26 	vadd.f32	s14, s14, s13
 8007886:	f8c7 2104 	str.w	r2, [r7, #260]	@ 0x104
 800788a:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 800788e:	ed82 7a00 	vstr	s14, [r2]
 8007892:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007896:	ecf2 7a01 	vldmia	r2!, {s15}
 800789a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800789e:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80078a2:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 80078a6:	eef4 7ae8 	vcmpe.f32	s15, s17
 80078aa:	4410      	add	r0, r2
 80078ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80078b0:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 80078b4:	f8c7 0100 	str.w	r0, [r7, #256]	@ 0x100
 80078b8:	f8d7 00fc 	ldr.w	r0, [r7, #252]	@ 0xfc
 80078bc:	bf88      	it	hi
 80078be:	eef0 7a68 	vmovhi.f32	s15, s17
 80078c2:	4418      	add	r0, r3
 80078c4:	ece2 7a01 	vstmia	r2!, {s15}
 80078c8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80078cc:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 80078d0:	f8d7 00f8 	ldr.w	r0, [r7, #248]	@ 0xf8
 80078d4:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 80078d8:	4410      	add	r0, r2
 80078da:	f8c7 00f8 	str.w	r0, [r7, #248]	@ 0xf8
 80078de:	f8d7 00f4 	ldr.w	r0, [r7, #244]	@ 0xf4
 80078e2:	4418      	add	r0, r3
 80078e4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80078e8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
 80078ec:	4413      	add	r3, r2
 80078ee:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80078f2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80078f6:	4563      	cmp	r3, ip
 80078f8:	f47f a97a 	bne.w	8006bf0 <forward_lstm+0x4ac>
 80078fc:	f8d7 b0b4 	ldr.w	fp, [r7, #180]	@ 0xb4
 8007900:	f8c7 1100 	str.w	r1, [r7, #256]	@ 0x100
 8007904:	f507 71c0 	add.w	r1, r7, #384	@ 0x180
 8007908:	4608      	mov	r0, r1
 800790a:	ee19 3a10 	vmov	r3, s18
 800790e:	f8c7 4114 	str.w	r4, [r7, #276]	@ 0x114
 8007912:	465a      	mov	r2, fp
 8007914:	f8d7 4080 	ldr.w	r4, [r7, #128]	@ 0x80
 8007918:	f8c7 e0fc 	str.w	lr, [r7, #252]	@ 0xfc
 800791c:	47a0      	blx	r4
 800791e:	f507 71ce 	add.w	r1, r7, #412	@ 0x19c
 8007922:	4608      	mov	r0, r1
 8007924:	ee19 3a10 	vmov	r3, s18
 8007928:	465a      	mov	r2, fp
 800792a:	47a0      	blx	r4
 800792c:	f507 71dc 	add.w	r1, r7, #440	@ 0x1b8
 8007930:	4608      	mov	r0, r1
 8007932:	ee1a 3a90 	vmov	r3, s21
 8007936:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 8007938:	465a      	mov	r2, fp
 800793a:	47a0      	blx	r4
 800793c:	f1aa 0304 	sub.w	r3, sl, #4
 8007940:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8007944:	089b      	lsrs	r3, r3, #2
 8007946:	3301      	adds	r3, #1
 8007948:	f1a9 0204 	sub.w	r2, r9, #4
 800794c:	011b      	lsls	r3, r3, #4
 800794e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007952:	0893      	lsrs	r3, r2, #2
 8007954:	3301      	adds	r3, #1
 8007956:	011b      	lsls	r3, r3, #4
 8007958:	f8c7 20f0 	str.w	r2, [r7, #240]	@ 0xf0
 800795c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8007960:	69ba      	ldr	r2, [r7, #24]
 8007962:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007964:	f8d7 4114 	ldr.w	r4, [r7, #276]	@ 0x114
 8007968:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 800796c:	f8c7 9114 	str.w	r9, [r7, #276]	@ 0x114
 8007970:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8007974:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 8007978:	f8d7 e0b0 	ldr.w	lr, [r7, #176]	@ 0xb0
 800797c:	f8d7 c030 	ldr.w	ip, [r7, #48]	@ 0x30
 8007980:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8007982:	f8d7 907c 	ldr.w	r9, [r7, #124]	@ 0x7c
 8007986:	f8c7 a104 	str.w	sl, [r7, #260]	@ 0x104
 800798a:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 800798e:	469a      	mov	sl, r3
 8007990:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8007994:	ed99 7a00 	vldr	s14, [r9]
 8007998:	ecf3 7a01 	vldmia	r3!, {s15}
 800799c:	ecfe 6a01 	vldmia	lr!, {s13}
 80079a0:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 80079a4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80079a8:	ecb3 6a01 	vldmia	r3!, {s12}
 80079ac:	ee67 7a86 	vmul.f32	s15, s15, s12
 80079b0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80079b4:	eee6 7a87 	vfma.f32	s15, s13, s14
 80079b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80079bc:	ed9f 7aeb 	vldr	s14, [pc, #940]	@ 8007d6c <forward_lstm+0x1628>
 80079c0:	ece9 7a01 	vstmia	r9!, {s15}
 80079c4:	eca1 8a01 	vstmia	r1!, {s16}
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	f000 8297 	beq.w	8007efc <forward_lstm+0x17b8>
 80079ce:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80079d2:	f8d7 b0e8 	ldr.w	fp, [r7, #232]	@ 0xe8
 80079d6:	f103 0240 	add.w	r2, r3, #64	@ 0x40
 80079da:	f100 0340 	add.w	r3, r0, #64	@ 0x40
 80079de:	ed53 5a0f 	vldr	s11, [r3, #-60]	@ 0xffffffc4
 80079e2:	ed52 7a0f 	vldr	s15, [r2, #-60]	@ 0xffffffc4
 80079e6:	ed12 6a10 	vldr	s12, [r2, #-64]	@ 0xffffffc0
 80079ea:	ed53 6a10 	vldr	s13, [r3, #-64]	@ 0xffffffc0
 80079ee:	ed52 4a0d 	vldr	s9, [r2, #-52]	@ 0xffffffcc
 80079f2:	ed12 5a0c 	vldr	s10, [r2, #-48]	@ 0xffffffd0
 80079f6:	ed12 3a0a 	vldr	s6, [r2, #-40]	@ 0xffffffd8
 80079fa:	ed53 3a0a 	vldr	s7, [r3, #-40]	@ 0xffffffd8
 80079fe:	ed12 4a09 	vldr	s8, [r2, #-36]	@ 0xffffffdc
 8007a02:	ed12 1a06 	vldr	s2, [r2, #-24]	@ 0xffffffe8
 8007a06:	ed53 1a06 	vldr	s3, [r3, #-24]	@ 0xffffffe8
 8007a0a:	ed12 2a05 	vldr	s4, [r2, #-20]	@ 0xffffffec
 8007a0e:	ed53 2a05 	vldr	s5, [r3, #-20]	@ 0xffffffec
 8007a12:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8007a16:	ed52 5a0e 	vldr	s11, [r2, #-56]	@ 0xffffffc8
 8007a1a:	eee6 7a26 	vfma.f32	s15, s12, s13
 8007a1e:	f1ab 0b10 	sub.w	fp, fp, #16
 8007a22:	f1bb 0f0f 	cmp.w	fp, #15
 8007a26:	ed13 6a0e 	vldr	s12, [r3, #-56]	@ 0xffffffc8
 8007a2a:	ed53 6a0d 	vldr	s13, [r3, #-52]	@ 0xffffffcc
 8007a2e:	eee5 7a86 	vfma.f32	s15, s11, s12
 8007a32:	f102 0240 	add.w	r2, r2, #64	@ 0x40
 8007a36:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 8007a3a:	ed53 5a1c 	vldr	s11, [r3, #-112]	@ 0xffffff90
 8007a3e:	ed12 6a1b 	vldr	s12, [r2, #-108]	@ 0xffffff94
 8007a42:	eee4 7aa6 	vfma.f32	s15, s9, s13
 8007a46:	ed53 6a1b 	vldr	s13, [r3, #-108]	@ 0xffffff94
 8007a4a:	ed53 4a19 	vldr	s9, [r3, #-100]	@ 0xffffff9c
 8007a4e:	eee5 7a25 	vfma.f32	s15, s10, s11
 8007a52:	ed12 5a18 	vldr	s10, [r2, #-96]	@ 0xffffffa0
 8007a56:	ed53 5a18 	vldr	s11, [r3, #-96]	@ 0xffffffa0
 8007a5a:	eee6 7a26 	vfma.f32	s15, s12, s13
 8007a5e:	ed12 6a17 	vldr	s12, [r2, #-92]	@ 0xffffffa4
 8007a62:	ed53 6a17 	vldr	s13, [r3, #-92]	@ 0xffffffa4
 8007a66:	eee3 7a23 	vfma.f32	s15, s6, s7
 8007a6a:	ed12 3a14 	vldr	s6, [r2, #-80]	@ 0xffffffb0
 8007a6e:	ed53 3a14 	vldr	s7, [r3, #-80]	@ 0xffffffb0
 8007a72:	eee4 7a24 	vfma.f32	s15, s8, s9
 8007a76:	ed12 4a13 	vldr	s8, [r2, #-76]	@ 0xffffffb4
 8007a7a:	ed53 4a13 	vldr	s9, [r3, #-76]	@ 0xffffffb4
 8007a7e:	eee5 7a25 	vfma.f32	s15, s10, s11
 8007a82:	ed12 5a12 	vldr	s10, [r2, #-72]	@ 0xffffffb8
 8007a86:	ed53 5a12 	vldr	s11, [r3, #-72]	@ 0xffffffb8
 8007a8a:	eee6 7a26 	vfma.f32	s15, s12, s13
 8007a8e:	ed12 6a11 	vldr	s12, [r2, #-68]	@ 0xffffffbc
 8007a92:	ed53 6a11 	vldr	s13, [r3, #-68]	@ 0xffffffbc
 8007a96:	eee1 7a21 	vfma.f32	s15, s2, s3
 8007a9a:	eee2 7a22 	vfma.f32	s15, s4, s5
 8007a9e:	eee3 7a23 	vfma.f32	s15, s6, s7
 8007aa2:	eee4 7a24 	vfma.f32	s15, s8, s9
 8007aa6:	eee5 7a25 	vfma.f32	s15, s10, s11
 8007aaa:	eee6 7a26 	vfma.f32	s15, s12, s13
 8007aae:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007ab2:	d894      	bhi.n	80079de <forward_lstm+0x129a>
 8007ab4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007ab8:	18c3      	adds	r3, r0, r3
 8007aba:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 8007abe:	2a03      	cmp	r2, #3
 8007ac0:	d95b      	bls.n	8007b7a <forward_lstm+0x1436>
 8007ac2:	edd3 6a01 	vldr	s13, [r3, #4]
 8007ac6:	edd4 7a01 	vldr	s15, [r4, #4]
 8007aca:	ed94 6a00 	vldr	s12, [r4]
 8007ace:	ed94 5a02 	vldr	s10, [r4, #8]
 8007ad2:	edd3 5a02 	vldr	s11, [r3, #8]
 8007ad6:	f8d7 20f8 	ldr.w	r2, [r7, #248]	@ 0xf8
 8007ada:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8007ade:	edd3 6a00 	vldr	s13, [r3]
 8007ae2:	eee6 7a26 	vfma.f32	s15, s12, s13
 8007ae6:	2a03      	cmp	r2, #3
 8007ae8:	ed94 6a03 	vldr	s12, [r4, #12]
 8007aec:	edd3 6a03 	vldr	s13, [r3, #12]
 8007af0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007af4:	eee5 7a25 	vfma.f32	s15, s10, s11
 8007af8:	eee6 7a26 	vfma.f32	s15, s12, s13
 8007afc:	eeb0 7a67 	vmov.f32	s14, s15
 8007b00:	d938      	bls.n	8007b74 <forward_lstm+0x1430>
 8007b02:	edd3 6a05 	vldr	s13, [r3, #20]
 8007b06:	edd4 7a05 	vldr	s15, [r4, #20]
 8007b0a:	ed94 6a04 	vldr	s12, [r4, #16]
 8007b0e:	ed94 5a06 	vldr	s10, [r4, #24]
 8007b12:	edd3 5a06 	vldr	s11, [r3, #24]
 8007b16:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 8007b1a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8007b1e:	edd3 6a04 	vldr	s13, [r3, #16]
 8007b22:	eee6 7a26 	vfma.f32	s15, s12, s13
 8007b26:	3a08      	subs	r2, #8
 8007b28:	2a03      	cmp	r2, #3
 8007b2a:	ed94 6a07 	vldr	s12, [r4, #28]
 8007b2e:	edd3 6a07 	vldr	s13, [r3, #28]
 8007b32:	eee5 7a25 	vfma.f32	s15, s10, s11
 8007b36:	eee6 7a26 	vfma.f32	s15, s12, s13
 8007b3a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007b3e:	d919      	bls.n	8007b74 <forward_lstm+0x1430>
 8007b40:	edd4 6a09 	vldr	s13, [r4, #36]	@ 0x24
 8007b44:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8007b48:	ed93 6a08 	vldr	s12, [r3, #32]
 8007b4c:	ed93 5a0a 	vldr	s10, [r3, #40]	@ 0x28
 8007b50:	edd4 5a0a 	vldr	s11, [r4, #40]	@ 0x28
 8007b54:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8007b58:	edd4 6a08 	vldr	s13, [r4, #32]
 8007b5c:	eee6 7a26 	vfma.f32	s15, s12, s13
 8007b60:	ed93 6a0b 	vldr	s12, [r3, #44]	@ 0x2c
 8007b64:	edd4 6a0b 	vldr	s13, [r4, #44]	@ 0x2c
 8007b68:	eee5 7a25 	vfma.f32	s15, s10, s11
 8007b6c:	eee6 7a26 	vfma.f32	s15, s12, s13
 8007b70:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007b74:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 8007b78:	4413      	add	r3, r2
 8007b7a:	f8d7 2100 	ldr.w	r2, [r7, #256]	@ 0x100
 8007b7e:	b1aa      	cbz	r2, 8007bac <forward_lstm+0x1468>
 8007b80:	edd8 6a00 	vldr	s13, [r8]
 8007b84:	edd3 7a00 	vldr	s15, [r3]
 8007b88:	3a01      	subs	r2, #1
 8007b8a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007b8e:	d00d      	beq.n	8007bac <forward_lstm+0x1468>
 8007b90:	edd8 6a01 	vldr	s13, [r8, #4]
 8007b94:	edd3 7a01 	vldr	s15, [r3, #4]
 8007b98:	2a01      	cmp	r2, #1
 8007b9a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007b9e:	d005      	beq.n	8007bac <forward_lstm+0x1468>
 8007ba0:	edd3 6a02 	vldr	s13, [r3, #8]
 8007ba4:	edd8 7a02 	vldr	s15, [r8, #8]
 8007ba8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007bac:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8007bb0:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8007d6c <forward_lstm+0x1628>
 8007bb4:	ed01 7a01 	vstr	s14, [r1, #-4]
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	f000 819d 	beq.w	8007ef8 <forward_lstm+0x17b4>
 8007bbe:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8007bc2:	f8d7 b0b4 	ldr.w	fp, [r7, #180]	@ 0xb4
 8007bc6:	f103 0240 	add.w	r2, r3, #64	@ 0x40
 8007bca:	f10c 0340 	add.w	r3, ip, #64	@ 0x40
 8007bce:	ed13 5a0f 	vldr	s10, [r3, #-60]	@ 0xffffffc4
 8007bd2:	ed52 7a0f 	vldr	s15, [r2, #-60]	@ 0xffffffc4
 8007bd6:	ed52 5a10 	vldr	s11, [r2, #-64]	@ 0xffffffc0
 8007bda:	ed13 6a10 	vldr	s12, [r3, #-64]	@ 0xffffffc0
 8007bde:	ed12 4a0d 	vldr	s8, [r2, #-52]	@ 0xffffffcc
 8007be2:	ed52 4a0c 	vldr	s9, [r2, #-48]	@ 0xffffffd0
 8007be6:	ed52 2a0a 	vldr	s5, [r2, #-40]	@ 0xffffffd8
 8007bea:	ed13 3a0a 	vldr	s6, [r3, #-40]	@ 0xffffffd8
 8007bee:	ed52 3a09 	vldr	s7, [r2, #-36]	@ 0xffffffdc
 8007bf2:	ed52 0a06 	vldr	s1, [r2, #-24]	@ 0xffffffe8
 8007bf6:	ed13 1a06 	vldr	s2, [r3, #-24]	@ 0xffffffe8
 8007bfa:	ed52 1a05 	vldr	s3, [r2, #-20]	@ 0xffffffec
 8007bfe:	ed13 2a05 	vldr	s4, [r3, #-20]	@ 0xffffffec
 8007c02:	ee67 7a85 	vmul.f32	s15, s15, s10
 8007c06:	ed12 5a0e 	vldr	s10, [r2, #-56]	@ 0xffffffc8
 8007c0a:	eee5 7a86 	vfma.f32	s15, s11, s12
 8007c0e:	f1ab 0b10 	sub.w	fp, fp, #16
 8007c12:	f1bb 0f0f 	cmp.w	fp, #15
 8007c16:	ed53 5a0e 	vldr	s11, [r3, #-56]	@ 0xffffffc8
 8007c1a:	ed13 6a0d 	vldr	s12, [r3, #-52]	@ 0xffffffcc
 8007c1e:	eee5 7a25 	vfma.f32	s15, s10, s11
 8007c22:	f102 0240 	add.w	r2, r2, #64	@ 0x40
 8007c26:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 8007c2a:	ed13 5a1c 	vldr	s10, [r3, #-112]	@ 0xffffff90
 8007c2e:	ed52 5a1b 	vldr	s11, [r2, #-108]	@ 0xffffff94
 8007c32:	eee4 7a06 	vfma.f32	s15, s8, s12
 8007c36:	ed13 6a1b 	vldr	s12, [r3, #-108]	@ 0xffffff94
 8007c3a:	ed13 4a19 	vldr	s8, [r3, #-100]	@ 0xffffff9c
 8007c3e:	eee4 7a85 	vfma.f32	s15, s9, s10
 8007c42:	ed52 4a18 	vldr	s9, [r2, #-96]	@ 0xffffffa0
 8007c46:	ed13 5a18 	vldr	s10, [r3, #-96]	@ 0xffffffa0
 8007c4a:	eee5 7a86 	vfma.f32	s15, s11, s12
 8007c4e:	ed52 5a17 	vldr	s11, [r2, #-92]	@ 0xffffffa4
 8007c52:	ed13 6a17 	vldr	s12, [r3, #-92]	@ 0xffffffa4
 8007c56:	eee2 7a83 	vfma.f32	s15, s5, s6
 8007c5a:	ed52 2a14 	vldr	s5, [r2, #-80]	@ 0xffffffb0
 8007c5e:	ed13 3a14 	vldr	s6, [r3, #-80]	@ 0xffffffb0
 8007c62:	eee3 7a84 	vfma.f32	s15, s7, s8
 8007c66:	ed52 3a13 	vldr	s7, [r2, #-76]	@ 0xffffffb4
 8007c6a:	ed13 4a13 	vldr	s8, [r3, #-76]	@ 0xffffffb4
 8007c6e:	eee4 7a85 	vfma.f32	s15, s9, s10
 8007c72:	ed52 4a12 	vldr	s9, [r2, #-72]	@ 0xffffffb8
 8007c76:	ed13 5a12 	vldr	s10, [r3, #-72]	@ 0xffffffb8
 8007c7a:	eee5 7a86 	vfma.f32	s15, s11, s12
 8007c7e:	ed52 5a11 	vldr	s11, [r2, #-68]	@ 0xffffffbc
 8007c82:	ed13 6a11 	vldr	s12, [r3, #-68]	@ 0xffffffbc
 8007c86:	eee0 7a81 	vfma.f32	s15, s1, s2
 8007c8a:	eee1 7a82 	vfma.f32	s15, s3, s4
 8007c8e:	eee2 7a83 	vfma.f32	s15, s5, s6
 8007c92:	eee3 7a84 	vfma.f32	s15, s7, s8
 8007c96:	eee4 7a85 	vfma.f32	s15, s9, s10
 8007c9a:	eee5 7a86 	vfma.f32	s15, s11, s12
 8007c9e:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8007ca2:	d894      	bhi.n	8007bce <forward_lstm+0x148a>
 8007ca4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007ca8:	4463      	add	r3, ip
 8007caa:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8007cae:	2a03      	cmp	r2, #3
 8007cb0:	d95e      	bls.n	8007d70 <forward_lstm+0x162c>
 8007cb2:	ed93 6a01 	vldr	s12, [r3, #4]
 8007cb6:	edd5 7a01 	vldr	s15, [r5, #4]
 8007cba:	edd5 5a00 	vldr	s11, [r5]
 8007cbe:	edd5 4a02 	vldr	s9, [r5, #8]
 8007cc2:	ed93 5a02 	vldr	s10, [r3, #8]
 8007cc6:	f8d7 20f0 	ldr.w	r2, [r7, #240]	@ 0xf0
 8007cca:	ee67 7a86 	vmul.f32	s15, s15, s12
 8007cce:	ed93 6a00 	vldr	s12, [r3]
 8007cd2:	eee5 7a86 	vfma.f32	s15, s11, s12
 8007cd6:	2a03      	cmp	r2, #3
 8007cd8:	edd5 5a03 	vldr	s11, [r5, #12]
 8007cdc:	ed93 6a03 	vldr	s12, [r3, #12]
 8007ce0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007ce4:	eee4 7a85 	vfma.f32	s15, s9, s10
 8007ce8:	eee5 7a86 	vfma.f32	s15, s11, s12
 8007cec:	eef0 6a67 	vmov.f32	s13, s15
 8007cf0:	d938      	bls.n	8007d64 <forward_lstm+0x1620>
 8007cf2:	ed93 6a05 	vldr	s12, [r3, #20]
 8007cf6:	edd5 7a05 	vldr	s15, [r5, #20]
 8007cfa:	edd5 5a04 	vldr	s11, [r5, #16]
 8007cfe:	edd5 4a06 	vldr	s9, [r5, #24]
 8007d02:	ed93 5a06 	vldr	s10, [r3, #24]
 8007d06:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8007d0a:	ee67 7a86 	vmul.f32	s15, s15, s12
 8007d0e:	ed93 6a04 	vldr	s12, [r3, #16]
 8007d12:	eee5 7a86 	vfma.f32	s15, s11, s12
 8007d16:	3a08      	subs	r2, #8
 8007d18:	2a03      	cmp	r2, #3
 8007d1a:	edd5 5a07 	vldr	s11, [r5, #28]
 8007d1e:	ed93 6a07 	vldr	s12, [r3, #28]
 8007d22:	eee4 7a85 	vfma.f32	s15, s9, s10
 8007d26:	eee5 7a86 	vfma.f32	s15, s11, s12
 8007d2a:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8007d2e:	d919      	bls.n	8007d64 <forward_lstm+0x1620>
 8007d30:	ed95 6a09 	vldr	s12, [r5, #36]	@ 0x24
 8007d34:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8007d38:	edd3 5a08 	vldr	s11, [r3, #32]
 8007d3c:	edd3 4a0a 	vldr	s9, [r3, #40]	@ 0x28
 8007d40:	ed95 5a0a 	vldr	s10, [r5, #40]	@ 0x28
 8007d44:	ee67 7a86 	vmul.f32	s15, s15, s12
 8007d48:	ed95 6a08 	vldr	s12, [r5, #32]
 8007d4c:	eee5 7a86 	vfma.f32	s15, s11, s12
 8007d50:	edd3 5a0b 	vldr	s11, [r3, #44]	@ 0x2c
 8007d54:	ed95 6a0b 	vldr	s12, [r5, #44]	@ 0x2c
 8007d58:	eee4 7a85 	vfma.f32	s15, s9, s10
 8007d5c:	eee5 7a86 	vfma.f32	s15, s11, s12
 8007d60:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8007d64:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8007d68:	4413      	add	r3, r2
 8007d6a:	e001      	b.n	8007d70 <forward_lstm+0x162c>
 8007d6c:	00000000 	.word	0x00000000
 8007d70:	f8d7 20fc 	ldr.w	r2, [r7, #252]	@ 0xfc
 8007d74:	b1aa      	cbz	r2, 8007da2 <forward_lstm+0x165e>
 8007d76:	ed96 6a00 	vldr	s12, [r6]
 8007d7a:	edd3 7a00 	vldr	s15, [r3]
 8007d7e:	3a01      	subs	r2, #1
 8007d80:	eee6 6a27 	vfma.f32	s13, s12, s15
 8007d84:	d00d      	beq.n	8007da2 <forward_lstm+0x165e>
 8007d86:	ed96 6a01 	vldr	s12, [r6, #4]
 8007d8a:	edd3 7a01 	vldr	s15, [r3, #4]
 8007d8e:	2a01      	cmp	r2, #1
 8007d90:	eee6 6a27 	vfma.f32	s13, s12, s15
 8007d94:	d005      	beq.n	8007da2 <forward_lstm+0x165e>
 8007d96:	ed93 6a02 	vldr	s12, [r3, #8]
 8007d9a:	edd6 7a02 	vldr	s15, [r6, #8]
 8007d9e:	eee6 6a27 	vfma.f32	s13, s12, s15
 8007da2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8007da6:	ee76 6a87 	vadd.f32	s13, s13, s14
 8007daa:	4418      	add	r0, r3
 8007dac:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8007db0:	ed41 6a01 	vstr	s13, [r1, #-4]
 8007db4:	ecf3 7a01 	vldmia	r3!, {s15}
 8007db8:	ecba 6a01 	vldmia	sl!, {s12}
 8007dbc:	ed19 7a01 	vldr	s14, [r9, #-4]
 8007dc0:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8007dc4:	eee6 7a07 	vfma.f32	s15, s12, s14
 8007dc8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007dcc:	449c      	add	ip, r3
 8007dce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007dd2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007dd6:	4573      	cmp	r3, lr
 8007dd8:	ed41 7a01 	vstr	s15, [r1, #-4]
 8007ddc:	f47f add8 	bne.w	8007990 <forward_lstm+0x124c>
 8007de0:	f8d7 50b4 	ldr.w	r5, [r7, #180]	@ 0xb4
 8007de4:	f8d7 4080 	ldr.w	r4, [r7, #128]	@ 0x80
 8007de8:	f507 71ea 	add.w	r1, r7, #468	@ 0x1d4
 8007dec:	4608      	mov	r0, r1
 8007dee:	ee19 3a10 	vmov	r3, s18
 8007df2:	462a      	mov	r2, r5
 8007df4:	47a0      	blx	r4
 8007df6:	ee1a 3a10 	vmov	r3, s20
 8007dfa:	462a      	mov	r2, r5
 8007dfc:	f507 7103 	add.w	r1, r7, #524	@ 0x20c
 8007e00:	6c3c      	ldr	r4, [r7, #64]	@ 0x40
 8007e02:	f507 70f8 	add.w	r0, r7, #496	@ 0x1f0
 8007e06:	47a0      	blx	r4
 8007e08:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8007e0c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007e10:	6979      	ldr	r1, [r7, #20]
 8007e12:	ecf3 7a01 	vldmia	r3!, {s15}
 8007e16:	ed92 7a00 	vldr	s14, [r2]
 8007e1a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007e1e:	4299      	cmp	r1, r3
 8007e20:	ece2 7a01 	vstmia	r2!, {s15}
 8007e24:	d1f5      	bne.n	8007e12 <forward_lstm+0x16ce>
 8007e26:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8007e2a:	899b      	ldrh	r3, [r3, #12]
 8007e2c:	b153      	cbz	r3, 8007e44 <forward_lstm+0x1700>
 8007e2e:	e9d7 8503 	ldrd	r8, r5, [r7, #12]
 8007e32:	2400      	movs	r4, #0
 8007e34:	f858 6f04 	ldr.w	r6, [r8, #4]!
 8007e38:	3401      	adds	r4, #1
 8007e3a:	bbd6      	cbnz	r6, 8007eb2 <forward_lstm+0x176e>
 8007e3c:	42a3      	cmp	r3, r4
 8007e3e:	f105 0504 	add.w	r5, r5, #4
 8007e42:	dcf7      	bgt.n	8007e34 <forward_lstm+0x16f0>
 8007e44:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007e46:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8007e4a:	428a      	cmp	r2, r1
 8007e4c:	f340 8098 	ble.w	8007f80 <forward_lstm+0x183c>
 8007e50:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8007e54:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007e56:	440a      	add	r2, r1
 8007e58:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 8007e5c:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8007e60:	2a00      	cmp	r2, #0
 8007e62:	f2c0 808d 	blt.w	8007f80 <forward_lstm+0x183c>
 8007e66:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8007e6a:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8007e6e:	f8c7 2108 	str.w	r2, [r7, #264]	@ 0x108
 8007e72:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007e76:	f7fe be21 	b.w	8006abc <forward_lstm+0x378>
 8007e7a:	4629      	mov	r1, r5
 8007e7c:	2800      	cmp	r0, #0
 8007e7e:	f000 80d6 	beq.w	800802e <forward_lstm+0x18ea>
 8007e82:	ee19 2a90 	vmov	r2, s19
 8007e86:	f000 fb29 	bl	80084dc <st_int8_copy>
 8007e8a:	ee19 2a90 	vmov	r2, s19
 8007e8e:	f8d7 1108 	ldr.w	r1, [r7, #264]	@ 0x108
 8007e92:	4640      	mov	r0, r8
 8007e94:	f1b8 0f00 	cmp.w	r8, #0
 8007e98:	f000 80d7 	beq.w	800804a <forward_lstm+0x1906>
 8007e9c:	f000 fb1e 	bl	80084dc <st_int8_copy>
 8007ea0:	ee19 2a90 	vmov	r2, s19
 8007ea4:	f8d7 1098 	ldr.w	r1, [r7, #152]	@ 0x98
 8007ea8:	2000      	movs	r0, #0
 8007eaa:	f000 fabb 	bl	8008424 <st_int8_fill>
 8007eae:	f7fe bd4e 	b.w	800694e <forward_lstm+0x20a>
 8007eb2:	f8d5 9000 	ldr.w	r9, [r5]
 8007eb6:	f8d7 0098 	ldr.w	r0, [r7, #152]	@ 0x98
 8007eba:	ee19 2a90 	vmov	r2, s19
 8007ebe:	4649      	mov	r1, r9
 8007ec0:	f000 fb0c 	bl	80084dc <st_int8_copy>
 8007ec4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8007ec8:	899b      	ldrh	r3, [r3, #12]
 8007eca:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007ece:	42a3      	cmp	r3, r4
 8007ed0:	f845 6b04 	str.w	r6, [r5], #4
 8007ed4:	dcae      	bgt.n	8007e34 <forward_lstm+0x16f0>
 8007ed6:	e7b5      	b.n	8007e44 <forward_lstm+0x1700>
 8007ed8:	46ce      	mov	lr, r9
 8007eda:	462e      	mov	r6, r5
 8007edc:	f7ff b87c 	b.w	8006fd8 <forward_lstm+0x894>
 8007ee0:	4651      	mov	r1, sl
 8007ee2:	46a0      	mov	r8, r4
 8007ee4:	f7fe bf7b 	b.w	8006dde <forward_lstm+0x69a>
 8007ee8:	f8d7 a0e8 	ldr.w	sl, [r7, #232]	@ 0xe8
 8007eec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ef0:	f8d7 40ec 	ldr.w	r4, [r7, #236]	@ 0xec
 8007ef4:	f7fe bf0c 	b.w	8006d10 <forward_lstm+0x5cc>
 8007ef8:	4663      	mov	r3, ip
 8007efa:	e6d6      	b.n	8007caa <forward_lstm+0x1566>
 8007efc:	4603      	mov	r3, r0
 8007efe:	e5dc      	b.n	8007aba <forward_lstm+0x1376>
 8007f00:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8007f04:	e43c      	b.n	8007780 <forward_lstm+0x103c>
 8007f06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007f0a:	f7ff bb42 	b.w	8007592 <forward_lstm+0xe4e>
 8007f0e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007f12:	f7ff ba16 	b.w	8007342 <forward_lstm+0xbfe>
 8007f16:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007f1a:	f7ff b91b 	b.w	8007154 <forward_lstm+0xa10>
 8007f1e:	f8d7 90b4 	ldr.w	r9, [r7, #180]	@ 0xb4
 8007f22:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8007f26:	f8d7 5108 	ldr.w	r5, [r7, #264]	@ 0x108
 8007f2a:	f7fe bff1 	b.w	8006f10 <forward_lstm+0x7cc>
 8007f2e:	f507 71c0 	add.w	r1, r7, #384	@ 0x180
 8007f32:	f8d7 4080 	ldr.w	r4, [r7, #128]	@ 0x80
 8007f36:	ee19 3a10 	vmov	r3, s18
 8007f3a:	4608      	mov	r0, r1
 8007f3c:	4616      	mov	r6, r2
 8007f3e:	47a0      	blx	r4
 8007f40:	f507 71ce 	add.w	r1, r7, #412	@ 0x19c
 8007f44:	ee19 3a10 	vmov	r3, s18
 8007f48:	4632      	mov	r2, r6
 8007f4a:	4608      	mov	r0, r1
 8007f4c:	47a0      	blx	r4
 8007f4e:	f507 71dc 	add.w	r1, r7, #440	@ 0x1b8
 8007f52:	ee1a 3a90 	vmov	r3, s21
 8007f56:	4632      	mov	r2, r6
 8007f58:	4608      	mov	r0, r1
 8007f5a:	6c7d      	ldr	r5, [r7, #68]	@ 0x44
 8007f5c:	47a8      	blx	r5
 8007f5e:	f507 71ea 	add.w	r1, r7, #468	@ 0x1d4
 8007f62:	ee19 3a10 	vmov	r3, s18
 8007f66:	4632      	mov	r2, r6
 8007f68:	4608      	mov	r0, r1
 8007f6a:	47a0      	blx	r4
 8007f6c:	ee1a 3a10 	vmov	r3, s20
 8007f70:	6c3c      	ldr	r4, [r7, #64]	@ 0x40
 8007f72:	4632      	mov	r2, r6
 8007f74:	f507 7103 	add.w	r1, r7, #524	@ 0x20c
 8007f78:	f507 70f8 	add.w	r0, r7, #496	@ 0x1f0
 8007f7c:	47a0      	blx	r4
 8007f7e:	e752      	b.n	8007e26 <forward_lstm+0x16e2>
 8007f80:	b353      	cbz	r3, 8007fd8 <forward_lstm+0x1894>
 8007f82:	e9d7 5403 	ldrd	r5, r4, [r7, #12]
 8007f86:	f8d7 8094 	ldr.w	r8, [r7, #148]	@ 0x94
 8007f8a:	f8d7 9098 	ldr.w	r9, [r7, #152]	@ 0x98
 8007f8e:	f8d7 a008 	ldr.w	sl, [r7, #8]
 8007f92:	ee19 ba90 	vmov	fp, s19
 8007f96:	2600      	movs	r6, #0
 8007f98:	e00b      	b.n	8007fb2 <forward_lstm+0x186e>
 8007f9a:	6821      	ldr	r1, [r4, #0]
 8007f9c:	465a      	mov	r2, fp
 8007f9e:	4648      	mov	r0, r9
 8007fa0:	f000 fa9c 	bl	80084dc <st_int8_copy>
 8007fa4:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 8007fa8:	3601      	adds	r6, #1
 8007faa:	42b3      	cmp	r3, r6
 8007fac:	f104 0404 	add.w	r4, r4, #4
 8007fb0:	dd12      	ble.n	8007fd8 <forward_lstm+0x1894>
 8007fb2:	f855 2f04 	ldr.w	r2, [r5, #4]!
 8007fb6:	2a00      	cmp	r2, #0
 8007fb8:	d1f6      	bne.n	8007fa8 <forward_lstm+0x1864>
 8007fba:	3b01      	subs	r3, #1
 8007fbc:	42b3      	cmp	r3, r6
 8007fbe:	d1ec      	bne.n	8007f9a <forward_lstm+0x1856>
 8007fc0:	f89a 303d 	ldrb.w	r3, [sl, #61]	@ 0x3d
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d0e8      	beq.n	8007f9a <forward_lstm+0x1856>
 8007fc8:	6821      	ldr	r1, [r4, #0]
 8007fca:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 8007fcc:	465a      	mov	r2, fp
 8007fce:	f000 fa85 	bl	80084dc <st_int8_copy>
 8007fd2:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 8007fd6:	e7e7      	b.n	8007fa8 <forward_lstm+0x1864>
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	b18b      	cbz	r3, 8008000 <forward_lstm+0x18bc>
 8007fdc:	68bb      	ldr	r3, [r7, #8]
 8007fde:	69dc      	ldr	r4, [r3, #28]
 8007fe0:	b174      	cbz	r4, 8008000 <forward_lstm+0x18bc>
 8007fe2:	ee19 5a90 	vmov	r5, s19
 8007fe6:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 8007fe8:	ee19 2a90 	vmov	r2, s19
 8007fec:	4621      	mov	r1, r4
 8007fee:	f000 fa75 	bl	80084dc <st_int8_copy>
 8007ff2:	ee19 2a90 	vmov	r2, s19
 8007ff6:	f8d7 0098 	ldr.w	r0, [r7, #152]	@ 0x98
 8007ffa:	1961      	adds	r1, r4, r5
 8007ffc:	f000 fa6e 	bl	80084dc <st_int8_copy>
 8008000:	f507 770b 	add.w	r7, r7, #556	@ 0x22c
 8008004:	46bd      	mov	sp, r7
 8008006:	ecbd 8b06 	vpop	{d8-d10}
 800800a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800800e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008012:	2301      	movs	r3, #1
 8008014:	673b      	str	r3, [r7, #112]	@ 0x70
 8008016:	4613      	mov	r3, r2
 8008018:	f7fe bcba 	b.w	8006990 <forward_lstm+0x24c>
 800801c:	ee09 0a10 	vmov	s18, r0
 8008020:	ee0a 0a90 	vmov	s21, r0
 8008024:	ee0a 0a10 	vmov	s20, r0
 8008028:	4680      	mov	r8, r0
 800802a:	f7fe bc0f 	b.w	800684c <forward_lstm+0x108>
 800802e:	ee19 2a90 	vmov	r2, s19
 8008032:	4618      	mov	r0, r3
 8008034:	f000 f9f6 	bl	8008424 <st_int8_fill>
 8008038:	ee19 2a90 	vmov	r2, s19
 800803c:	f8d7 1108 	ldr.w	r1, [r7, #264]	@ 0x108
 8008040:	4640      	mov	r0, r8
 8008042:	f1b8 0f00 	cmp.w	r8, #0
 8008046:	f47f af29 	bne.w	8007e9c <forward_lstm+0x1758>
 800804a:	f000 f9eb 	bl	8008424 <st_int8_fill>
 800804e:	e727      	b.n	8007ea0 <forward_lstm+0x175c>
 8008050:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
 8008054:	4682      	mov	sl, r0
 8008056:	4683      	mov	fp, r0
 8008058:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
 800805c:	f7fe bb9b 	b.w	8006796 <forward_lstm+0x52>
 8008060:	f8c7 9110 	str.w	r9, [r7, #272]	@ 0x110
 8008064:	f7fe bc01 	b.w	800686a <forward_lstm+0x126>
 8008068:	2300      	movs	r3, #0
 800806a:	685b      	ldr	r3, [r3, #4]
 800806c:	deff      	udf	#255	@ 0xff
 800806e:	f8d9 3018 	ldr.w	r3, [r9, #24]
 8008072:	deff      	udf	#255	@ 0xff

08008074 <forward_lite_nl_relu_generic_if32of32_kernel>:
 8008074:	edd3 6a02 	vldr	s13, [r3, #8]
 8008078:	ed93 7a00 	vldr	s14, [r3]
 800807c:	ed93 6a01 	vldr	s12, [r3, #4]
 8008080:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 8008084:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008088:	d42a      	bmi.n	80080e0 <forward_lite_nl_relu_generic_if32of32_kernel+0x6c>
 800808a:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
 800808e:	3a01      	subs	r2, #1
 8008090:	eb01 0c82 	add.w	ip, r1, r2, lsl #2
 8008094:	4561      	cmp	r1, ip
 8008096:	ea4f 0282 	mov.w	r2, r2, lsl #2
 800809a:	d85d      	bhi.n	8008158 <forward_lite_nl_relu_generic_if32of32_kernel+0xe4>
 800809c:	1d11      	adds	r1, r2, #4
 800809e:	f10c 0304 	add.w	r3, ip, #4
 80080a2:	4408      	add	r0, r1
 80080a4:	ebac 0202 	sub.w	r2, ip, r2
 80080a8:	e00c      	b.n	80080c4 <forward_lite_nl_relu_generic_if32of32_kernel+0x50>
 80080aa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80080ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80080b2:	ee77 5ac7 	vsub.f32	s11, s15, s14
 80080b6:	db01      	blt.n	80080bc <forward_lite_nl_relu_generic_if32of32_kernel+0x48>
 80080b8:	ee65 7a86 	vmul.f32	s15, s11, s12
 80080bc:	4293      	cmp	r3, r2
 80080be:	ed60 7a01 	vstmdb	r0!, {s15}
 80080c2:	d00c      	beq.n	80080de <forward_lite_nl_relu_generic_if32of32_kernel+0x6a>
 80080c4:	ed73 7a01 	vldmdb	r3!, {s15}
 80080c8:	eef4 6ae7 	vcmpe.f32	s13, s15
 80080cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80080d0:	daeb      	bge.n	80080aa <forward_lite_nl_relu_generic_if32of32_kernel+0x36>
 80080d2:	eef0 7a66 	vmov.f32	s15, s13
 80080d6:	4293      	cmp	r3, r2
 80080d8:	ed60 7a01 	vstmdb	r0!, {s15}
 80080dc:	d1f2      	bne.n	80080c4 <forward_lite_nl_relu_generic_if32of32_kernel+0x50>
 80080de:	4770      	bx	lr
 80080e0:	eeb5 6a40 	vcmp.f32	s12, #0.0
 80080e4:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
 80080e8:	3a01      	subs	r2, #1
 80080ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80080ee:	eb01 0c82 	add.w	ip, r1, r2, lsl #2
 80080f2:	ea4f 0282 	mov.w	r2, r2, lsl #2
 80080f6:	d017      	beq.n	8008128 <forward_lite_nl_relu_generic_if32of32_kernel+0xb4>
 80080f8:	4561      	cmp	r1, ip
 80080fa:	d82d      	bhi.n	8008158 <forward_lite_nl_relu_generic_if32of32_kernel+0xe4>
 80080fc:	1d11      	adds	r1, r2, #4
 80080fe:	f10c 0304 	add.w	r3, ip, #4
 8008102:	4401      	add	r1, r0
 8008104:	ebac 0202 	sub.w	r2, ip, r2
 8008108:	ed73 7a01 	vldmdb	r3!, {s15}
 800810c:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8008110:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008114:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008118:	ee66 6a86 	vmul.f32	s13, s13, s12
 800811c:	d81d      	bhi.n	800815a <forward_lite_nl_relu_generic_if32of32_kernel+0xe6>
 800811e:	4293      	cmp	r3, r2
 8008120:	ed61 6a01 	vstmdb	r1!, {s13}
 8008124:	d1f0      	bne.n	8008108 <forward_lite_nl_relu_generic_if32of32_kernel+0x94>
 8008126:	4770      	bx	lr
 8008128:	4561      	cmp	r1, ip
 800812a:	d815      	bhi.n	8008158 <forward_lite_nl_relu_generic_if32of32_kernel+0xe4>
 800812c:	1d11      	adds	r1, r2, #4
 800812e:	b500      	push	{lr}
 8008130:	f10c 0304 	add.w	r3, ip, #4
 8008134:	f04f 0e00 	mov.w	lr, #0
 8008138:	4401      	add	r1, r0
 800813a:	ebac 0202 	sub.w	r2, ip, r2
 800813e:	ed73 7a01 	vldmdb	r3!, {s15}
 8008142:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008146:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800814a:	d40b      	bmi.n	8008164 <forward_lite_nl_relu_generic_if32of32_kernel+0xf0>
 800814c:	4293      	cmp	r3, r2
 800814e:	f841 ed04 	str.w	lr, [r1, #-4]!
 8008152:	d1f4      	bne.n	800813e <forward_lite_nl_relu_generic_if32of32_kernel+0xca>
 8008154:	f85d fb04 	ldr.w	pc, [sp], #4
 8008158:	4770      	bx	lr
 800815a:	4293      	cmp	r3, r2
 800815c:	ed61 7a01 	vstmdb	r1!, {s15}
 8008160:	d1d2      	bne.n	8008108 <forward_lite_nl_relu_generic_if32of32_kernel+0x94>
 8008162:	4770      	bx	lr
 8008164:	4293      	cmp	r3, r2
 8008166:	ed61 7a01 	vstmdb	r1!, {s15}
 800816a:	d1e8      	bne.n	800813e <forward_lite_nl_relu_generic_if32of32_kernel+0xca>
 800816c:	e7f2      	b.n	8008154 <forward_lite_nl_relu_generic_if32of32_kernel+0xe0>
 800816e:	bf00      	nop

08008170 <forward_lite_dense_if32of32wf32>:
 8008170:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008174:	e9d0 2305 	ldrd	r2, r3, [r0, #20]
 8008178:	6801      	ldr	r1, [r0, #0]
 800817a:	f8d0 8004 	ldr.w	r8, [r0, #4]
 800817e:	fb02 f303 	mul.w	r3, r2, r3
 8008182:	b083      	sub	sp, #12
 8008184:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8008188:	4299      	cmp	r1, r3
 800818a:	9100      	str	r1, [sp, #0]
 800818c:	9301      	str	r3, [sp, #4]
 800818e:	f080 811e 	bcs.w	80083ce <forward_lite_dense_if32of32wf32+0x25e>
 8008192:	6904      	ldr	r4, [r0, #16]
 8008194:	4607      	mov	r7, r0
 8008196:	0096      	lsls	r6, r2, #2
 8008198:	9b00      	ldr	r3, [sp, #0]
 800819a:	68bd      	ldr	r5, [r7, #8]
 800819c:	eb03 0e06 	add.w	lr, r3, r6
 80081a0:	459e      	cmp	lr, r3
 80081a2:	461e      	mov	r6, r3
 80081a4:	f240 8104 	bls.w	80083b0 <forward_lite_dense_if32of32wf32+0x240>
 80081a8:	f1a4 0c10 	sub.w	ip, r4, #16
 80081ac:	ea4f 1c1c 	mov.w	ip, ip, lsr #4
 80081b0:	f10c 0c01 	add.w	ip, ip, #1
 80081b4:	ea4f 1b8c 	mov.w	fp, ip, lsl #6
 80081b8:	ea4f 0984 	mov.w	r9, r4, lsl #2
 80081bc:	eb08 1c8c 	add.w	ip, r8, ip, lsl #6
 80081c0:	2c0f      	cmp	r4, #15
 80081c2:	ed9f 7a97 	vldr	s14, [pc, #604]	@ 8008420 <forward_lite_dense_if32of32wf32+0x2b0>
 80081c6:	f240 8105 	bls.w	80083d4 <forward_lite_dense_if32of32wf32+0x264>
 80081ca:	f108 0240 	add.w	r2, r8, #64	@ 0x40
 80081ce:	f105 0340 	add.w	r3, r5, #64	@ 0x40
 80081d2:	4621      	mov	r1, r4
 80081d4:	ed53 5a0f 	vldr	s11, [r3, #-60]	@ 0xffffffc4
 80081d8:	ed52 7a0f 	vldr	s15, [r2, #-60]	@ 0xffffffc4
 80081dc:	ed12 6a10 	vldr	s12, [r2, #-64]	@ 0xffffffc0
 80081e0:	ed53 6a10 	vldr	s13, [r3, #-64]	@ 0xffffffc0
 80081e4:	ed52 4a0d 	vldr	s9, [r2, #-52]	@ 0xffffffcc
 80081e8:	ed12 5a0c 	vldr	s10, [r2, #-48]	@ 0xffffffd0
 80081ec:	ed12 3a0a 	vldr	s6, [r2, #-40]	@ 0xffffffd8
 80081f0:	ed53 3a0a 	vldr	s7, [r3, #-40]	@ 0xffffffd8
 80081f4:	ed12 4a09 	vldr	s8, [r2, #-36]	@ 0xffffffdc
 80081f8:	ed12 1a06 	vldr	s2, [r2, #-24]	@ 0xffffffe8
 80081fc:	ed53 1a06 	vldr	s3, [r3, #-24]	@ 0xffffffe8
 8008200:	ed12 2a05 	vldr	s4, [r2, #-20]	@ 0xffffffec
 8008204:	ed53 2a05 	vldr	s5, [r3, #-20]	@ 0xffffffec
 8008208:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800820c:	ed52 5a0e 	vldr	s11, [r2, #-56]	@ 0xffffffc8
 8008210:	eee6 7a26 	vfma.f32	s15, s12, s13
 8008214:	3910      	subs	r1, #16
 8008216:	290f      	cmp	r1, #15
 8008218:	ed13 6a0e 	vldr	s12, [r3, #-56]	@ 0xffffffc8
 800821c:	ed53 6a0d 	vldr	s13, [r3, #-52]	@ 0xffffffcc
 8008220:	eee5 7a86 	vfma.f32	s15, s11, s12
 8008224:	f102 0240 	add.w	r2, r2, #64	@ 0x40
 8008228:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 800822c:	ed53 5a1c 	vldr	s11, [r3, #-112]	@ 0xffffff90
 8008230:	ed12 6a1b 	vldr	s12, [r2, #-108]	@ 0xffffff94
 8008234:	eee4 7aa6 	vfma.f32	s15, s9, s13
 8008238:	ed53 6a1b 	vldr	s13, [r3, #-108]	@ 0xffffff94
 800823c:	ed53 4a19 	vldr	s9, [r3, #-100]	@ 0xffffff9c
 8008240:	eee5 7a25 	vfma.f32	s15, s10, s11
 8008244:	ed12 5a18 	vldr	s10, [r2, #-96]	@ 0xffffffa0
 8008248:	ed53 5a18 	vldr	s11, [r3, #-96]	@ 0xffffffa0
 800824c:	eee6 7a26 	vfma.f32	s15, s12, s13
 8008250:	ed12 6a17 	vldr	s12, [r2, #-92]	@ 0xffffffa4
 8008254:	ed53 6a17 	vldr	s13, [r3, #-92]	@ 0xffffffa4
 8008258:	eee3 7a23 	vfma.f32	s15, s6, s7
 800825c:	ed12 3a14 	vldr	s6, [r2, #-80]	@ 0xffffffb0
 8008260:	ed53 3a14 	vldr	s7, [r3, #-80]	@ 0xffffffb0
 8008264:	eee4 7a24 	vfma.f32	s15, s8, s9
 8008268:	ed12 4a13 	vldr	s8, [r2, #-76]	@ 0xffffffb4
 800826c:	ed53 4a13 	vldr	s9, [r3, #-76]	@ 0xffffffb4
 8008270:	eee5 7a25 	vfma.f32	s15, s10, s11
 8008274:	ed12 5a12 	vldr	s10, [r2, #-72]	@ 0xffffffb8
 8008278:	ed53 5a12 	vldr	s11, [r3, #-72]	@ 0xffffffb8
 800827c:	eee6 7a26 	vfma.f32	s15, s12, s13
 8008280:	ed12 6a11 	vldr	s12, [r2, #-68]	@ 0xffffffbc
 8008284:	ed53 6a11 	vldr	s13, [r3, #-68]	@ 0xffffffbc
 8008288:	eee1 7a21 	vfma.f32	s15, s2, s3
 800828c:	eee2 7a22 	vfma.f32	s15, s4, s5
 8008290:	eee3 7a23 	vfma.f32	s15, s6, s7
 8008294:	eee4 7a24 	vfma.f32	s15, s8, s9
 8008298:	eee5 7a25 	vfma.f32	s15, s10, s11
 800829c:	eee6 7a26 	vfma.f32	s15, s12, s13
 80082a0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80082a4:	d896      	bhi.n	80081d4 <forward_lite_dense_if32of32wf32+0x64>
 80082a6:	eb05 020b 	add.w	r2, r5, fp
 80082aa:	f004 010f 	and.w	r1, r4, #15
 80082ae:	4663      	mov	r3, ip
 80082b0:	2903      	cmp	r1, #3
 80082b2:	d95f      	bls.n	8008374 <forward_lite_dense_if32of32wf32+0x204>
 80082b4:	edd2 6a01 	vldr	s13, [r2, #4]
 80082b8:	edd3 7a01 	vldr	s15, [r3, #4]
 80082bc:	ed93 6a00 	vldr	s12, [r3]
 80082c0:	ed93 5a02 	vldr	s10, [r3, #8]
 80082c4:	edd2 5a02 	vldr	s11, [r2, #8]
 80082c8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80082cc:	edd2 6a00 	vldr	s13, [r2]
 80082d0:	eee6 7a26 	vfma.f32	s15, s12, s13
 80082d4:	1f08      	subs	r0, r1, #4
 80082d6:	2803      	cmp	r0, #3
 80082d8:	ed93 6a03 	vldr	s12, [r3, #12]
 80082dc:	edd2 6a03 	vldr	s13, [r2, #12]
 80082e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80082e4:	eee5 7a25 	vfma.f32	s15, s10, s11
 80082e8:	eee6 7a26 	vfma.f32	s15, s12, s13
 80082ec:	eeb0 7a67 	vmov.f32	s14, s15
 80082f0:	d938      	bls.n	8008364 <forward_lite_dense_if32of32wf32+0x1f4>
 80082f2:	edd2 6a05 	vldr	s13, [r2, #20]
 80082f6:	edd3 7a05 	vldr	s15, [r3, #20]
 80082fa:	ed93 6a04 	vldr	s12, [r3, #16]
 80082fe:	ed93 5a06 	vldr	s10, [r3, #24]
 8008302:	edd2 5a06 	vldr	s11, [r2, #24]
 8008306:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800830a:	edd2 6a04 	vldr	s13, [r2, #16]
 800830e:	eee6 7a26 	vfma.f32	s15, s12, s13
 8008312:	f1a1 0a08 	sub.w	sl, r1, #8
 8008316:	f1ba 0f03 	cmp.w	sl, #3
 800831a:	ed93 6a07 	vldr	s12, [r3, #28]
 800831e:	edd2 6a07 	vldr	s13, [r2, #28]
 8008322:	eee5 7a25 	vfma.f32	s15, s10, s11
 8008326:	eee6 7a26 	vfma.f32	s15, s12, s13
 800832a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800832e:	d919      	bls.n	8008364 <forward_lite_dense_if32of32wf32+0x1f4>
 8008330:	edd3 6a09 	vldr	s13, [r3, #36]	@ 0x24
 8008334:	edd2 7a09 	vldr	s15, [r2, #36]	@ 0x24
 8008338:	ed92 6a08 	vldr	s12, [r2, #32]
 800833c:	ed92 5a0a 	vldr	s10, [r2, #40]	@ 0x28
 8008340:	edd3 5a0a 	vldr	s11, [r3, #40]	@ 0x28
 8008344:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8008348:	edd3 6a08 	vldr	s13, [r3, #32]
 800834c:	eee6 7a26 	vfma.f32	s15, s12, s13
 8008350:	ed92 6a0b 	vldr	s12, [r2, #44]	@ 0x2c
 8008354:	edd3 6a0b 	vldr	s13, [r3, #44]	@ 0x2c
 8008358:	eee5 7a25 	vfma.f32	s15, s10, s11
 800835c:	eee6 7a26 	vfma.f32	s15, s12, s13
 8008360:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008364:	0880      	lsrs	r0, r0, #2
 8008366:	3001      	adds	r0, #1
 8008368:	eb02 1200 	add.w	r2, r2, r0, lsl #4
 800836c:	eb03 1300 	add.w	r3, r3, r0, lsl #4
 8008370:	f001 0103 	and.w	r1, r1, #3
 8008374:	b1a9      	cbz	r1, 80083a2 <forward_lite_dense_if32of32wf32+0x232>
 8008376:	edd3 6a00 	vldr	s13, [r3]
 800837a:	edd2 7a00 	vldr	s15, [r2]
 800837e:	3901      	subs	r1, #1
 8008380:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008384:	d00d      	beq.n	80083a2 <forward_lite_dense_if32of32wf32+0x232>
 8008386:	edd3 6a01 	vldr	s13, [r3, #4]
 800838a:	edd2 7a01 	vldr	s15, [r2, #4]
 800838e:	2901      	cmp	r1, #1
 8008390:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008394:	d005      	beq.n	80083a2 <forward_lite_dense_if32of32wf32+0x232>
 8008396:	edd2 6a02 	vldr	s13, [r2, #8]
 800839a:	edd3 7a02 	vldr	s15, [r3, #8]
 800839e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80083a2:	444d      	add	r5, r9
 80083a4:	eca6 7a01 	vstmia	r6!, {s14}
 80083a8:	45b6      	cmp	lr, r6
 80083aa:	f63f af09 	bhi.w	80081c0 <forward_lite_dense_if32of32wf32+0x50>
 80083ae:	697a      	ldr	r2, [r7, #20]
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	b99b      	cbnz	r3, 80083dc <forward_lite_dense_if32of32wf32+0x26c>
 80083b4:	9b00      	ldr	r3, [sp, #0]
 80083b6:	9901      	ldr	r1, [sp, #4]
 80083b8:	693c      	ldr	r4, [r7, #16]
 80083ba:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80083be:	4299      	cmp	r1, r3
 80083c0:	9300      	str	r3, [sp, #0]
 80083c2:	eb08 0884 	add.w	r8, r8, r4, lsl #2
 80083c6:	ea4f 0682 	mov.w	r6, r2, lsl #2
 80083ca:	f63f aee5 	bhi.w	8008198 <forward_lite_dense_if32of32wf32+0x28>
 80083ce:	b003      	add	sp, #12
 80083d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083d4:	4621      	mov	r1, r4
 80083d6:	462a      	mov	r2, r5
 80083d8:	4643      	mov	r3, r8
 80083da:	e769      	b.n	80082b0 <forward_lite_dense_if32of32wf32+0x140>
 80083dc:	2a00      	cmp	r2, #0
 80083de:	d0e9      	beq.n	80083b4 <forward_lite_dense_if32of32wf32+0x244>
 80083e0:	9a00      	ldr	r2, [sp, #0]
 80083e2:	ed93 7a00 	vldr	s14, [r3]
 80083e6:	edd2 7a00 	vldr	s15, [r2]
 80083ea:	ee77 7a87 	vadd.f32	s15, s15, s14
 80083ee:	4613      	mov	r3, r2
 80083f0:	edc2 7a00 	vstr	s15, [r2]
 80083f4:	697a      	ldr	r2, [r7, #20]
 80083f6:	2a01      	cmp	r2, #1
 80083f8:	d9dc      	bls.n	80083b4 <forward_lite_dense_if32of32wf32+0x244>
 80083fa:	1d19      	adds	r1, r3, #4
 80083fc:	2301      	movs	r3, #1
 80083fe:	68fa      	ldr	r2, [r7, #12]
 8008400:	ed91 7a00 	vldr	s14, [r1]
 8008404:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8008408:	edd2 7a00 	vldr	s15, [r2]
 800840c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008410:	3301      	adds	r3, #1
 8008412:	ece1 7a01 	vstmia	r1!, {s15}
 8008416:	697a      	ldr	r2, [r7, #20]
 8008418:	429a      	cmp	r2, r3
 800841a:	d8f0      	bhi.n	80083fe <forward_lite_dense_if32of32wf32+0x28e>
 800841c:	e7ca      	b.n	80083b4 <forward_lite_dense_if32of32wf32+0x244>
 800841e:	bf00      	nop
 8008420:	00000000 	.word	0x00000000

08008424 <st_int8_fill>:
 8008424:	b510      	push	{r4, lr}
 8008426:	0203      	lsls	r3, r0, #8
 8008428:	b2c4      	uxtb	r4, r0
 800842a:	b29b      	uxth	r3, r3
 800842c:	ea44 6400 	orr.w	r4, r4, r0, lsl #24
 8008430:	431c      	orrs	r4, r3
 8008432:	0403      	lsls	r3, r0, #16
 8008434:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8008438:	431c      	orrs	r4, r3
 800843a:	078b      	lsls	r3, r1, #30
 800843c:	468c      	mov	ip, r1
 800843e:	d007      	beq.n	8008450 <st_int8_fill+0x2c>
 8008440:	b3a2      	cbz	r2, 80084ac <st_int8_fill+0x88>
 8008442:	f80c 0b01 	strb.w	r0, [ip], #1
 8008446:	f01c 0f03 	tst.w	ip, #3
 800844a:	f102 32ff 	add.w	r2, r2, #4294967295
 800844e:	d1f7      	bne.n	8008440 <st_int8_fill+0x1c>
 8008450:	0911      	lsrs	r1, r2, #4
 8008452:	d03e      	beq.n	80084d2 <st_int8_fill+0xae>
 8008454:	1e4b      	subs	r3, r1, #1
 8008456:	2b01      	cmp	r3, #1
 8008458:	d929      	bls.n	80084ae <st_int8_fill+0x8a>
 800845a:	f01c 0f07 	tst.w	ip, #7
 800845e:	d126      	bne.n	80084ae <st_int8_fill+0x8a>
 8008460:	f10c 0310 	add.w	r3, ip, #16
 8008464:	ea4f 1e01 	mov.w	lr, r1, lsl #4
 8008468:	eb03 1101 	add.w	r1, r3, r1, lsl #4
 800846c:	e943 4404 	strd	r4, r4, [r3, #-16]
 8008470:	e943 4402 	strd	r4, r4, [r3, #-8]
 8008474:	3310      	adds	r3, #16
 8008476:	428b      	cmp	r3, r1
 8008478:	d1f8      	bne.n	800846c <st_int8_fill+0x48>
 800847a:	f3c2 0381 	ubfx	r3, r2, #2, #2
 800847e:	44f4      	add	ip, lr
 8008480:	f002 0203 	and.w	r2, r2, #3
 8008484:	b15b      	cbz	r3, 800849e <st_int8_fill+0x7a>
 8008486:	1e59      	subs	r1, r3, #1
 8008488:	f8cc 4000 	str.w	r4, [ip]
 800848c:	d005      	beq.n	800849a <st_int8_fill+0x76>
 800848e:	2901      	cmp	r1, #1
 8008490:	f8cc 4004 	str.w	r4, [ip, #4]
 8008494:	bf18      	it	ne
 8008496:	f8cc 4008 	strne.w	r4, [ip, #8]
 800849a:	eb0c 0c83 	add.w	ip, ip, r3, lsl #2
 800849e:	b12a      	cbz	r2, 80084ac <st_int8_fill+0x88>
 80084a0:	4601      	mov	r1, r0
 80084a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80084a6:	4660      	mov	r0, ip
 80084a8:	f001 b905 	b.w	80096b6 <memset>
 80084ac:	bd10      	pop	{r4, pc}
 80084ae:	ea4f 1e01 	mov.w	lr, r1, lsl #4
 80084b2:	4663      	mov	r3, ip
 80084b4:	eb0c 1101 	add.w	r1, ip, r1, lsl #4
 80084b8:	601c      	str	r4, [r3, #0]
 80084ba:	605c      	str	r4, [r3, #4]
 80084bc:	609c      	str	r4, [r3, #8]
 80084be:	60dc      	str	r4, [r3, #12]
 80084c0:	3310      	adds	r3, #16
 80084c2:	4299      	cmp	r1, r3
 80084c4:	d1f8      	bne.n	80084b8 <st_int8_fill+0x94>
 80084c6:	f3c2 0381 	ubfx	r3, r2, #2, #2
 80084ca:	44f4      	add	ip, lr
 80084cc:	f002 0203 	and.w	r2, r2, #3
 80084d0:	e7d8      	b.n	8008484 <st_int8_fill+0x60>
 80084d2:	0893      	lsrs	r3, r2, #2
 80084d4:	f002 0203 	and.w	r2, r2, #3
 80084d8:	e7d4      	b.n	8008484 <st_int8_fill+0x60>
 80084da:	bf00      	nop

080084dc <st_int8_copy>:
 80084dc:	4288      	cmp	r0, r1
 80084de:	d056      	beq.n	800858e <st_int8_copy+0xb2>
 80084e0:	2a00      	cmp	r2, #0
 80084e2:	d054      	beq.n	800858e <st_int8_copy+0xb2>
 80084e4:	4288      	cmp	r0, r1
 80084e6:	d353      	bcc.n	8008590 <st_int8_copy+0xb4>
 80084e8:	078b      	lsls	r3, r1, #30
 80084ea:	d102      	bne.n	80084f2 <st_int8_copy+0x16>
 80084ec:	e009      	b.n	8008502 <st_int8_copy+0x26>
 80084ee:	2a00      	cmp	r2, #0
 80084f0:	d05b      	beq.n	80085aa <st_int8_copy+0xce>
 80084f2:	f910 3b01 	ldrsb.w	r3, [r0], #1
 80084f6:	f801 3b01 	strb.w	r3, [r1], #1
 80084fa:	078b      	lsls	r3, r1, #30
 80084fc:	f102 32ff 	add.w	r2, r2, #4294967295
 8008500:	d1f5      	bne.n	80084ee <st_int8_copy+0x12>
 8008502:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008506:	ea5f 1e12 	movs.w	lr, r2, lsr #4
 800850a:	d068      	beq.n	80085de <st_int8_copy+0x102>
 800850c:	ea40 0301 	orr.w	r3, r0, r1
 8008510:	075b      	lsls	r3, r3, #29
 8008512:	d14b      	bne.n	80085ac <st_int8_copy+0xd0>
 8008514:	f1be 0f01 	cmp.w	lr, #1
 8008518:	d048      	beq.n	80085ac <st_int8_copy+0xd0>
 800851a:	f100 0310 	add.w	r3, r0, #16
 800851e:	ea4f 140e 	mov.w	r4, lr, lsl #4
 8008522:	f101 0c10 	add.w	ip, r1, #16
 8008526:	eb03 1e0e 	add.w	lr, r3, lr, lsl #4
 800852a:	ed13 6b04 	vldr	d6, [r3, #-16]
 800852e:	ed13 7b02 	vldr	d7, [r3, #-8]
 8008532:	3310      	adds	r3, #16
 8008534:	4573      	cmp	r3, lr
 8008536:	ed0c 6b04 	vstr	d6, [ip, #-16]
 800853a:	ed0c 7b02 	vstr	d7, [ip, #-8]
 800853e:	f10c 0c10 	add.w	ip, ip, #16
 8008542:	d1f2      	bne.n	800852a <st_int8_copy+0x4e>
 8008544:	f3c2 0381 	ubfx	r3, r2, #2, #2
 8008548:	4421      	add	r1, r4
 800854a:	4420      	add	r0, r4
 800854c:	f002 0203 	and.w	r2, r2, #3
 8008550:	b16b      	cbz	r3, 800856e <st_int8_copy+0x92>
 8008552:	6804      	ldr	r4, [r0, #0]
 8008554:	600c      	str	r4, [r1, #0]
 8008556:	1e5c      	subs	r4, r3, #1
 8008558:	d005      	beq.n	8008566 <st_int8_copy+0x8a>
 800855a:	6845      	ldr	r5, [r0, #4]
 800855c:	604d      	str	r5, [r1, #4]
 800855e:	2c01      	cmp	r4, #1
 8008560:	bf1c      	itt	ne
 8008562:	6884      	ldrne	r4, [r0, #8]
 8008564:	608c      	strne	r4, [r1, #8]
 8008566:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 800856a:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 800856e:	b162      	cbz	r2, 800858a <st_int8_copy+0xae>
 8008570:	f990 3000 	ldrsb.w	r3, [r0]
 8008574:	700b      	strb	r3, [r1, #0]
 8008576:	3a01      	subs	r2, #1
 8008578:	d007      	beq.n	800858a <st_int8_copy+0xae>
 800857a:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800857e:	704b      	strb	r3, [r1, #1]
 8008580:	2a01      	cmp	r2, #1
 8008582:	bf1c      	itt	ne
 8008584:	f990 3002 	ldrsbne.w	r3, [r0, #2]
 8008588:	708b      	strbne	r3, [r1, #2]
 800858a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800858e:	4770      	bx	lr
 8008590:	1883      	adds	r3, r0, r2
 8008592:	428b      	cmp	r3, r1
 8008594:	d9a8      	bls.n	80084e8 <st_int8_copy+0xc>
 8008596:	4283      	cmp	r3, r0
 8008598:	440a      	add	r2, r1
 800859a:	d9f8      	bls.n	800858e <st_int8_copy+0xb2>
 800859c:	f913 1d01 	ldrsb.w	r1, [r3, #-1]!
 80085a0:	f802 1d01 	strb.w	r1, [r2, #-1]!
 80085a4:	4283      	cmp	r3, r0
 80085a6:	d1f9      	bne.n	800859c <st_int8_copy+0xc0>
 80085a8:	4770      	bx	lr
 80085aa:	4770      	bx	lr
 80085ac:	ea4f 140e 	mov.w	r4, lr, lsl #4
 80085b0:	460b      	mov	r3, r1
 80085b2:	eb01 1e0e 	add.w	lr, r1, lr, lsl #4
 80085b6:	4684      	mov	ip, r0
 80085b8:	f8dc 7000 	ldr.w	r7, [ip]
 80085bc:	f8dc 6004 	ldr.w	r6, [ip, #4]
 80085c0:	f8dc 5008 	ldr.w	r5, [ip, #8]
 80085c4:	f8dc 800c 	ldr.w	r8, [ip, #12]
 80085c8:	f8c3 800c 	str.w	r8, [r3, #12]
 80085cc:	601f      	str	r7, [r3, #0]
 80085ce:	605e      	str	r6, [r3, #4]
 80085d0:	609d      	str	r5, [r3, #8]
 80085d2:	3310      	adds	r3, #16
 80085d4:	459e      	cmp	lr, r3
 80085d6:	f10c 0c10 	add.w	ip, ip, #16
 80085da:	d1ed      	bne.n	80085b8 <st_int8_copy+0xdc>
 80085dc:	e7b2      	b.n	8008544 <st_int8_copy+0x68>
 80085de:	0893      	lsrs	r3, r2, #2
 80085e0:	f002 0203 	and.w	r2, r2, #3
 80085e4:	e7b4      	b.n	8008550 <st_int8_copy+0x74>
 80085e6:	bf00      	nop

080085e8 <ai_array_to_buffer_fmt>:
 80085e8:	f3c0 4343 	ubfx	r3, r0, #17, #4
 80085ec:	2b02      	cmp	r3, #2
 80085ee:	d053      	beq.n	8008698 <ai_array_to_buffer_fmt+0xb0>
 80085f0:	4a2c      	ldr	r2, [pc, #176]	@ (80086a4 <ai_array_to_buffer_fmt+0xbc>)
 80085f2:	f020 437e 	bic.w	r3, r0, #4261412864	@ 0xfe000000
 80085f6:	4293      	cmp	r3, r2
 80085f8:	d010      	beq.n	800861c <ai_array_to_buffer_fmt+0x34>
 80085fa:	dc21      	bgt.n	8008640 <ai_array_to_buffer_fmt+0x58>
 80085fc:	4a2a      	ldr	r2, [pc, #168]	@ (80086a8 <ai_array_to_buffer_fmt+0xc0>)
 80085fe:	4293      	cmp	r3, r2
 8008600:	d00c      	beq.n	800861c <ai_array_to_buffer_fmt+0x34>
 8008602:	dd0f      	ble.n	8008624 <ai_array_to_buffer_fmt+0x3c>
 8008604:	4a29      	ldr	r2, [pc, #164]	@ (80086ac <ai_array_to_buffer_fmt+0xc4>)
 8008606:	4293      	cmp	r3, r2
 8008608:	d008      	beq.n	800861c <ai_array_to_buffer_fmt+0x34>
 800860a:	f502 32fa 	add.w	r2, r2, #128000	@ 0x1f400
 800860e:	4293      	cmp	r3, r2
 8008610:	d004      	beq.n	800861c <ai_array_to_buffer_fmt+0x34>
 8008612:	4a27      	ldr	r2, [pc, #156]	@ (80086b0 <ai_array_to_buffer_fmt+0xc8>)
 8008614:	4293      	cmp	r3, r2
 8008616:	bf0c      	ite	eq
 8008618:	4613      	moveq	r3, r2
 800861a:	2340      	movne	r3, #64	@ 0x40
 800861c:	f000 40d0 	and.w	r0, r0, #1744830464	@ 0x68000000
 8008620:	4318      	orrs	r0, r3
 8008622:	4770      	bx	lr
 8008624:	f5a2 6280 	sub.w	r2, r2, #1024	@ 0x400
 8008628:	4293      	cmp	r3, r2
 800862a:	d0f7      	beq.n	800861c <ai_array_to_buffer_fmt+0x34>
 800862c:	dd2a      	ble.n	8008684 <ai_array_to_buffer_fmt+0x9c>
 800862e:	4a21      	ldr	r2, [pc, #132]	@ (80086b4 <ai_array_to_buffer_fmt+0xcc>)
 8008630:	f000 40d0 	and.w	r0, r0, #1744830464	@ 0x68000000
 8008634:	4293      	cmp	r3, r2
 8008636:	bf0c      	ite	eq
 8008638:	4613      	moveq	r3, r2
 800863a:	2340      	movne	r3, #64	@ 0x40
 800863c:	4318      	orrs	r0, r3
 800863e:	4770      	bx	lr
 8008640:	4a1d      	ldr	r2, [pc, #116]	@ (80086b8 <ai_array_to_buffer_fmt+0xd0>)
 8008642:	4293      	cmp	r3, r2
 8008644:	d0ea      	beq.n	800861c <ai_array_to_buffer_fmt+0x34>
 8008646:	dd0f      	ble.n	8008668 <ai_array_to_buffer_fmt+0x80>
 8008648:	4a1c      	ldr	r2, [pc, #112]	@ (80086bc <ai_array_to_buffer_fmt+0xd4>)
 800864a:	4293      	cmp	r3, r2
 800864c:	d0e6      	beq.n	800861c <ai_array_to_buffer_fmt+0x34>
 800864e:	f502 027e 	add.w	r2, r2, #16646144	@ 0xfe0000
 8008652:	4293      	cmp	r3, r2
 8008654:	d0e2      	beq.n	800861c <ai_array_to_buffer_fmt+0x34>
 8008656:	4a1a      	ldr	r2, [pc, #104]	@ (80086c0 <ai_array_to_buffer_fmt+0xd8>)
 8008658:	f000 40d0 	and.w	r0, r0, #1744830464	@ 0x68000000
 800865c:	4293      	cmp	r3, r2
 800865e:	bf0c      	ite	eq
 8008660:	4613      	moveq	r3, r2
 8008662:	2340      	movne	r3, #64	@ 0x40
 8008664:	4318      	orrs	r0, r3
 8008666:	4770      	bx	lr
 8008668:	f5a2 6280 	sub.w	r2, r2, #1024	@ 0x400
 800866c:	4293      	cmp	r3, r2
 800866e:	d0d5      	beq.n	800861c <ai_array_to_buffer_fmt+0x34>
 8008670:	3207      	adds	r2, #7
 8008672:	4293      	cmp	r3, r2
 8008674:	d0d2      	beq.n	800861c <ai_array_to_buffer_fmt+0x34>
 8008676:	f2a2 3287 	subw	r2, r2, #903	@ 0x387
 800867a:	4293      	cmp	r3, r2
 800867c:	bf0c      	ite	eq
 800867e:	4613      	moveq	r3, r2
 8008680:	2340      	movne	r3, #64	@ 0x40
 8008682:	e7cb      	b.n	800861c <ai_array_to_buffer_fmt+0x34>
 8008684:	f5a2 6280 	sub.w	r2, r2, #1024	@ 0x400
 8008688:	4293      	cmp	r3, r2
 800868a:	d0c7      	beq.n	800861c <ai_array_to_buffer_fmt+0x34>
 800868c:	3280      	adds	r2, #128	@ 0x80
 800868e:	4293      	cmp	r3, r2
 8008690:	bf0c      	ite	eq
 8008692:	4613      	moveq	r3, r2
 8008694:	2340      	movne	r3, #64	@ 0x40
 8008696:	e7c1      	b.n	800861c <ai_array_to_buffer_fmt+0x34>
 8008698:	4b0a      	ldr	r3, [pc, #40]	@ (80086c4 <ai_array_to_buffer_fmt+0xdc>)
 800869a:	4003      	ands	r3, r0
 800869c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80086a0:	e7bc      	b.n	800861c <ai_array_to_buffer_fmt+0x34>
 80086a2:	bf00      	nop
 80086a4:	00840040 	.word	0x00840040
 80086a8:	00040840 	.word	0x00040840
 80086ac:	00041040 	.word	0x00041040
 80086b0:	0004084f 	.word	0x0004084f
 80086b4:	00040447 	.word	0x00040447
 80086b8:	00840840 	.word	0x00840840
 80086bc:	00841040 	.word	0x00841040
 80086c0:	0084084f 	.word	0x0084084f
 80086c4:	00803fff 	.word	0x00803fff

080086c8 <ai_array_get_byte_size>:
 80086c8:	b319      	cbz	r1, 8008712 <ai_array_get_byte_size+0x4a>
 80086ca:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 80086ce:	fb01 f303 	mul.w	r3, r1, r3
 80086d2:	f3c0 4243 	ubfx	r2, r0, #17, #4
 80086d6:	3307      	adds	r3, #7
 80086d8:	f3c0 5141 	ubfx	r1, r0, #21, #2
 80086dc:	f023 0307 	bic.w	r3, r3, #7
 80086e0:	2a04      	cmp	r2, #4
 80086e2:	ea4f 10e0 	mov.w	r0, r0, asr #7
 80086e6:	fa23 f101 	lsr.w	r1, r3, r1
 80086ea:	d00b      	beq.n	8008704 <ai_array_get_byte_size+0x3c>
 80086ec:	2a08      	cmp	r2, #8
 80086ee:	d002      	beq.n	80086f6 <ai_array_get_byte_size+0x2e>
 80086f0:	3107      	adds	r1, #7
 80086f2:	08c8      	lsrs	r0, r1, #3
 80086f4:	4770      	bx	lr
 80086f6:	f000 007f 	and.w	r0, r0, #127	@ 0x7f
 80086fa:	eb01 2100 	add.w	r1, r1, r0, lsl #8
 80086fe:	3107      	adds	r1, #7
 8008700:	08c8      	lsrs	r0, r1, #3
 8008702:	4770      	bx	lr
 8008704:	f000 007f 	and.w	r0, r0, #127	@ 0x7f
 8008708:	eb01 1100 	add.w	r1, r1, r0, lsl #4
 800870c:	3107      	adds	r1, #7
 800870e:	08c8      	lsrs	r0, r1, #3
 8008710:	4770      	bx	lr
 8008712:	4608      	mov	r0, r1
 8008714:	4770      	bx	lr
 8008716:	bf00      	nop

08008718 <ai_array_get_data_byte_size>:
 8008718:	b169      	cbz	r1, 8008736 <ai_array_get_data_byte_size+0x1e>
 800871a:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 800871e:	fb03 f101 	mul.w	r1, r3, r1
 8008722:	1dcb      	adds	r3, r1, #7
 8008724:	f023 0307 	bic.w	r3, r3, #7
 8008728:	f3c0 5041 	ubfx	r0, r0, #21, #2
 800872c:	fa23 f000 	lsr.w	r0, r3, r0
 8008730:	3007      	adds	r0, #7
 8008732:	08c0      	lsrs	r0, r0, #3
 8008734:	4770      	bx	lr
 8008736:	4608      	mov	r0, r1
 8008738:	4770      	bx	lr
 800873a:	bf00      	nop

0800873c <ai_version_get>:
 800873c:	0212      	lsls	r2, r2, #8
 800873e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8008742:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
 8008746:	4770      	bx	lr

08008748 <ai_platform_version_get>:
 8008748:	0e02      	lsrs	r2, r0, #24
 800874a:	2300      	movs	r3, #0
 800874c:	f362 0307 	bfi	r3, r2, #0, #8
 8008750:	f3c0 4207 	ubfx	r2, r0, #16, #8
 8008754:	f362 230f 	bfi	r3, r2, #8, #8
 8008758:	f3c0 2007 	ubfx	r0, r0, #8, #8
 800875c:	f360 4317 	bfi	r3, r0, #16, #8
 8008760:	b082      	sub	sp, #8
 8008762:	f023 407f 	bic.w	r0, r3, #4278190080	@ 0xff000000
 8008766:	b002      	add	sp, #8
 8008768:	4770      	bx	lr
 800876a:	bf00      	nop

0800876c <get_tensor_byte_size>:
 800876c:	b410      	push	{r4}
 800876e:	6983      	ldr	r3, [r0, #24]
 8008770:	68c4      	ldr	r4, [r0, #12]
 8008772:	6941      	ldr	r1, [r0, #20]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	68e0      	ldr	r0, [r4, #12]
 8008778:	4a07      	ldr	r2, [pc, #28]	@ (8008798 <get_tensor_byte_size+0x2c>)
 800877a:	68c9      	ldr	r1, [r1, #12]
 800877c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008780:	f023 437e 	bic.w	r3, r3, #4261412864	@ 0xfe000000
 8008784:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8008788:	fb01 f000 	mul.w	r0, r1, r0
 800878c:	4293      	cmp	r3, r2
 800878e:	bf04      	itt	eq
 8008790:	3007      	addeq	r0, #7
 8008792:	08c0      	lsreq	r0, r0, #3
 8008794:	4770      	bx	lr
 8008796:	bf00      	nop
 8008798:	000400c0 	.word	0x000400c0

0800879c <malloc>:
 800879c:	4b02      	ldr	r3, [pc, #8]	@ (80087a8 <malloc+0xc>)
 800879e:	4601      	mov	r1, r0
 80087a0:	6818      	ldr	r0, [r3, #0]
 80087a2:	f000 b82d 	b.w	8008800 <_malloc_r>
 80087a6:	bf00      	nop
 80087a8:	20003f94 	.word	0x20003f94

080087ac <free>:
 80087ac:	4b02      	ldr	r3, [pc, #8]	@ (80087b8 <free+0xc>)
 80087ae:	4601      	mov	r1, r0
 80087b0:	6818      	ldr	r0, [r3, #0]
 80087b2:	f001 bef9 	b.w	800a5a8 <_free_r>
 80087b6:	bf00      	nop
 80087b8:	20003f94 	.word	0x20003f94

080087bc <sbrk_aligned>:
 80087bc:	b570      	push	{r4, r5, r6, lr}
 80087be:	4e0f      	ldr	r6, [pc, #60]	@ (80087fc <sbrk_aligned+0x40>)
 80087c0:	460c      	mov	r4, r1
 80087c2:	6831      	ldr	r1, [r6, #0]
 80087c4:	4605      	mov	r5, r0
 80087c6:	b911      	cbnz	r1, 80087ce <sbrk_aligned+0x12>
 80087c8:	f001 f824 	bl	8009814 <_sbrk_r>
 80087cc:	6030      	str	r0, [r6, #0]
 80087ce:	4621      	mov	r1, r4
 80087d0:	4628      	mov	r0, r5
 80087d2:	f001 f81f 	bl	8009814 <_sbrk_r>
 80087d6:	1c43      	adds	r3, r0, #1
 80087d8:	d103      	bne.n	80087e2 <sbrk_aligned+0x26>
 80087da:	f04f 34ff 	mov.w	r4, #4294967295
 80087de:	4620      	mov	r0, r4
 80087e0:	bd70      	pop	{r4, r5, r6, pc}
 80087e2:	1cc4      	adds	r4, r0, #3
 80087e4:	f024 0403 	bic.w	r4, r4, #3
 80087e8:	42a0      	cmp	r0, r4
 80087ea:	d0f8      	beq.n	80087de <sbrk_aligned+0x22>
 80087ec:	1a21      	subs	r1, r4, r0
 80087ee:	4628      	mov	r0, r5
 80087f0:	f001 f810 	bl	8009814 <_sbrk_r>
 80087f4:	3001      	adds	r0, #1
 80087f6:	d1f2      	bne.n	80087de <sbrk_aligned+0x22>
 80087f8:	e7ef      	b.n	80087da <sbrk_aligned+0x1e>
 80087fa:	bf00      	nop
 80087fc:	2000441c 	.word	0x2000441c

08008800 <_malloc_r>:
 8008800:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008804:	1ccd      	adds	r5, r1, #3
 8008806:	f025 0503 	bic.w	r5, r5, #3
 800880a:	3508      	adds	r5, #8
 800880c:	2d0c      	cmp	r5, #12
 800880e:	bf38      	it	cc
 8008810:	250c      	movcc	r5, #12
 8008812:	2d00      	cmp	r5, #0
 8008814:	4606      	mov	r6, r0
 8008816:	db01      	blt.n	800881c <_malloc_r+0x1c>
 8008818:	42a9      	cmp	r1, r5
 800881a:	d904      	bls.n	8008826 <_malloc_r+0x26>
 800881c:	230c      	movs	r3, #12
 800881e:	6033      	str	r3, [r6, #0]
 8008820:	2000      	movs	r0, #0
 8008822:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008826:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80088fc <_malloc_r+0xfc>
 800882a:	f000 f869 	bl	8008900 <__malloc_lock>
 800882e:	f8d8 3000 	ldr.w	r3, [r8]
 8008832:	461c      	mov	r4, r3
 8008834:	bb44      	cbnz	r4, 8008888 <_malloc_r+0x88>
 8008836:	4629      	mov	r1, r5
 8008838:	4630      	mov	r0, r6
 800883a:	f7ff ffbf 	bl	80087bc <sbrk_aligned>
 800883e:	1c43      	adds	r3, r0, #1
 8008840:	4604      	mov	r4, r0
 8008842:	d158      	bne.n	80088f6 <_malloc_r+0xf6>
 8008844:	f8d8 4000 	ldr.w	r4, [r8]
 8008848:	4627      	mov	r7, r4
 800884a:	2f00      	cmp	r7, #0
 800884c:	d143      	bne.n	80088d6 <_malloc_r+0xd6>
 800884e:	2c00      	cmp	r4, #0
 8008850:	d04b      	beq.n	80088ea <_malloc_r+0xea>
 8008852:	6823      	ldr	r3, [r4, #0]
 8008854:	4639      	mov	r1, r7
 8008856:	4630      	mov	r0, r6
 8008858:	eb04 0903 	add.w	r9, r4, r3
 800885c:	f000 ffda 	bl	8009814 <_sbrk_r>
 8008860:	4581      	cmp	r9, r0
 8008862:	d142      	bne.n	80088ea <_malloc_r+0xea>
 8008864:	6821      	ldr	r1, [r4, #0]
 8008866:	1a6d      	subs	r5, r5, r1
 8008868:	4629      	mov	r1, r5
 800886a:	4630      	mov	r0, r6
 800886c:	f7ff ffa6 	bl	80087bc <sbrk_aligned>
 8008870:	3001      	adds	r0, #1
 8008872:	d03a      	beq.n	80088ea <_malloc_r+0xea>
 8008874:	6823      	ldr	r3, [r4, #0]
 8008876:	442b      	add	r3, r5
 8008878:	6023      	str	r3, [r4, #0]
 800887a:	f8d8 3000 	ldr.w	r3, [r8]
 800887e:	685a      	ldr	r2, [r3, #4]
 8008880:	bb62      	cbnz	r2, 80088dc <_malloc_r+0xdc>
 8008882:	f8c8 7000 	str.w	r7, [r8]
 8008886:	e00f      	b.n	80088a8 <_malloc_r+0xa8>
 8008888:	6822      	ldr	r2, [r4, #0]
 800888a:	1b52      	subs	r2, r2, r5
 800888c:	d420      	bmi.n	80088d0 <_malloc_r+0xd0>
 800888e:	2a0b      	cmp	r2, #11
 8008890:	d917      	bls.n	80088c2 <_malloc_r+0xc2>
 8008892:	1961      	adds	r1, r4, r5
 8008894:	42a3      	cmp	r3, r4
 8008896:	6025      	str	r5, [r4, #0]
 8008898:	bf18      	it	ne
 800889a:	6059      	strne	r1, [r3, #4]
 800889c:	6863      	ldr	r3, [r4, #4]
 800889e:	bf08      	it	eq
 80088a0:	f8c8 1000 	streq.w	r1, [r8]
 80088a4:	5162      	str	r2, [r4, r5]
 80088a6:	604b      	str	r3, [r1, #4]
 80088a8:	4630      	mov	r0, r6
 80088aa:	f000 f82f 	bl	800890c <__malloc_unlock>
 80088ae:	f104 000b 	add.w	r0, r4, #11
 80088b2:	1d23      	adds	r3, r4, #4
 80088b4:	f020 0007 	bic.w	r0, r0, #7
 80088b8:	1ac2      	subs	r2, r0, r3
 80088ba:	bf1c      	itt	ne
 80088bc:	1a1b      	subne	r3, r3, r0
 80088be:	50a3      	strne	r3, [r4, r2]
 80088c0:	e7af      	b.n	8008822 <_malloc_r+0x22>
 80088c2:	6862      	ldr	r2, [r4, #4]
 80088c4:	42a3      	cmp	r3, r4
 80088c6:	bf0c      	ite	eq
 80088c8:	f8c8 2000 	streq.w	r2, [r8]
 80088cc:	605a      	strne	r2, [r3, #4]
 80088ce:	e7eb      	b.n	80088a8 <_malloc_r+0xa8>
 80088d0:	4623      	mov	r3, r4
 80088d2:	6864      	ldr	r4, [r4, #4]
 80088d4:	e7ae      	b.n	8008834 <_malloc_r+0x34>
 80088d6:	463c      	mov	r4, r7
 80088d8:	687f      	ldr	r7, [r7, #4]
 80088da:	e7b6      	b.n	800884a <_malloc_r+0x4a>
 80088dc:	461a      	mov	r2, r3
 80088de:	685b      	ldr	r3, [r3, #4]
 80088e0:	42a3      	cmp	r3, r4
 80088e2:	d1fb      	bne.n	80088dc <_malloc_r+0xdc>
 80088e4:	2300      	movs	r3, #0
 80088e6:	6053      	str	r3, [r2, #4]
 80088e8:	e7de      	b.n	80088a8 <_malloc_r+0xa8>
 80088ea:	230c      	movs	r3, #12
 80088ec:	6033      	str	r3, [r6, #0]
 80088ee:	4630      	mov	r0, r6
 80088f0:	f000 f80c 	bl	800890c <__malloc_unlock>
 80088f4:	e794      	b.n	8008820 <_malloc_r+0x20>
 80088f6:	6005      	str	r5, [r0, #0]
 80088f8:	e7d6      	b.n	80088a8 <_malloc_r+0xa8>
 80088fa:	bf00      	nop
 80088fc:	20004420 	.word	0x20004420

08008900 <__malloc_lock>:
 8008900:	4801      	ldr	r0, [pc, #4]	@ (8008908 <__malloc_lock+0x8>)
 8008902:	f000 bfd4 	b.w	80098ae <__retarget_lock_acquire_recursive>
 8008906:	bf00      	nop
 8008908:	20004564 	.word	0x20004564

0800890c <__malloc_unlock>:
 800890c:	4801      	ldr	r0, [pc, #4]	@ (8008914 <__malloc_unlock+0x8>)
 800890e:	f000 bfcf 	b.w	80098b0 <__retarget_lock_release_recursive>
 8008912:	bf00      	nop
 8008914:	20004564 	.word	0x20004564

08008918 <srand>:
 8008918:	b538      	push	{r3, r4, r5, lr}
 800891a:	4b10      	ldr	r3, [pc, #64]	@ (800895c <srand+0x44>)
 800891c:	681d      	ldr	r5, [r3, #0]
 800891e:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8008920:	4604      	mov	r4, r0
 8008922:	b9b3      	cbnz	r3, 8008952 <srand+0x3a>
 8008924:	2018      	movs	r0, #24
 8008926:	f7fb f8e7 	bl	8003af8 <__wrap_malloc>
 800892a:	4602      	mov	r2, r0
 800892c:	6328      	str	r0, [r5, #48]	@ 0x30
 800892e:	b920      	cbnz	r0, 800893a <srand+0x22>
 8008930:	4b0b      	ldr	r3, [pc, #44]	@ (8008960 <srand+0x48>)
 8008932:	480c      	ldr	r0, [pc, #48]	@ (8008964 <srand+0x4c>)
 8008934:	2146      	movs	r1, #70	@ 0x46
 8008936:	f000 ffcb 	bl	80098d0 <__assert_func>
 800893a:	490b      	ldr	r1, [pc, #44]	@ (8008968 <srand+0x50>)
 800893c:	4b0b      	ldr	r3, [pc, #44]	@ (800896c <srand+0x54>)
 800893e:	e9c0 1300 	strd	r1, r3, [r0]
 8008942:	4b0b      	ldr	r3, [pc, #44]	@ (8008970 <srand+0x58>)
 8008944:	6083      	str	r3, [r0, #8]
 8008946:	230b      	movs	r3, #11
 8008948:	8183      	strh	r3, [r0, #12]
 800894a:	2100      	movs	r1, #0
 800894c:	2001      	movs	r0, #1
 800894e:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8008952:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8008954:	2200      	movs	r2, #0
 8008956:	611c      	str	r4, [r3, #16]
 8008958:	615a      	str	r2, [r3, #20]
 800895a:	bd38      	pop	{r3, r4, r5, pc}
 800895c:	20003f94 	.word	0x20003f94
 8008960:	080123ac 	.word	0x080123ac
 8008964:	080123c3 	.word	0x080123c3
 8008968:	abcd330e 	.word	0xabcd330e
 800896c:	e66d1234 	.word	0xe66d1234
 8008970:	0005deec 	.word	0x0005deec

08008974 <_strtol_l.constprop.0>:
 8008974:	2b24      	cmp	r3, #36	@ 0x24
 8008976:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800897a:	4686      	mov	lr, r0
 800897c:	4690      	mov	r8, r2
 800897e:	d801      	bhi.n	8008984 <_strtol_l.constprop.0+0x10>
 8008980:	2b01      	cmp	r3, #1
 8008982:	d106      	bne.n	8008992 <_strtol_l.constprop.0+0x1e>
 8008984:	f000 ff68 	bl	8009858 <__errno>
 8008988:	2316      	movs	r3, #22
 800898a:	6003      	str	r3, [r0, #0]
 800898c:	2000      	movs	r0, #0
 800898e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008992:	4834      	ldr	r0, [pc, #208]	@ (8008a64 <_strtol_l.constprop.0+0xf0>)
 8008994:	460d      	mov	r5, r1
 8008996:	462a      	mov	r2, r5
 8008998:	f815 4b01 	ldrb.w	r4, [r5], #1
 800899c:	5d06      	ldrb	r6, [r0, r4]
 800899e:	f016 0608 	ands.w	r6, r6, #8
 80089a2:	d1f8      	bne.n	8008996 <_strtol_l.constprop.0+0x22>
 80089a4:	2c2d      	cmp	r4, #45	@ 0x2d
 80089a6:	d12d      	bne.n	8008a04 <_strtol_l.constprop.0+0x90>
 80089a8:	782c      	ldrb	r4, [r5, #0]
 80089aa:	2601      	movs	r6, #1
 80089ac:	1c95      	adds	r5, r2, #2
 80089ae:	f033 0210 	bics.w	r2, r3, #16
 80089b2:	d109      	bne.n	80089c8 <_strtol_l.constprop.0+0x54>
 80089b4:	2c30      	cmp	r4, #48	@ 0x30
 80089b6:	d12a      	bne.n	8008a0e <_strtol_l.constprop.0+0x9a>
 80089b8:	782a      	ldrb	r2, [r5, #0]
 80089ba:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80089be:	2a58      	cmp	r2, #88	@ 0x58
 80089c0:	d125      	bne.n	8008a0e <_strtol_l.constprop.0+0x9a>
 80089c2:	786c      	ldrb	r4, [r5, #1]
 80089c4:	2310      	movs	r3, #16
 80089c6:	3502      	adds	r5, #2
 80089c8:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80089cc:	f10c 3cff 	add.w	ip, ip, #4294967295
 80089d0:	2200      	movs	r2, #0
 80089d2:	fbbc f9f3 	udiv	r9, ip, r3
 80089d6:	4610      	mov	r0, r2
 80089d8:	fb03 ca19 	mls	sl, r3, r9, ip
 80089dc:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80089e0:	2f09      	cmp	r7, #9
 80089e2:	d81b      	bhi.n	8008a1c <_strtol_l.constprop.0+0xa8>
 80089e4:	463c      	mov	r4, r7
 80089e6:	42a3      	cmp	r3, r4
 80089e8:	dd27      	ble.n	8008a3a <_strtol_l.constprop.0+0xc6>
 80089ea:	1c57      	adds	r7, r2, #1
 80089ec:	d007      	beq.n	80089fe <_strtol_l.constprop.0+0x8a>
 80089ee:	4581      	cmp	r9, r0
 80089f0:	d320      	bcc.n	8008a34 <_strtol_l.constprop.0+0xc0>
 80089f2:	d101      	bne.n	80089f8 <_strtol_l.constprop.0+0x84>
 80089f4:	45a2      	cmp	sl, r4
 80089f6:	db1d      	blt.n	8008a34 <_strtol_l.constprop.0+0xc0>
 80089f8:	fb00 4003 	mla	r0, r0, r3, r4
 80089fc:	2201      	movs	r2, #1
 80089fe:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008a02:	e7eb      	b.n	80089dc <_strtol_l.constprop.0+0x68>
 8008a04:	2c2b      	cmp	r4, #43	@ 0x2b
 8008a06:	bf04      	itt	eq
 8008a08:	782c      	ldrbeq	r4, [r5, #0]
 8008a0a:	1c95      	addeq	r5, r2, #2
 8008a0c:	e7cf      	b.n	80089ae <_strtol_l.constprop.0+0x3a>
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d1da      	bne.n	80089c8 <_strtol_l.constprop.0+0x54>
 8008a12:	2c30      	cmp	r4, #48	@ 0x30
 8008a14:	bf0c      	ite	eq
 8008a16:	2308      	moveq	r3, #8
 8008a18:	230a      	movne	r3, #10
 8008a1a:	e7d5      	b.n	80089c8 <_strtol_l.constprop.0+0x54>
 8008a1c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8008a20:	2f19      	cmp	r7, #25
 8008a22:	d801      	bhi.n	8008a28 <_strtol_l.constprop.0+0xb4>
 8008a24:	3c37      	subs	r4, #55	@ 0x37
 8008a26:	e7de      	b.n	80089e6 <_strtol_l.constprop.0+0x72>
 8008a28:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8008a2c:	2f19      	cmp	r7, #25
 8008a2e:	d804      	bhi.n	8008a3a <_strtol_l.constprop.0+0xc6>
 8008a30:	3c57      	subs	r4, #87	@ 0x57
 8008a32:	e7d8      	b.n	80089e6 <_strtol_l.constprop.0+0x72>
 8008a34:	f04f 32ff 	mov.w	r2, #4294967295
 8008a38:	e7e1      	b.n	80089fe <_strtol_l.constprop.0+0x8a>
 8008a3a:	1c53      	adds	r3, r2, #1
 8008a3c:	d108      	bne.n	8008a50 <_strtol_l.constprop.0+0xdc>
 8008a3e:	2322      	movs	r3, #34	@ 0x22
 8008a40:	f8ce 3000 	str.w	r3, [lr]
 8008a44:	4660      	mov	r0, ip
 8008a46:	f1b8 0f00 	cmp.w	r8, #0
 8008a4a:	d0a0      	beq.n	800898e <_strtol_l.constprop.0+0x1a>
 8008a4c:	1e69      	subs	r1, r5, #1
 8008a4e:	e006      	b.n	8008a5e <_strtol_l.constprop.0+0xea>
 8008a50:	b106      	cbz	r6, 8008a54 <_strtol_l.constprop.0+0xe0>
 8008a52:	4240      	negs	r0, r0
 8008a54:	f1b8 0f00 	cmp.w	r8, #0
 8008a58:	d099      	beq.n	800898e <_strtol_l.constprop.0+0x1a>
 8008a5a:	2a00      	cmp	r2, #0
 8008a5c:	d1f6      	bne.n	8008a4c <_strtol_l.constprop.0+0xd8>
 8008a5e:	f8c8 1000 	str.w	r1, [r8]
 8008a62:	e794      	b.n	800898e <_strtol_l.constprop.0+0x1a>
 8008a64:	0801241c 	.word	0x0801241c

08008a68 <strtol>:
 8008a68:	4613      	mov	r3, r2
 8008a6a:	460a      	mov	r2, r1
 8008a6c:	4601      	mov	r1, r0
 8008a6e:	4802      	ldr	r0, [pc, #8]	@ (8008a78 <strtol+0x10>)
 8008a70:	6800      	ldr	r0, [r0, #0]
 8008a72:	f7ff bf7f 	b.w	8008974 <_strtol_l.constprop.0>
 8008a76:	bf00      	nop
 8008a78:	20003f94 	.word	0x20003f94

08008a7c <__cvt>:
 8008a7c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008a80:	ec57 6b10 	vmov	r6, r7, d0
 8008a84:	2f00      	cmp	r7, #0
 8008a86:	460c      	mov	r4, r1
 8008a88:	4619      	mov	r1, r3
 8008a8a:	463b      	mov	r3, r7
 8008a8c:	bfbb      	ittet	lt
 8008a8e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8008a92:	461f      	movlt	r7, r3
 8008a94:	2300      	movge	r3, #0
 8008a96:	232d      	movlt	r3, #45	@ 0x2d
 8008a98:	700b      	strb	r3, [r1, #0]
 8008a9a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008a9c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8008aa0:	4691      	mov	r9, r2
 8008aa2:	f023 0820 	bic.w	r8, r3, #32
 8008aa6:	bfbc      	itt	lt
 8008aa8:	4632      	movlt	r2, r6
 8008aaa:	4616      	movlt	r6, r2
 8008aac:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008ab0:	d005      	beq.n	8008abe <__cvt+0x42>
 8008ab2:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8008ab6:	d100      	bne.n	8008aba <__cvt+0x3e>
 8008ab8:	3401      	adds	r4, #1
 8008aba:	2102      	movs	r1, #2
 8008abc:	e000      	b.n	8008ac0 <__cvt+0x44>
 8008abe:	2103      	movs	r1, #3
 8008ac0:	ab03      	add	r3, sp, #12
 8008ac2:	9301      	str	r3, [sp, #4]
 8008ac4:	ab02      	add	r3, sp, #8
 8008ac6:	9300      	str	r3, [sp, #0]
 8008ac8:	ec47 6b10 	vmov	d0, r6, r7
 8008acc:	4653      	mov	r3, sl
 8008ace:	4622      	mov	r2, r4
 8008ad0:	f000 ffa6 	bl	8009a20 <_dtoa_r>
 8008ad4:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8008ad8:	4605      	mov	r5, r0
 8008ada:	d119      	bne.n	8008b10 <__cvt+0x94>
 8008adc:	f019 0f01 	tst.w	r9, #1
 8008ae0:	d00e      	beq.n	8008b00 <__cvt+0x84>
 8008ae2:	eb00 0904 	add.w	r9, r0, r4
 8008ae6:	2200      	movs	r2, #0
 8008ae8:	2300      	movs	r3, #0
 8008aea:	4630      	mov	r0, r6
 8008aec:	4639      	mov	r1, r7
 8008aee:	f7f7 ffeb 	bl	8000ac8 <__aeabi_dcmpeq>
 8008af2:	b108      	cbz	r0, 8008af8 <__cvt+0x7c>
 8008af4:	f8cd 900c 	str.w	r9, [sp, #12]
 8008af8:	2230      	movs	r2, #48	@ 0x30
 8008afa:	9b03      	ldr	r3, [sp, #12]
 8008afc:	454b      	cmp	r3, r9
 8008afe:	d31e      	bcc.n	8008b3e <__cvt+0xc2>
 8008b00:	9b03      	ldr	r3, [sp, #12]
 8008b02:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008b04:	1b5b      	subs	r3, r3, r5
 8008b06:	4628      	mov	r0, r5
 8008b08:	6013      	str	r3, [r2, #0]
 8008b0a:	b004      	add	sp, #16
 8008b0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b10:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008b14:	eb00 0904 	add.w	r9, r0, r4
 8008b18:	d1e5      	bne.n	8008ae6 <__cvt+0x6a>
 8008b1a:	7803      	ldrb	r3, [r0, #0]
 8008b1c:	2b30      	cmp	r3, #48	@ 0x30
 8008b1e:	d10a      	bne.n	8008b36 <__cvt+0xba>
 8008b20:	2200      	movs	r2, #0
 8008b22:	2300      	movs	r3, #0
 8008b24:	4630      	mov	r0, r6
 8008b26:	4639      	mov	r1, r7
 8008b28:	f7f7 ffce 	bl	8000ac8 <__aeabi_dcmpeq>
 8008b2c:	b918      	cbnz	r0, 8008b36 <__cvt+0xba>
 8008b2e:	f1c4 0401 	rsb	r4, r4, #1
 8008b32:	f8ca 4000 	str.w	r4, [sl]
 8008b36:	f8da 3000 	ldr.w	r3, [sl]
 8008b3a:	4499      	add	r9, r3
 8008b3c:	e7d3      	b.n	8008ae6 <__cvt+0x6a>
 8008b3e:	1c59      	adds	r1, r3, #1
 8008b40:	9103      	str	r1, [sp, #12]
 8008b42:	701a      	strb	r2, [r3, #0]
 8008b44:	e7d9      	b.n	8008afa <__cvt+0x7e>

08008b46 <__exponent>:
 8008b46:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008b48:	2900      	cmp	r1, #0
 8008b4a:	bfba      	itte	lt
 8008b4c:	4249      	neglt	r1, r1
 8008b4e:	232d      	movlt	r3, #45	@ 0x2d
 8008b50:	232b      	movge	r3, #43	@ 0x2b
 8008b52:	2909      	cmp	r1, #9
 8008b54:	7002      	strb	r2, [r0, #0]
 8008b56:	7043      	strb	r3, [r0, #1]
 8008b58:	dd29      	ble.n	8008bae <__exponent+0x68>
 8008b5a:	f10d 0307 	add.w	r3, sp, #7
 8008b5e:	461d      	mov	r5, r3
 8008b60:	270a      	movs	r7, #10
 8008b62:	461a      	mov	r2, r3
 8008b64:	fbb1 f6f7 	udiv	r6, r1, r7
 8008b68:	fb07 1416 	mls	r4, r7, r6, r1
 8008b6c:	3430      	adds	r4, #48	@ 0x30
 8008b6e:	f802 4c01 	strb.w	r4, [r2, #-1]
 8008b72:	460c      	mov	r4, r1
 8008b74:	2c63      	cmp	r4, #99	@ 0x63
 8008b76:	f103 33ff 	add.w	r3, r3, #4294967295
 8008b7a:	4631      	mov	r1, r6
 8008b7c:	dcf1      	bgt.n	8008b62 <__exponent+0x1c>
 8008b7e:	3130      	adds	r1, #48	@ 0x30
 8008b80:	1e94      	subs	r4, r2, #2
 8008b82:	f803 1c01 	strb.w	r1, [r3, #-1]
 8008b86:	1c41      	adds	r1, r0, #1
 8008b88:	4623      	mov	r3, r4
 8008b8a:	42ab      	cmp	r3, r5
 8008b8c:	d30a      	bcc.n	8008ba4 <__exponent+0x5e>
 8008b8e:	f10d 0309 	add.w	r3, sp, #9
 8008b92:	1a9b      	subs	r3, r3, r2
 8008b94:	42ac      	cmp	r4, r5
 8008b96:	bf88      	it	hi
 8008b98:	2300      	movhi	r3, #0
 8008b9a:	3302      	adds	r3, #2
 8008b9c:	4403      	add	r3, r0
 8008b9e:	1a18      	subs	r0, r3, r0
 8008ba0:	b003      	add	sp, #12
 8008ba2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008ba4:	f813 6b01 	ldrb.w	r6, [r3], #1
 8008ba8:	f801 6f01 	strb.w	r6, [r1, #1]!
 8008bac:	e7ed      	b.n	8008b8a <__exponent+0x44>
 8008bae:	2330      	movs	r3, #48	@ 0x30
 8008bb0:	3130      	adds	r1, #48	@ 0x30
 8008bb2:	7083      	strb	r3, [r0, #2]
 8008bb4:	70c1      	strb	r1, [r0, #3]
 8008bb6:	1d03      	adds	r3, r0, #4
 8008bb8:	e7f1      	b.n	8008b9e <__exponent+0x58>
	...

08008bbc <_printf_float>:
 8008bbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bc0:	b08d      	sub	sp, #52	@ 0x34
 8008bc2:	460c      	mov	r4, r1
 8008bc4:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8008bc8:	4616      	mov	r6, r2
 8008bca:	461f      	mov	r7, r3
 8008bcc:	4605      	mov	r5, r0
 8008bce:	f000 fde9 	bl	80097a4 <_localeconv_r>
 8008bd2:	6803      	ldr	r3, [r0, #0]
 8008bd4:	9304      	str	r3, [sp, #16]
 8008bd6:	4618      	mov	r0, r3
 8008bd8:	f7f7 fb4a 	bl	8000270 <strlen>
 8008bdc:	2300      	movs	r3, #0
 8008bde:	930a      	str	r3, [sp, #40]	@ 0x28
 8008be0:	f8d8 3000 	ldr.w	r3, [r8]
 8008be4:	9005      	str	r0, [sp, #20]
 8008be6:	3307      	adds	r3, #7
 8008be8:	f023 0307 	bic.w	r3, r3, #7
 8008bec:	f103 0208 	add.w	r2, r3, #8
 8008bf0:	f894 a018 	ldrb.w	sl, [r4, #24]
 8008bf4:	f8d4 b000 	ldr.w	fp, [r4]
 8008bf8:	f8c8 2000 	str.w	r2, [r8]
 8008bfc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008c00:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8008c04:	9307      	str	r3, [sp, #28]
 8008c06:	f8cd 8018 	str.w	r8, [sp, #24]
 8008c0a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8008c0e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008c12:	4b9c      	ldr	r3, [pc, #624]	@ (8008e84 <_printf_float+0x2c8>)
 8008c14:	f04f 32ff 	mov.w	r2, #4294967295
 8008c18:	f7f7 ff88 	bl	8000b2c <__aeabi_dcmpun>
 8008c1c:	bb70      	cbnz	r0, 8008c7c <_printf_float+0xc0>
 8008c1e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008c22:	4b98      	ldr	r3, [pc, #608]	@ (8008e84 <_printf_float+0x2c8>)
 8008c24:	f04f 32ff 	mov.w	r2, #4294967295
 8008c28:	f7f7 ff62 	bl	8000af0 <__aeabi_dcmple>
 8008c2c:	bb30      	cbnz	r0, 8008c7c <_printf_float+0xc0>
 8008c2e:	2200      	movs	r2, #0
 8008c30:	2300      	movs	r3, #0
 8008c32:	4640      	mov	r0, r8
 8008c34:	4649      	mov	r1, r9
 8008c36:	f7f7 ff51 	bl	8000adc <__aeabi_dcmplt>
 8008c3a:	b110      	cbz	r0, 8008c42 <_printf_float+0x86>
 8008c3c:	232d      	movs	r3, #45	@ 0x2d
 8008c3e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008c42:	4a91      	ldr	r2, [pc, #580]	@ (8008e88 <_printf_float+0x2cc>)
 8008c44:	4b91      	ldr	r3, [pc, #580]	@ (8008e8c <_printf_float+0x2d0>)
 8008c46:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8008c4a:	bf94      	ite	ls
 8008c4c:	4690      	movls	r8, r2
 8008c4e:	4698      	movhi	r8, r3
 8008c50:	2303      	movs	r3, #3
 8008c52:	6123      	str	r3, [r4, #16]
 8008c54:	f02b 0304 	bic.w	r3, fp, #4
 8008c58:	6023      	str	r3, [r4, #0]
 8008c5a:	f04f 0900 	mov.w	r9, #0
 8008c5e:	9700      	str	r7, [sp, #0]
 8008c60:	4633      	mov	r3, r6
 8008c62:	aa0b      	add	r2, sp, #44	@ 0x2c
 8008c64:	4621      	mov	r1, r4
 8008c66:	4628      	mov	r0, r5
 8008c68:	f000 f9d2 	bl	8009010 <_printf_common>
 8008c6c:	3001      	adds	r0, #1
 8008c6e:	f040 808d 	bne.w	8008d8c <_printf_float+0x1d0>
 8008c72:	f04f 30ff 	mov.w	r0, #4294967295
 8008c76:	b00d      	add	sp, #52	@ 0x34
 8008c78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c7c:	4642      	mov	r2, r8
 8008c7e:	464b      	mov	r3, r9
 8008c80:	4640      	mov	r0, r8
 8008c82:	4649      	mov	r1, r9
 8008c84:	f7f7 ff52 	bl	8000b2c <__aeabi_dcmpun>
 8008c88:	b140      	cbz	r0, 8008c9c <_printf_float+0xe0>
 8008c8a:	464b      	mov	r3, r9
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	bfbc      	itt	lt
 8008c90:	232d      	movlt	r3, #45	@ 0x2d
 8008c92:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8008c96:	4a7e      	ldr	r2, [pc, #504]	@ (8008e90 <_printf_float+0x2d4>)
 8008c98:	4b7e      	ldr	r3, [pc, #504]	@ (8008e94 <_printf_float+0x2d8>)
 8008c9a:	e7d4      	b.n	8008c46 <_printf_float+0x8a>
 8008c9c:	6863      	ldr	r3, [r4, #4]
 8008c9e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8008ca2:	9206      	str	r2, [sp, #24]
 8008ca4:	1c5a      	adds	r2, r3, #1
 8008ca6:	d13b      	bne.n	8008d20 <_printf_float+0x164>
 8008ca8:	2306      	movs	r3, #6
 8008caa:	6063      	str	r3, [r4, #4]
 8008cac:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8008cb0:	2300      	movs	r3, #0
 8008cb2:	6022      	str	r2, [r4, #0]
 8008cb4:	9303      	str	r3, [sp, #12]
 8008cb6:	ab0a      	add	r3, sp, #40	@ 0x28
 8008cb8:	e9cd a301 	strd	sl, r3, [sp, #4]
 8008cbc:	ab09      	add	r3, sp, #36	@ 0x24
 8008cbe:	9300      	str	r3, [sp, #0]
 8008cc0:	6861      	ldr	r1, [r4, #4]
 8008cc2:	ec49 8b10 	vmov	d0, r8, r9
 8008cc6:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8008cca:	4628      	mov	r0, r5
 8008ccc:	f7ff fed6 	bl	8008a7c <__cvt>
 8008cd0:	9b06      	ldr	r3, [sp, #24]
 8008cd2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008cd4:	2b47      	cmp	r3, #71	@ 0x47
 8008cd6:	4680      	mov	r8, r0
 8008cd8:	d129      	bne.n	8008d2e <_printf_float+0x172>
 8008cda:	1cc8      	adds	r0, r1, #3
 8008cdc:	db02      	blt.n	8008ce4 <_printf_float+0x128>
 8008cde:	6863      	ldr	r3, [r4, #4]
 8008ce0:	4299      	cmp	r1, r3
 8008ce2:	dd41      	ble.n	8008d68 <_printf_float+0x1ac>
 8008ce4:	f1aa 0a02 	sub.w	sl, sl, #2
 8008ce8:	fa5f fa8a 	uxtb.w	sl, sl
 8008cec:	3901      	subs	r1, #1
 8008cee:	4652      	mov	r2, sl
 8008cf0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8008cf4:	9109      	str	r1, [sp, #36]	@ 0x24
 8008cf6:	f7ff ff26 	bl	8008b46 <__exponent>
 8008cfa:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008cfc:	1813      	adds	r3, r2, r0
 8008cfe:	2a01      	cmp	r2, #1
 8008d00:	4681      	mov	r9, r0
 8008d02:	6123      	str	r3, [r4, #16]
 8008d04:	dc02      	bgt.n	8008d0c <_printf_float+0x150>
 8008d06:	6822      	ldr	r2, [r4, #0]
 8008d08:	07d2      	lsls	r2, r2, #31
 8008d0a:	d501      	bpl.n	8008d10 <_printf_float+0x154>
 8008d0c:	3301      	adds	r3, #1
 8008d0e:	6123      	str	r3, [r4, #16]
 8008d10:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d0a2      	beq.n	8008c5e <_printf_float+0xa2>
 8008d18:	232d      	movs	r3, #45	@ 0x2d
 8008d1a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008d1e:	e79e      	b.n	8008c5e <_printf_float+0xa2>
 8008d20:	9a06      	ldr	r2, [sp, #24]
 8008d22:	2a47      	cmp	r2, #71	@ 0x47
 8008d24:	d1c2      	bne.n	8008cac <_printf_float+0xf0>
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d1c0      	bne.n	8008cac <_printf_float+0xf0>
 8008d2a:	2301      	movs	r3, #1
 8008d2c:	e7bd      	b.n	8008caa <_printf_float+0xee>
 8008d2e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008d32:	d9db      	bls.n	8008cec <_printf_float+0x130>
 8008d34:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8008d38:	d118      	bne.n	8008d6c <_printf_float+0x1b0>
 8008d3a:	2900      	cmp	r1, #0
 8008d3c:	6863      	ldr	r3, [r4, #4]
 8008d3e:	dd0b      	ble.n	8008d58 <_printf_float+0x19c>
 8008d40:	6121      	str	r1, [r4, #16]
 8008d42:	b913      	cbnz	r3, 8008d4a <_printf_float+0x18e>
 8008d44:	6822      	ldr	r2, [r4, #0]
 8008d46:	07d0      	lsls	r0, r2, #31
 8008d48:	d502      	bpl.n	8008d50 <_printf_float+0x194>
 8008d4a:	3301      	adds	r3, #1
 8008d4c:	440b      	add	r3, r1
 8008d4e:	6123      	str	r3, [r4, #16]
 8008d50:	65a1      	str	r1, [r4, #88]	@ 0x58
 8008d52:	f04f 0900 	mov.w	r9, #0
 8008d56:	e7db      	b.n	8008d10 <_printf_float+0x154>
 8008d58:	b913      	cbnz	r3, 8008d60 <_printf_float+0x1a4>
 8008d5a:	6822      	ldr	r2, [r4, #0]
 8008d5c:	07d2      	lsls	r2, r2, #31
 8008d5e:	d501      	bpl.n	8008d64 <_printf_float+0x1a8>
 8008d60:	3302      	adds	r3, #2
 8008d62:	e7f4      	b.n	8008d4e <_printf_float+0x192>
 8008d64:	2301      	movs	r3, #1
 8008d66:	e7f2      	b.n	8008d4e <_printf_float+0x192>
 8008d68:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8008d6c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008d6e:	4299      	cmp	r1, r3
 8008d70:	db05      	blt.n	8008d7e <_printf_float+0x1c2>
 8008d72:	6823      	ldr	r3, [r4, #0]
 8008d74:	6121      	str	r1, [r4, #16]
 8008d76:	07d8      	lsls	r0, r3, #31
 8008d78:	d5ea      	bpl.n	8008d50 <_printf_float+0x194>
 8008d7a:	1c4b      	adds	r3, r1, #1
 8008d7c:	e7e7      	b.n	8008d4e <_printf_float+0x192>
 8008d7e:	2900      	cmp	r1, #0
 8008d80:	bfd4      	ite	le
 8008d82:	f1c1 0202 	rsble	r2, r1, #2
 8008d86:	2201      	movgt	r2, #1
 8008d88:	4413      	add	r3, r2
 8008d8a:	e7e0      	b.n	8008d4e <_printf_float+0x192>
 8008d8c:	6823      	ldr	r3, [r4, #0]
 8008d8e:	055a      	lsls	r2, r3, #21
 8008d90:	d407      	bmi.n	8008da2 <_printf_float+0x1e6>
 8008d92:	6923      	ldr	r3, [r4, #16]
 8008d94:	4642      	mov	r2, r8
 8008d96:	4631      	mov	r1, r6
 8008d98:	4628      	mov	r0, r5
 8008d9a:	47b8      	blx	r7
 8008d9c:	3001      	adds	r0, #1
 8008d9e:	d12b      	bne.n	8008df8 <_printf_float+0x23c>
 8008da0:	e767      	b.n	8008c72 <_printf_float+0xb6>
 8008da2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008da6:	f240 80dd 	bls.w	8008f64 <_printf_float+0x3a8>
 8008daa:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008dae:	2200      	movs	r2, #0
 8008db0:	2300      	movs	r3, #0
 8008db2:	f7f7 fe89 	bl	8000ac8 <__aeabi_dcmpeq>
 8008db6:	2800      	cmp	r0, #0
 8008db8:	d033      	beq.n	8008e22 <_printf_float+0x266>
 8008dba:	4a37      	ldr	r2, [pc, #220]	@ (8008e98 <_printf_float+0x2dc>)
 8008dbc:	2301      	movs	r3, #1
 8008dbe:	4631      	mov	r1, r6
 8008dc0:	4628      	mov	r0, r5
 8008dc2:	47b8      	blx	r7
 8008dc4:	3001      	adds	r0, #1
 8008dc6:	f43f af54 	beq.w	8008c72 <_printf_float+0xb6>
 8008dca:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8008dce:	4543      	cmp	r3, r8
 8008dd0:	db02      	blt.n	8008dd8 <_printf_float+0x21c>
 8008dd2:	6823      	ldr	r3, [r4, #0]
 8008dd4:	07d8      	lsls	r0, r3, #31
 8008dd6:	d50f      	bpl.n	8008df8 <_printf_float+0x23c>
 8008dd8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008ddc:	4631      	mov	r1, r6
 8008dde:	4628      	mov	r0, r5
 8008de0:	47b8      	blx	r7
 8008de2:	3001      	adds	r0, #1
 8008de4:	f43f af45 	beq.w	8008c72 <_printf_float+0xb6>
 8008de8:	f04f 0900 	mov.w	r9, #0
 8008dec:	f108 38ff 	add.w	r8, r8, #4294967295
 8008df0:	f104 0a1a 	add.w	sl, r4, #26
 8008df4:	45c8      	cmp	r8, r9
 8008df6:	dc09      	bgt.n	8008e0c <_printf_float+0x250>
 8008df8:	6823      	ldr	r3, [r4, #0]
 8008dfa:	079b      	lsls	r3, r3, #30
 8008dfc:	f100 8103 	bmi.w	8009006 <_printf_float+0x44a>
 8008e00:	68e0      	ldr	r0, [r4, #12]
 8008e02:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008e04:	4298      	cmp	r0, r3
 8008e06:	bfb8      	it	lt
 8008e08:	4618      	movlt	r0, r3
 8008e0a:	e734      	b.n	8008c76 <_printf_float+0xba>
 8008e0c:	2301      	movs	r3, #1
 8008e0e:	4652      	mov	r2, sl
 8008e10:	4631      	mov	r1, r6
 8008e12:	4628      	mov	r0, r5
 8008e14:	47b8      	blx	r7
 8008e16:	3001      	adds	r0, #1
 8008e18:	f43f af2b 	beq.w	8008c72 <_printf_float+0xb6>
 8008e1c:	f109 0901 	add.w	r9, r9, #1
 8008e20:	e7e8      	b.n	8008df4 <_printf_float+0x238>
 8008e22:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	dc39      	bgt.n	8008e9c <_printf_float+0x2e0>
 8008e28:	4a1b      	ldr	r2, [pc, #108]	@ (8008e98 <_printf_float+0x2dc>)
 8008e2a:	2301      	movs	r3, #1
 8008e2c:	4631      	mov	r1, r6
 8008e2e:	4628      	mov	r0, r5
 8008e30:	47b8      	blx	r7
 8008e32:	3001      	adds	r0, #1
 8008e34:	f43f af1d 	beq.w	8008c72 <_printf_float+0xb6>
 8008e38:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8008e3c:	ea59 0303 	orrs.w	r3, r9, r3
 8008e40:	d102      	bne.n	8008e48 <_printf_float+0x28c>
 8008e42:	6823      	ldr	r3, [r4, #0]
 8008e44:	07d9      	lsls	r1, r3, #31
 8008e46:	d5d7      	bpl.n	8008df8 <_printf_float+0x23c>
 8008e48:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008e4c:	4631      	mov	r1, r6
 8008e4e:	4628      	mov	r0, r5
 8008e50:	47b8      	blx	r7
 8008e52:	3001      	adds	r0, #1
 8008e54:	f43f af0d 	beq.w	8008c72 <_printf_float+0xb6>
 8008e58:	f04f 0a00 	mov.w	sl, #0
 8008e5c:	f104 0b1a 	add.w	fp, r4, #26
 8008e60:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008e62:	425b      	negs	r3, r3
 8008e64:	4553      	cmp	r3, sl
 8008e66:	dc01      	bgt.n	8008e6c <_printf_float+0x2b0>
 8008e68:	464b      	mov	r3, r9
 8008e6a:	e793      	b.n	8008d94 <_printf_float+0x1d8>
 8008e6c:	2301      	movs	r3, #1
 8008e6e:	465a      	mov	r2, fp
 8008e70:	4631      	mov	r1, r6
 8008e72:	4628      	mov	r0, r5
 8008e74:	47b8      	blx	r7
 8008e76:	3001      	adds	r0, #1
 8008e78:	f43f aefb 	beq.w	8008c72 <_printf_float+0xb6>
 8008e7c:	f10a 0a01 	add.w	sl, sl, #1
 8008e80:	e7ee      	b.n	8008e60 <_printf_float+0x2a4>
 8008e82:	bf00      	nop
 8008e84:	7fefffff 	.word	0x7fefffff
 8008e88:	0801251c 	.word	0x0801251c
 8008e8c:	08012520 	.word	0x08012520
 8008e90:	08012524 	.word	0x08012524
 8008e94:	08012528 	.word	0x08012528
 8008e98:	0801252c 	.word	0x0801252c
 8008e9c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008e9e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008ea2:	4553      	cmp	r3, sl
 8008ea4:	bfa8      	it	ge
 8008ea6:	4653      	movge	r3, sl
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	4699      	mov	r9, r3
 8008eac:	dc36      	bgt.n	8008f1c <_printf_float+0x360>
 8008eae:	f04f 0b00 	mov.w	fp, #0
 8008eb2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008eb6:	f104 021a 	add.w	r2, r4, #26
 8008eba:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008ebc:	9306      	str	r3, [sp, #24]
 8008ebe:	eba3 0309 	sub.w	r3, r3, r9
 8008ec2:	455b      	cmp	r3, fp
 8008ec4:	dc31      	bgt.n	8008f2a <_printf_float+0x36e>
 8008ec6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008ec8:	459a      	cmp	sl, r3
 8008eca:	dc3a      	bgt.n	8008f42 <_printf_float+0x386>
 8008ecc:	6823      	ldr	r3, [r4, #0]
 8008ece:	07da      	lsls	r2, r3, #31
 8008ed0:	d437      	bmi.n	8008f42 <_printf_float+0x386>
 8008ed2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008ed4:	ebaa 0903 	sub.w	r9, sl, r3
 8008ed8:	9b06      	ldr	r3, [sp, #24]
 8008eda:	ebaa 0303 	sub.w	r3, sl, r3
 8008ede:	4599      	cmp	r9, r3
 8008ee0:	bfa8      	it	ge
 8008ee2:	4699      	movge	r9, r3
 8008ee4:	f1b9 0f00 	cmp.w	r9, #0
 8008ee8:	dc33      	bgt.n	8008f52 <_printf_float+0x396>
 8008eea:	f04f 0800 	mov.w	r8, #0
 8008eee:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008ef2:	f104 0b1a 	add.w	fp, r4, #26
 8008ef6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008ef8:	ebaa 0303 	sub.w	r3, sl, r3
 8008efc:	eba3 0309 	sub.w	r3, r3, r9
 8008f00:	4543      	cmp	r3, r8
 8008f02:	f77f af79 	ble.w	8008df8 <_printf_float+0x23c>
 8008f06:	2301      	movs	r3, #1
 8008f08:	465a      	mov	r2, fp
 8008f0a:	4631      	mov	r1, r6
 8008f0c:	4628      	mov	r0, r5
 8008f0e:	47b8      	blx	r7
 8008f10:	3001      	adds	r0, #1
 8008f12:	f43f aeae 	beq.w	8008c72 <_printf_float+0xb6>
 8008f16:	f108 0801 	add.w	r8, r8, #1
 8008f1a:	e7ec      	b.n	8008ef6 <_printf_float+0x33a>
 8008f1c:	4642      	mov	r2, r8
 8008f1e:	4631      	mov	r1, r6
 8008f20:	4628      	mov	r0, r5
 8008f22:	47b8      	blx	r7
 8008f24:	3001      	adds	r0, #1
 8008f26:	d1c2      	bne.n	8008eae <_printf_float+0x2f2>
 8008f28:	e6a3      	b.n	8008c72 <_printf_float+0xb6>
 8008f2a:	2301      	movs	r3, #1
 8008f2c:	4631      	mov	r1, r6
 8008f2e:	4628      	mov	r0, r5
 8008f30:	9206      	str	r2, [sp, #24]
 8008f32:	47b8      	blx	r7
 8008f34:	3001      	adds	r0, #1
 8008f36:	f43f ae9c 	beq.w	8008c72 <_printf_float+0xb6>
 8008f3a:	9a06      	ldr	r2, [sp, #24]
 8008f3c:	f10b 0b01 	add.w	fp, fp, #1
 8008f40:	e7bb      	b.n	8008eba <_printf_float+0x2fe>
 8008f42:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008f46:	4631      	mov	r1, r6
 8008f48:	4628      	mov	r0, r5
 8008f4a:	47b8      	blx	r7
 8008f4c:	3001      	adds	r0, #1
 8008f4e:	d1c0      	bne.n	8008ed2 <_printf_float+0x316>
 8008f50:	e68f      	b.n	8008c72 <_printf_float+0xb6>
 8008f52:	9a06      	ldr	r2, [sp, #24]
 8008f54:	464b      	mov	r3, r9
 8008f56:	4442      	add	r2, r8
 8008f58:	4631      	mov	r1, r6
 8008f5a:	4628      	mov	r0, r5
 8008f5c:	47b8      	blx	r7
 8008f5e:	3001      	adds	r0, #1
 8008f60:	d1c3      	bne.n	8008eea <_printf_float+0x32e>
 8008f62:	e686      	b.n	8008c72 <_printf_float+0xb6>
 8008f64:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008f68:	f1ba 0f01 	cmp.w	sl, #1
 8008f6c:	dc01      	bgt.n	8008f72 <_printf_float+0x3b6>
 8008f6e:	07db      	lsls	r3, r3, #31
 8008f70:	d536      	bpl.n	8008fe0 <_printf_float+0x424>
 8008f72:	2301      	movs	r3, #1
 8008f74:	4642      	mov	r2, r8
 8008f76:	4631      	mov	r1, r6
 8008f78:	4628      	mov	r0, r5
 8008f7a:	47b8      	blx	r7
 8008f7c:	3001      	adds	r0, #1
 8008f7e:	f43f ae78 	beq.w	8008c72 <_printf_float+0xb6>
 8008f82:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008f86:	4631      	mov	r1, r6
 8008f88:	4628      	mov	r0, r5
 8008f8a:	47b8      	blx	r7
 8008f8c:	3001      	adds	r0, #1
 8008f8e:	f43f ae70 	beq.w	8008c72 <_printf_float+0xb6>
 8008f92:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008f96:	2200      	movs	r2, #0
 8008f98:	2300      	movs	r3, #0
 8008f9a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008f9e:	f7f7 fd93 	bl	8000ac8 <__aeabi_dcmpeq>
 8008fa2:	b9c0      	cbnz	r0, 8008fd6 <_printf_float+0x41a>
 8008fa4:	4653      	mov	r3, sl
 8008fa6:	f108 0201 	add.w	r2, r8, #1
 8008faa:	4631      	mov	r1, r6
 8008fac:	4628      	mov	r0, r5
 8008fae:	47b8      	blx	r7
 8008fb0:	3001      	adds	r0, #1
 8008fb2:	d10c      	bne.n	8008fce <_printf_float+0x412>
 8008fb4:	e65d      	b.n	8008c72 <_printf_float+0xb6>
 8008fb6:	2301      	movs	r3, #1
 8008fb8:	465a      	mov	r2, fp
 8008fba:	4631      	mov	r1, r6
 8008fbc:	4628      	mov	r0, r5
 8008fbe:	47b8      	blx	r7
 8008fc0:	3001      	adds	r0, #1
 8008fc2:	f43f ae56 	beq.w	8008c72 <_printf_float+0xb6>
 8008fc6:	f108 0801 	add.w	r8, r8, #1
 8008fca:	45d0      	cmp	r8, sl
 8008fcc:	dbf3      	blt.n	8008fb6 <_printf_float+0x3fa>
 8008fce:	464b      	mov	r3, r9
 8008fd0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8008fd4:	e6df      	b.n	8008d96 <_printf_float+0x1da>
 8008fd6:	f04f 0800 	mov.w	r8, #0
 8008fda:	f104 0b1a 	add.w	fp, r4, #26
 8008fde:	e7f4      	b.n	8008fca <_printf_float+0x40e>
 8008fe0:	2301      	movs	r3, #1
 8008fe2:	4642      	mov	r2, r8
 8008fe4:	e7e1      	b.n	8008faa <_printf_float+0x3ee>
 8008fe6:	2301      	movs	r3, #1
 8008fe8:	464a      	mov	r2, r9
 8008fea:	4631      	mov	r1, r6
 8008fec:	4628      	mov	r0, r5
 8008fee:	47b8      	blx	r7
 8008ff0:	3001      	adds	r0, #1
 8008ff2:	f43f ae3e 	beq.w	8008c72 <_printf_float+0xb6>
 8008ff6:	f108 0801 	add.w	r8, r8, #1
 8008ffa:	68e3      	ldr	r3, [r4, #12]
 8008ffc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008ffe:	1a5b      	subs	r3, r3, r1
 8009000:	4543      	cmp	r3, r8
 8009002:	dcf0      	bgt.n	8008fe6 <_printf_float+0x42a>
 8009004:	e6fc      	b.n	8008e00 <_printf_float+0x244>
 8009006:	f04f 0800 	mov.w	r8, #0
 800900a:	f104 0919 	add.w	r9, r4, #25
 800900e:	e7f4      	b.n	8008ffa <_printf_float+0x43e>

08009010 <_printf_common>:
 8009010:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009014:	4616      	mov	r6, r2
 8009016:	4698      	mov	r8, r3
 8009018:	688a      	ldr	r2, [r1, #8]
 800901a:	690b      	ldr	r3, [r1, #16]
 800901c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009020:	4293      	cmp	r3, r2
 8009022:	bfb8      	it	lt
 8009024:	4613      	movlt	r3, r2
 8009026:	6033      	str	r3, [r6, #0]
 8009028:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800902c:	4607      	mov	r7, r0
 800902e:	460c      	mov	r4, r1
 8009030:	b10a      	cbz	r2, 8009036 <_printf_common+0x26>
 8009032:	3301      	adds	r3, #1
 8009034:	6033      	str	r3, [r6, #0]
 8009036:	6823      	ldr	r3, [r4, #0]
 8009038:	0699      	lsls	r1, r3, #26
 800903a:	bf42      	ittt	mi
 800903c:	6833      	ldrmi	r3, [r6, #0]
 800903e:	3302      	addmi	r3, #2
 8009040:	6033      	strmi	r3, [r6, #0]
 8009042:	6825      	ldr	r5, [r4, #0]
 8009044:	f015 0506 	ands.w	r5, r5, #6
 8009048:	d106      	bne.n	8009058 <_printf_common+0x48>
 800904a:	f104 0a19 	add.w	sl, r4, #25
 800904e:	68e3      	ldr	r3, [r4, #12]
 8009050:	6832      	ldr	r2, [r6, #0]
 8009052:	1a9b      	subs	r3, r3, r2
 8009054:	42ab      	cmp	r3, r5
 8009056:	dc26      	bgt.n	80090a6 <_printf_common+0x96>
 8009058:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800905c:	6822      	ldr	r2, [r4, #0]
 800905e:	3b00      	subs	r3, #0
 8009060:	bf18      	it	ne
 8009062:	2301      	movne	r3, #1
 8009064:	0692      	lsls	r2, r2, #26
 8009066:	d42b      	bmi.n	80090c0 <_printf_common+0xb0>
 8009068:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800906c:	4641      	mov	r1, r8
 800906e:	4638      	mov	r0, r7
 8009070:	47c8      	blx	r9
 8009072:	3001      	adds	r0, #1
 8009074:	d01e      	beq.n	80090b4 <_printf_common+0xa4>
 8009076:	6823      	ldr	r3, [r4, #0]
 8009078:	6922      	ldr	r2, [r4, #16]
 800907a:	f003 0306 	and.w	r3, r3, #6
 800907e:	2b04      	cmp	r3, #4
 8009080:	bf02      	ittt	eq
 8009082:	68e5      	ldreq	r5, [r4, #12]
 8009084:	6833      	ldreq	r3, [r6, #0]
 8009086:	1aed      	subeq	r5, r5, r3
 8009088:	68a3      	ldr	r3, [r4, #8]
 800908a:	bf0c      	ite	eq
 800908c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009090:	2500      	movne	r5, #0
 8009092:	4293      	cmp	r3, r2
 8009094:	bfc4      	itt	gt
 8009096:	1a9b      	subgt	r3, r3, r2
 8009098:	18ed      	addgt	r5, r5, r3
 800909a:	2600      	movs	r6, #0
 800909c:	341a      	adds	r4, #26
 800909e:	42b5      	cmp	r5, r6
 80090a0:	d11a      	bne.n	80090d8 <_printf_common+0xc8>
 80090a2:	2000      	movs	r0, #0
 80090a4:	e008      	b.n	80090b8 <_printf_common+0xa8>
 80090a6:	2301      	movs	r3, #1
 80090a8:	4652      	mov	r2, sl
 80090aa:	4641      	mov	r1, r8
 80090ac:	4638      	mov	r0, r7
 80090ae:	47c8      	blx	r9
 80090b0:	3001      	adds	r0, #1
 80090b2:	d103      	bne.n	80090bc <_printf_common+0xac>
 80090b4:	f04f 30ff 	mov.w	r0, #4294967295
 80090b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80090bc:	3501      	adds	r5, #1
 80090be:	e7c6      	b.n	800904e <_printf_common+0x3e>
 80090c0:	18e1      	adds	r1, r4, r3
 80090c2:	1c5a      	adds	r2, r3, #1
 80090c4:	2030      	movs	r0, #48	@ 0x30
 80090c6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80090ca:	4422      	add	r2, r4
 80090cc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80090d0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80090d4:	3302      	adds	r3, #2
 80090d6:	e7c7      	b.n	8009068 <_printf_common+0x58>
 80090d8:	2301      	movs	r3, #1
 80090da:	4622      	mov	r2, r4
 80090dc:	4641      	mov	r1, r8
 80090de:	4638      	mov	r0, r7
 80090e0:	47c8      	blx	r9
 80090e2:	3001      	adds	r0, #1
 80090e4:	d0e6      	beq.n	80090b4 <_printf_common+0xa4>
 80090e6:	3601      	adds	r6, #1
 80090e8:	e7d9      	b.n	800909e <_printf_common+0x8e>
	...

080090ec <_printf_i>:
 80090ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80090f0:	7e0f      	ldrb	r7, [r1, #24]
 80090f2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80090f4:	2f78      	cmp	r7, #120	@ 0x78
 80090f6:	4691      	mov	r9, r2
 80090f8:	4680      	mov	r8, r0
 80090fa:	460c      	mov	r4, r1
 80090fc:	469a      	mov	sl, r3
 80090fe:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009102:	d807      	bhi.n	8009114 <_printf_i+0x28>
 8009104:	2f62      	cmp	r7, #98	@ 0x62
 8009106:	d80a      	bhi.n	800911e <_printf_i+0x32>
 8009108:	2f00      	cmp	r7, #0
 800910a:	f000 80d2 	beq.w	80092b2 <_printf_i+0x1c6>
 800910e:	2f58      	cmp	r7, #88	@ 0x58
 8009110:	f000 80b9 	beq.w	8009286 <_printf_i+0x19a>
 8009114:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009118:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800911c:	e03a      	b.n	8009194 <_printf_i+0xa8>
 800911e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009122:	2b15      	cmp	r3, #21
 8009124:	d8f6      	bhi.n	8009114 <_printf_i+0x28>
 8009126:	a101      	add	r1, pc, #4	@ (adr r1, 800912c <_printf_i+0x40>)
 8009128:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800912c:	08009185 	.word	0x08009185
 8009130:	08009199 	.word	0x08009199
 8009134:	08009115 	.word	0x08009115
 8009138:	08009115 	.word	0x08009115
 800913c:	08009115 	.word	0x08009115
 8009140:	08009115 	.word	0x08009115
 8009144:	08009199 	.word	0x08009199
 8009148:	08009115 	.word	0x08009115
 800914c:	08009115 	.word	0x08009115
 8009150:	08009115 	.word	0x08009115
 8009154:	08009115 	.word	0x08009115
 8009158:	08009299 	.word	0x08009299
 800915c:	080091c3 	.word	0x080091c3
 8009160:	08009253 	.word	0x08009253
 8009164:	08009115 	.word	0x08009115
 8009168:	08009115 	.word	0x08009115
 800916c:	080092bb 	.word	0x080092bb
 8009170:	08009115 	.word	0x08009115
 8009174:	080091c3 	.word	0x080091c3
 8009178:	08009115 	.word	0x08009115
 800917c:	08009115 	.word	0x08009115
 8009180:	0800925b 	.word	0x0800925b
 8009184:	6833      	ldr	r3, [r6, #0]
 8009186:	1d1a      	adds	r2, r3, #4
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	6032      	str	r2, [r6, #0]
 800918c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009190:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009194:	2301      	movs	r3, #1
 8009196:	e09d      	b.n	80092d4 <_printf_i+0x1e8>
 8009198:	6833      	ldr	r3, [r6, #0]
 800919a:	6820      	ldr	r0, [r4, #0]
 800919c:	1d19      	adds	r1, r3, #4
 800919e:	6031      	str	r1, [r6, #0]
 80091a0:	0606      	lsls	r6, r0, #24
 80091a2:	d501      	bpl.n	80091a8 <_printf_i+0xbc>
 80091a4:	681d      	ldr	r5, [r3, #0]
 80091a6:	e003      	b.n	80091b0 <_printf_i+0xc4>
 80091a8:	0645      	lsls	r5, r0, #25
 80091aa:	d5fb      	bpl.n	80091a4 <_printf_i+0xb8>
 80091ac:	f9b3 5000 	ldrsh.w	r5, [r3]
 80091b0:	2d00      	cmp	r5, #0
 80091b2:	da03      	bge.n	80091bc <_printf_i+0xd0>
 80091b4:	232d      	movs	r3, #45	@ 0x2d
 80091b6:	426d      	negs	r5, r5
 80091b8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80091bc:	4859      	ldr	r0, [pc, #356]	@ (8009324 <_printf_i+0x238>)
 80091be:	230a      	movs	r3, #10
 80091c0:	e011      	b.n	80091e6 <_printf_i+0xfa>
 80091c2:	6821      	ldr	r1, [r4, #0]
 80091c4:	6833      	ldr	r3, [r6, #0]
 80091c6:	0608      	lsls	r0, r1, #24
 80091c8:	f853 5b04 	ldr.w	r5, [r3], #4
 80091cc:	d402      	bmi.n	80091d4 <_printf_i+0xe8>
 80091ce:	0649      	lsls	r1, r1, #25
 80091d0:	bf48      	it	mi
 80091d2:	b2ad      	uxthmi	r5, r5
 80091d4:	2f6f      	cmp	r7, #111	@ 0x6f
 80091d6:	4853      	ldr	r0, [pc, #332]	@ (8009324 <_printf_i+0x238>)
 80091d8:	6033      	str	r3, [r6, #0]
 80091da:	bf14      	ite	ne
 80091dc:	230a      	movne	r3, #10
 80091de:	2308      	moveq	r3, #8
 80091e0:	2100      	movs	r1, #0
 80091e2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80091e6:	6866      	ldr	r6, [r4, #4]
 80091e8:	60a6      	str	r6, [r4, #8]
 80091ea:	2e00      	cmp	r6, #0
 80091ec:	bfa2      	ittt	ge
 80091ee:	6821      	ldrge	r1, [r4, #0]
 80091f0:	f021 0104 	bicge.w	r1, r1, #4
 80091f4:	6021      	strge	r1, [r4, #0]
 80091f6:	b90d      	cbnz	r5, 80091fc <_printf_i+0x110>
 80091f8:	2e00      	cmp	r6, #0
 80091fa:	d04b      	beq.n	8009294 <_printf_i+0x1a8>
 80091fc:	4616      	mov	r6, r2
 80091fe:	fbb5 f1f3 	udiv	r1, r5, r3
 8009202:	fb03 5711 	mls	r7, r3, r1, r5
 8009206:	5dc7      	ldrb	r7, [r0, r7]
 8009208:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800920c:	462f      	mov	r7, r5
 800920e:	42bb      	cmp	r3, r7
 8009210:	460d      	mov	r5, r1
 8009212:	d9f4      	bls.n	80091fe <_printf_i+0x112>
 8009214:	2b08      	cmp	r3, #8
 8009216:	d10b      	bne.n	8009230 <_printf_i+0x144>
 8009218:	6823      	ldr	r3, [r4, #0]
 800921a:	07df      	lsls	r7, r3, #31
 800921c:	d508      	bpl.n	8009230 <_printf_i+0x144>
 800921e:	6923      	ldr	r3, [r4, #16]
 8009220:	6861      	ldr	r1, [r4, #4]
 8009222:	4299      	cmp	r1, r3
 8009224:	bfde      	ittt	le
 8009226:	2330      	movle	r3, #48	@ 0x30
 8009228:	f806 3c01 	strble.w	r3, [r6, #-1]
 800922c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009230:	1b92      	subs	r2, r2, r6
 8009232:	6122      	str	r2, [r4, #16]
 8009234:	f8cd a000 	str.w	sl, [sp]
 8009238:	464b      	mov	r3, r9
 800923a:	aa03      	add	r2, sp, #12
 800923c:	4621      	mov	r1, r4
 800923e:	4640      	mov	r0, r8
 8009240:	f7ff fee6 	bl	8009010 <_printf_common>
 8009244:	3001      	adds	r0, #1
 8009246:	d14a      	bne.n	80092de <_printf_i+0x1f2>
 8009248:	f04f 30ff 	mov.w	r0, #4294967295
 800924c:	b004      	add	sp, #16
 800924e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009252:	6823      	ldr	r3, [r4, #0]
 8009254:	f043 0320 	orr.w	r3, r3, #32
 8009258:	6023      	str	r3, [r4, #0]
 800925a:	4833      	ldr	r0, [pc, #204]	@ (8009328 <_printf_i+0x23c>)
 800925c:	2778      	movs	r7, #120	@ 0x78
 800925e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009262:	6823      	ldr	r3, [r4, #0]
 8009264:	6831      	ldr	r1, [r6, #0]
 8009266:	061f      	lsls	r7, r3, #24
 8009268:	f851 5b04 	ldr.w	r5, [r1], #4
 800926c:	d402      	bmi.n	8009274 <_printf_i+0x188>
 800926e:	065f      	lsls	r7, r3, #25
 8009270:	bf48      	it	mi
 8009272:	b2ad      	uxthmi	r5, r5
 8009274:	6031      	str	r1, [r6, #0]
 8009276:	07d9      	lsls	r1, r3, #31
 8009278:	bf44      	itt	mi
 800927a:	f043 0320 	orrmi.w	r3, r3, #32
 800927e:	6023      	strmi	r3, [r4, #0]
 8009280:	b11d      	cbz	r5, 800928a <_printf_i+0x19e>
 8009282:	2310      	movs	r3, #16
 8009284:	e7ac      	b.n	80091e0 <_printf_i+0xf4>
 8009286:	4827      	ldr	r0, [pc, #156]	@ (8009324 <_printf_i+0x238>)
 8009288:	e7e9      	b.n	800925e <_printf_i+0x172>
 800928a:	6823      	ldr	r3, [r4, #0]
 800928c:	f023 0320 	bic.w	r3, r3, #32
 8009290:	6023      	str	r3, [r4, #0]
 8009292:	e7f6      	b.n	8009282 <_printf_i+0x196>
 8009294:	4616      	mov	r6, r2
 8009296:	e7bd      	b.n	8009214 <_printf_i+0x128>
 8009298:	6833      	ldr	r3, [r6, #0]
 800929a:	6825      	ldr	r5, [r4, #0]
 800929c:	6961      	ldr	r1, [r4, #20]
 800929e:	1d18      	adds	r0, r3, #4
 80092a0:	6030      	str	r0, [r6, #0]
 80092a2:	062e      	lsls	r6, r5, #24
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	d501      	bpl.n	80092ac <_printf_i+0x1c0>
 80092a8:	6019      	str	r1, [r3, #0]
 80092aa:	e002      	b.n	80092b2 <_printf_i+0x1c6>
 80092ac:	0668      	lsls	r0, r5, #25
 80092ae:	d5fb      	bpl.n	80092a8 <_printf_i+0x1bc>
 80092b0:	8019      	strh	r1, [r3, #0]
 80092b2:	2300      	movs	r3, #0
 80092b4:	6123      	str	r3, [r4, #16]
 80092b6:	4616      	mov	r6, r2
 80092b8:	e7bc      	b.n	8009234 <_printf_i+0x148>
 80092ba:	6833      	ldr	r3, [r6, #0]
 80092bc:	1d1a      	adds	r2, r3, #4
 80092be:	6032      	str	r2, [r6, #0]
 80092c0:	681e      	ldr	r6, [r3, #0]
 80092c2:	6862      	ldr	r2, [r4, #4]
 80092c4:	2100      	movs	r1, #0
 80092c6:	4630      	mov	r0, r6
 80092c8:	f7f6 ff82 	bl	80001d0 <memchr>
 80092cc:	b108      	cbz	r0, 80092d2 <_printf_i+0x1e6>
 80092ce:	1b80      	subs	r0, r0, r6
 80092d0:	6060      	str	r0, [r4, #4]
 80092d2:	6863      	ldr	r3, [r4, #4]
 80092d4:	6123      	str	r3, [r4, #16]
 80092d6:	2300      	movs	r3, #0
 80092d8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80092dc:	e7aa      	b.n	8009234 <_printf_i+0x148>
 80092de:	6923      	ldr	r3, [r4, #16]
 80092e0:	4632      	mov	r2, r6
 80092e2:	4649      	mov	r1, r9
 80092e4:	4640      	mov	r0, r8
 80092e6:	47d0      	blx	sl
 80092e8:	3001      	adds	r0, #1
 80092ea:	d0ad      	beq.n	8009248 <_printf_i+0x15c>
 80092ec:	6823      	ldr	r3, [r4, #0]
 80092ee:	079b      	lsls	r3, r3, #30
 80092f0:	d413      	bmi.n	800931a <_printf_i+0x22e>
 80092f2:	68e0      	ldr	r0, [r4, #12]
 80092f4:	9b03      	ldr	r3, [sp, #12]
 80092f6:	4298      	cmp	r0, r3
 80092f8:	bfb8      	it	lt
 80092fa:	4618      	movlt	r0, r3
 80092fc:	e7a6      	b.n	800924c <_printf_i+0x160>
 80092fe:	2301      	movs	r3, #1
 8009300:	4632      	mov	r2, r6
 8009302:	4649      	mov	r1, r9
 8009304:	4640      	mov	r0, r8
 8009306:	47d0      	blx	sl
 8009308:	3001      	adds	r0, #1
 800930a:	d09d      	beq.n	8009248 <_printf_i+0x15c>
 800930c:	3501      	adds	r5, #1
 800930e:	68e3      	ldr	r3, [r4, #12]
 8009310:	9903      	ldr	r1, [sp, #12]
 8009312:	1a5b      	subs	r3, r3, r1
 8009314:	42ab      	cmp	r3, r5
 8009316:	dcf2      	bgt.n	80092fe <_printf_i+0x212>
 8009318:	e7eb      	b.n	80092f2 <_printf_i+0x206>
 800931a:	2500      	movs	r5, #0
 800931c:	f104 0619 	add.w	r6, r4, #25
 8009320:	e7f5      	b.n	800930e <_printf_i+0x222>
 8009322:	bf00      	nop
 8009324:	0801252e 	.word	0x0801252e
 8009328:	0801253f 	.word	0x0801253f

0800932c <__sflush_r>:
 800932c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009330:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009334:	0716      	lsls	r6, r2, #28
 8009336:	4605      	mov	r5, r0
 8009338:	460c      	mov	r4, r1
 800933a:	d454      	bmi.n	80093e6 <__sflush_r+0xba>
 800933c:	684b      	ldr	r3, [r1, #4]
 800933e:	2b00      	cmp	r3, #0
 8009340:	dc02      	bgt.n	8009348 <__sflush_r+0x1c>
 8009342:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009344:	2b00      	cmp	r3, #0
 8009346:	dd48      	ble.n	80093da <__sflush_r+0xae>
 8009348:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800934a:	2e00      	cmp	r6, #0
 800934c:	d045      	beq.n	80093da <__sflush_r+0xae>
 800934e:	2300      	movs	r3, #0
 8009350:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009354:	682f      	ldr	r7, [r5, #0]
 8009356:	6a21      	ldr	r1, [r4, #32]
 8009358:	602b      	str	r3, [r5, #0]
 800935a:	d030      	beq.n	80093be <__sflush_r+0x92>
 800935c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800935e:	89a3      	ldrh	r3, [r4, #12]
 8009360:	0759      	lsls	r1, r3, #29
 8009362:	d505      	bpl.n	8009370 <__sflush_r+0x44>
 8009364:	6863      	ldr	r3, [r4, #4]
 8009366:	1ad2      	subs	r2, r2, r3
 8009368:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800936a:	b10b      	cbz	r3, 8009370 <__sflush_r+0x44>
 800936c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800936e:	1ad2      	subs	r2, r2, r3
 8009370:	2300      	movs	r3, #0
 8009372:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009374:	6a21      	ldr	r1, [r4, #32]
 8009376:	4628      	mov	r0, r5
 8009378:	47b0      	blx	r6
 800937a:	1c43      	adds	r3, r0, #1
 800937c:	89a3      	ldrh	r3, [r4, #12]
 800937e:	d106      	bne.n	800938e <__sflush_r+0x62>
 8009380:	6829      	ldr	r1, [r5, #0]
 8009382:	291d      	cmp	r1, #29
 8009384:	d82b      	bhi.n	80093de <__sflush_r+0xb2>
 8009386:	4a2a      	ldr	r2, [pc, #168]	@ (8009430 <__sflush_r+0x104>)
 8009388:	410a      	asrs	r2, r1
 800938a:	07d6      	lsls	r6, r2, #31
 800938c:	d427      	bmi.n	80093de <__sflush_r+0xb2>
 800938e:	2200      	movs	r2, #0
 8009390:	6062      	str	r2, [r4, #4]
 8009392:	04d9      	lsls	r1, r3, #19
 8009394:	6922      	ldr	r2, [r4, #16]
 8009396:	6022      	str	r2, [r4, #0]
 8009398:	d504      	bpl.n	80093a4 <__sflush_r+0x78>
 800939a:	1c42      	adds	r2, r0, #1
 800939c:	d101      	bne.n	80093a2 <__sflush_r+0x76>
 800939e:	682b      	ldr	r3, [r5, #0]
 80093a0:	b903      	cbnz	r3, 80093a4 <__sflush_r+0x78>
 80093a2:	6560      	str	r0, [r4, #84]	@ 0x54
 80093a4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80093a6:	602f      	str	r7, [r5, #0]
 80093a8:	b1b9      	cbz	r1, 80093da <__sflush_r+0xae>
 80093aa:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80093ae:	4299      	cmp	r1, r3
 80093b0:	d002      	beq.n	80093b8 <__sflush_r+0x8c>
 80093b2:	4628      	mov	r0, r5
 80093b4:	f001 f8f8 	bl	800a5a8 <_free_r>
 80093b8:	2300      	movs	r3, #0
 80093ba:	6363      	str	r3, [r4, #52]	@ 0x34
 80093bc:	e00d      	b.n	80093da <__sflush_r+0xae>
 80093be:	2301      	movs	r3, #1
 80093c0:	4628      	mov	r0, r5
 80093c2:	47b0      	blx	r6
 80093c4:	4602      	mov	r2, r0
 80093c6:	1c50      	adds	r0, r2, #1
 80093c8:	d1c9      	bne.n	800935e <__sflush_r+0x32>
 80093ca:	682b      	ldr	r3, [r5, #0]
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d0c6      	beq.n	800935e <__sflush_r+0x32>
 80093d0:	2b1d      	cmp	r3, #29
 80093d2:	d001      	beq.n	80093d8 <__sflush_r+0xac>
 80093d4:	2b16      	cmp	r3, #22
 80093d6:	d11e      	bne.n	8009416 <__sflush_r+0xea>
 80093d8:	602f      	str	r7, [r5, #0]
 80093da:	2000      	movs	r0, #0
 80093dc:	e022      	b.n	8009424 <__sflush_r+0xf8>
 80093de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80093e2:	b21b      	sxth	r3, r3
 80093e4:	e01b      	b.n	800941e <__sflush_r+0xf2>
 80093e6:	690f      	ldr	r7, [r1, #16]
 80093e8:	2f00      	cmp	r7, #0
 80093ea:	d0f6      	beq.n	80093da <__sflush_r+0xae>
 80093ec:	0793      	lsls	r3, r2, #30
 80093ee:	680e      	ldr	r6, [r1, #0]
 80093f0:	bf08      	it	eq
 80093f2:	694b      	ldreq	r3, [r1, #20]
 80093f4:	600f      	str	r7, [r1, #0]
 80093f6:	bf18      	it	ne
 80093f8:	2300      	movne	r3, #0
 80093fa:	eba6 0807 	sub.w	r8, r6, r7
 80093fe:	608b      	str	r3, [r1, #8]
 8009400:	f1b8 0f00 	cmp.w	r8, #0
 8009404:	dde9      	ble.n	80093da <__sflush_r+0xae>
 8009406:	6a21      	ldr	r1, [r4, #32]
 8009408:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800940a:	4643      	mov	r3, r8
 800940c:	463a      	mov	r2, r7
 800940e:	4628      	mov	r0, r5
 8009410:	47b0      	blx	r6
 8009412:	2800      	cmp	r0, #0
 8009414:	dc08      	bgt.n	8009428 <__sflush_r+0xfc>
 8009416:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800941a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800941e:	81a3      	strh	r3, [r4, #12]
 8009420:	f04f 30ff 	mov.w	r0, #4294967295
 8009424:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009428:	4407      	add	r7, r0
 800942a:	eba8 0800 	sub.w	r8, r8, r0
 800942e:	e7e7      	b.n	8009400 <__sflush_r+0xd4>
 8009430:	dfbffffe 	.word	0xdfbffffe

08009434 <_fflush_r>:
 8009434:	b538      	push	{r3, r4, r5, lr}
 8009436:	690b      	ldr	r3, [r1, #16]
 8009438:	4605      	mov	r5, r0
 800943a:	460c      	mov	r4, r1
 800943c:	b913      	cbnz	r3, 8009444 <_fflush_r+0x10>
 800943e:	2500      	movs	r5, #0
 8009440:	4628      	mov	r0, r5
 8009442:	bd38      	pop	{r3, r4, r5, pc}
 8009444:	b118      	cbz	r0, 800944e <_fflush_r+0x1a>
 8009446:	6a03      	ldr	r3, [r0, #32]
 8009448:	b90b      	cbnz	r3, 800944e <_fflush_r+0x1a>
 800944a:	f000 f8bb 	bl	80095c4 <__sinit>
 800944e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009452:	2b00      	cmp	r3, #0
 8009454:	d0f3      	beq.n	800943e <_fflush_r+0xa>
 8009456:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009458:	07d0      	lsls	r0, r2, #31
 800945a:	d404      	bmi.n	8009466 <_fflush_r+0x32>
 800945c:	0599      	lsls	r1, r3, #22
 800945e:	d402      	bmi.n	8009466 <_fflush_r+0x32>
 8009460:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009462:	f000 fa24 	bl	80098ae <__retarget_lock_acquire_recursive>
 8009466:	4628      	mov	r0, r5
 8009468:	4621      	mov	r1, r4
 800946a:	f7ff ff5f 	bl	800932c <__sflush_r>
 800946e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009470:	07da      	lsls	r2, r3, #31
 8009472:	4605      	mov	r5, r0
 8009474:	d4e4      	bmi.n	8009440 <_fflush_r+0xc>
 8009476:	89a3      	ldrh	r3, [r4, #12]
 8009478:	059b      	lsls	r3, r3, #22
 800947a:	d4e1      	bmi.n	8009440 <_fflush_r+0xc>
 800947c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800947e:	f000 fa17 	bl	80098b0 <__retarget_lock_release_recursive>
 8009482:	e7dd      	b.n	8009440 <_fflush_r+0xc>

08009484 <fflush>:
 8009484:	4601      	mov	r1, r0
 8009486:	b920      	cbnz	r0, 8009492 <fflush+0xe>
 8009488:	4a04      	ldr	r2, [pc, #16]	@ (800949c <fflush+0x18>)
 800948a:	4905      	ldr	r1, [pc, #20]	@ (80094a0 <fflush+0x1c>)
 800948c:	4805      	ldr	r0, [pc, #20]	@ (80094a4 <fflush+0x20>)
 800948e:	f000 b8b1 	b.w	80095f4 <_fwalk_sglue>
 8009492:	4b05      	ldr	r3, [pc, #20]	@ (80094a8 <fflush+0x24>)
 8009494:	6818      	ldr	r0, [r3, #0]
 8009496:	f7ff bfcd 	b.w	8009434 <_fflush_r>
 800949a:	bf00      	nop
 800949c:	20003f88 	.word	0x20003f88
 80094a0:	08009435 	.word	0x08009435
 80094a4:	20003f98 	.word	0x20003f98
 80094a8:	20003f94 	.word	0x20003f94

080094ac <std>:
 80094ac:	2300      	movs	r3, #0
 80094ae:	b510      	push	{r4, lr}
 80094b0:	4604      	mov	r4, r0
 80094b2:	e9c0 3300 	strd	r3, r3, [r0]
 80094b6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80094ba:	6083      	str	r3, [r0, #8]
 80094bc:	8181      	strh	r1, [r0, #12]
 80094be:	6643      	str	r3, [r0, #100]	@ 0x64
 80094c0:	81c2      	strh	r2, [r0, #14]
 80094c2:	6183      	str	r3, [r0, #24]
 80094c4:	4619      	mov	r1, r3
 80094c6:	2208      	movs	r2, #8
 80094c8:	305c      	adds	r0, #92	@ 0x5c
 80094ca:	f000 f8f4 	bl	80096b6 <memset>
 80094ce:	4b0d      	ldr	r3, [pc, #52]	@ (8009504 <std+0x58>)
 80094d0:	6263      	str	r3, [r4, #36]	@ 0x24
 80094d2:	4b0d      	ldr	r3, [pc, #52]	@ (8009508 <std+0x5c>)
 80094d4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80094d6:	4b0d      	ldr	r3, [pc, #52]	@ (800950c <std+0x60>)
 80094d8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80094da:	4b0d      	ldr	r3, [pc, #52]	@ (8009510 <std+0x64>)
 80094dc:	6323      	str	r3, [r4, #48]	@ 0x30
 80094de:	4b0d      	ldr	r3, [pc, #52]	@ (8009514 <std+0x68>)
 80094e0:	6224      	str	r4, [r4, #32]
 80094e2:	429c      	cmp	r4, r3
 80094e4:	d006      	beq.n	80094f4 <std+0x48>
 80094e6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80094ea:	4294      	cmp	r4, r2
 80094ec:	d002      	beq.n	80094f4 <std+0x48>
 80094ee:	33d0      	adds	r3, #208	@ 0xd0
 80094f0:	429c      	cmp	r4, r3
 80094f2:	d105      	bne.n	8009500 <std+0x54>
 80094f4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80094f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80094fc:	f000 b9d6 	b.w	80098ac <__retarget_lock_init_recursive>
 8009500:	bd10      	pop	{r4, pc}
 8009502:	bf00      	nop
 8009504:	08009631 	.word	0x08009631
 8009508:	08009653 	.word	0x08009653
 800950c:	0800968b 	.word	0x0800968b
 8009510:	080096af 	.word	0x080096af
 8009514:	20004424 	.word	0x20004424

08009518 <stdio_exit_handler>:
 8009518:	4a02      	ldr	r2, [pc, #8]	@ (8009524 <stdio_exit_handler+0xc>)
 800951a:	4903      	ldr	r1, [pc, #12]	@ (8009528 <stdio_exit_handler+0x10>)
 800951c:	4803      	ldr	r0, [pc, #12]	@ (800952c <stdio_exit_handler+0x14>)
 800951e:	f000 b869 	b.w	80095f4 <_fwalk_sglue>
 8009522:	bf00      	nop
 8009524:	20003f88 	.word	0x20003f88
 8009528:	08009435 	.word	0x08009435
 800952c:	20003f98 	.word	0x20003f98

08009530 <cleanup_stdio>:
 8009530:	6841      	ldr	r1, [r0, #4]
 8009532:	4b0c      	ldr	r3, [pc, #48]	@ (8009564 <cleanup_stdio+0x34>)
 8009534:	4299      	cmp	r1, r3
 8009536:	b510      	push	{r4, lr}
 8009538:	4604      	mov	r4, r0
 800953a:	d001      	beq.n	8009540 <cleanup_stdio+0x10>
 800953c:	f7ff ff7a 	bl	8009434 <_fflush_r>
 8009540:	68a1      	ldr	r1, [r4, #8]
 8009542:	4b09      	ldr	r3, [pc, #36]	@ (8009568 <cleanup_stdio+0x38>)
 8009544:	4299      	cmp	r1, r3
 8009546:	d002      	beq.n	800954e <cleanup_stdio+0x1e>
 8009548:	4620      	mov	r0, r4
 800954a:	f7ff ff73 	bl	8009434 <_fflush_r>
 800954e:	68e1      	ldr	r1, [r4, #12]
 8009550:	4b06      	ldr	r3, [pc, #24]	@ (800956c <cleanup_stdio+0x3c>)
 8009552:	4299      	cmp	r1, r3
 8009554:	d004      	beq.n	8009560 <cleanup_stdio+0x30>
 8009556:	4620      	mov	r0, r4
 8009558:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800955c:	f7ff bf6a 	b.w	8009434 <_fflush_r>
 8009560:	bd10      	pop	{r4, pc}
 8009562:	bf00      	nop
 8009564:	20004424 	.word	0x20004424
 8009568:	2000448c 	.word	0x2000448c
 800956c:	200044f4 	.word	0x200044f4

08009570 <global_stdio_init.part.0>:
 8009570:	b510      	push	{r4, lr}
 8009572:	4b0b      	ldr	r3, [pc, #44]	@ (80095a0 <global_stdio_init.part.0+0x30>)
 8009574:	4c0b      	ldr	r4, [pc, #44]	@ (80095a4 <global_stdio_init.part.0+0x34>)
 8009576:	4a0c      	ldr	r2, [pc, #48]	@ (80095a8 <global_stdio_init.part.0+0x38>)
 8009578:	601a      	str	r2, [r3, #0]
 800957a:	4620      	mov	r0, r4
 800957c:	2200      	movs	r2, #0
 800957e:	2104      	movs	r1, #4
 8009580:	f7ff ff94 	bl	80094ac <std>
 8009584:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009588:	2201      	movs	r2, #1
 800958a:	2109      	movs	r1, #9
 800958c:	f7ff ff8e 	bl	80094ac <std>
 8009590:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009594:	2202      	movs	r2, #2
 8009596:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800959a:	2112      	movs	r1, #18
 800959c:	f7ff bf86 	b.w	80094ac <std>
 80095a0:	2000455c 	.word	0x2000455c
 80095a4:	20004424 	.word	0x20004424
 80095a8:	08009519 	.word	0x08009519

080095ac <__sfp_lock_acquire>:
 80095ac:	4801      	ldr	r0, [pc, #4]	@ (80095b4 <__sfp_lock_acquire+0x8>)
 80095ae:	f000 b97e 	b.w	80098ae <__retarget_lock_acquire_recursive>
 80095b2:	bf00      	nop
 80095b4:	20004565 	.word	0x20004565

080095b8 <__sfp_lock_release>:
 80095b8:	4801      	ldr	r0, [pc, #4]	@ (80095c0 <__sfp_lock_release+0x8>)
 80095ba:	f000 b979 	b.w	80098b0 <__retarget_lock_release_recursive>
 80095be:	bf00      	nop
 80095c0:	20004565 	.word	0x20004565

080095c4 <__sinit>:
 80095c4:	b510      	push	{r4, lr}
 80095c6:	4604      	mov	r4, r0
 80095c8:	f7ff fff0 	bl	80095ac <__sfp_lock_acquire>
 80095cc:	6a23      	ldr	r3, [r4, #32]
 80095ce:	b11b      	cbz	r3, 80095d8 <__sinit+0x14>
 80095d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80095d4:	f7ff bff0 	b.w	80095b8 <__sfp_lock_release>
 80095d8:	4b04      	ldr	r3, [pc, #16]	@ (80095ec <__sinit+0x28>)
 80095da:	6223      	str	r3, [r4, #32]
 80095dc:	4b04      	ldr	r3, [pc, #16]	@ (80095f0 <__sinit+0x2c>)
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d1f5      	bne.n	80095d0 <__sinit+0xc>
 80095e4:	f7ff ffc4 	bl	8009570 <global_stdio_init.part.0>
 80095e8:	e7f2      	b.n	80095d0 <__sinit+0xc>
 80095ea:	bf00      	nop
 80095ec:	08009531 	.word	0x08009531
 80095f0:	2000455c 	.word	0x2000455c

080095f4 <_fwalk_sglue>:
 80095f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80095f8:	4607      	mov	r7, r0
 80095fa:	4688      	mov	r8, r1
 80095fc:	4614      	mov	r4, r2
 80095fe:	2600      	movs	r6, #0
 8009600:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009604:	f1b9 0901 	subs.w	r9, r9, #1
 8009608:	d505      	bpl.n	8009616 <_fwalk_sglue+0x22>
 800960a:	6824      	ldr	r4, [r4, #0]
 800960c:	2c00      	cmp	r4, #0
 800960e:	d1f7      	bne.n	8009600 <_fwalk_sglue+0xc>
 8009610:	4630      	mov	r0, r6
 8009612:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009616:	89ab      	ldrh	r3, [r5, #12]
 8009618:	2b01      	cmp	r3, #1
 800961a:	d907      	bls.n	800962c <_fwalk_sglue+0x38>
 800961c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009620:	3301      	adds	r3, #1
 8009622:	d003      	beq.n	800962c <_fwalk_sglue+0x38>
 8009624:	4629      	mov	r1, r5
 8009626:	4638      	mov	r0, r7
 8009628:	47c0      	blx	r8
 800962a:	4306      	orrs	r6, r0
 800962c:	3568      	adds	r5, #104	@ 0x68
 800962e:	e7e9      	b.n	8009604 <_fwalk_sglue+0x10>

08009630 <__sread>:
 8009630:	b510      	push	{r4, lr}
 8009632:	460c      	mov	r4, r1
 8009634:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009638:	f000 f8da 	bl	80097f0 <_read_r>
 800963c:	2800      	cmp	r0, #0
 800963e:	bfab      	itete	ge
 8009640:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8009642:	89a3      	ldrhlt	r3, [r4, #12]
 8009644:	181b      	addge	r3, r3, r0
 8009646:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800964a:	bfac      	ite	ge
 800964c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800964e:	81a3      	strhlt	r3, [r4, #12]
 8009650:	bd10      	pop	{r4, pc}

08009652 <__swrite>:
 8009652:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009656:	461f      	mov	r7, r3
 8009658:	898b      	ldrh	r3, [r1, #12]
 800965a:	05db      	lsls	r3, r3, #23
 800965c:	4605      	mov	r5, r0
 800965e:	460c      	mov	r4, r1
 8009660:	4616      	mov	r6, r2
 8009662:	d505      	bpl.n	8009670 <__swrite+0x1e>
 8009664:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009668:	2302      	movs	r3, #2
 800966a:	2200      	movs	r2, #0
 800966c:	f000 f8ae 	bl	80097cc <_lseek_r>
 8009670:	89a3      	ldrh	r3, [r4, #12]
 8009672:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009676:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800967a:	81a3      	strh	r3, [r4, #12]
 800967c:	4632      	mov	r2, r6
 800967e:	463b      	mov	r3, r7
 8009680:	4628      	mov	r0, r5
 8009682:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009686:	f000 b8d5 	b.w	8009834 <_write_r>

0800968a <__sseek>:
 800968a:	b510      	push	{r4, lr}
 800968c:	460c      	mov	r4, r1
 800968e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009692:	f000 f89b 	bl	80097cc <_lseek_r>
 8009696:	1c43      	adds	r3, r0, #1
 8009698:	89a3      	ldrh	r3, [r4, #12]
 800969a:	bf15      	itete	ne
 800969c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800969e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80096a2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80096a6:	81a3      	strheq	r3, [r4, #12]
 80096a8:	bf18      	it	ne
 80096aa:	81a3      	strhne	r3, [r4, #12]
 80096ac:	bd10      	pop	{r4, pc}

080096ae <__sclose>:
 80096ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80096b2:	f000 b87b 	b.w	80097ac <_close_r>

080096b6 <memset>:
 80096b6:	4402      	add	r2, r0
 80096b8:	4603      	mov	r3, r0
 80096ba:	4293      	cmp	r3, r2
 80096bc:	d100      	bne.n	80096c0 <memset+0xa>
 80096be:	4770      	bx	lr
 80096c0:	f803 1b01 	strb.w	r1, [r3], #1
 80096c4:	e7f9      	b.n	80096ba <memset+0x4>

080096c6 <strncmp>:
 80096c6:	b510      	push	{r4, lr}
 80096c8:	b16a      	cbz	r2, 80096e6 <strncmp+0x20>
 80096ca:	3901      	subs	r1, #1
 80096cc:	1884      	adds	r4, r0, r2
 80096ce:	f810 2b01 	ldrb.w	r2, [r0], #1
 80096d2:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80096d6:	429a      	cmp	r2, r3
 80096d8:	d103      	bne.n	80096e2 <strncmp+0x1c>
 80096da:	42a0      	cmp	r0, r4
 80096dc:	d001      	beq.n	80096e2 <strncmp+0x1c>
 80096de:	2a00      	cmp	r2, #0
 80096e0:	d1f5      	bne.n	80096ce <strncmp+0x8>
 80096e2:	1ad0      	subs	r0, r2, r3
 80096e4:	bd10      	pop	{r4, pc}
 80096e6:	4610      	mov	r0, r2
 80096e8:	e7fc      	b.n	80096e4 <strncmp+0x1e>
	...

080096ec <strtok>:
 80096ec:	4b16      	ldr	r3, [pc, #88]	@ (8009748 <strtok+0x5c>)
 80096ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80096f2:	681f      	ldr	r7, [r3, #0]
 80096f4:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 80096f6:	4605      	mov	r5, r0
 80096f8:	460e      	mov	r6, r1
 80096fa:	b9ec      	cbnz	r4, 8009738 <strtok+0x4c>
 80096fc:	2050      	movs	r0, #80	@ 0x50
 80096fe:	f7fa f9fb 	bl	8003af8 <__wrap_malloc>
 8009702:	4602      	mov	r2, r0
 8009704:	6478      	str	r0, [r7, #68]	@ 0x44
 8009706:	b920      	cbnz	r0, 8009712 <strtok+0x26>
 8009708:	4b10      	ldr	r3, [pc, #64]	@ (800974c <strtok+0x60>)
 800970a:	4811      	ldr	r0, [pc, #68]	@ (8009750 <strtok+0x64>)
 800970c:	215b      	movs	r1, #91	@ 0x5b
 800970e:	f000 f8df 	bl	80098d0 <__assert_func>
 8009712:	e9c0 4400 	strd	r4, r4, [r0]
 8009716:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800971a:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800971e:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 8009722:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 8009726:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 800972a:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 800972e:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 8009732:	6184      	str	r4, [r0, #24]
 8009734:	7704      	strb	r4, [r0, #28]
 8009736:	6244      	str	r4, [r0, #36]	@ 0x24
 8009738:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800973a:	4631      	mov	r1, r6
 800973c:	4628      	mov	r0, r5
 800973e:	2301      	movs	r3, #1
 8009740:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009744:	f000 b806 	b.w	8009754 <__strtok_r>
 8009748:	20003f94 	.word	0x20003f94
 800974c:	080123ac 	.word	0x080123ac
 8009750:	08012550 	.word	0x08012550

08009754 <__strtok_r>:
 8009754:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009756:	4604      	mov	r4, r0
 8009758:	b908      	cbnz	r0, 800975e <__strtok_r+0xa>
 800975a:	6814      	ldr	r4, [r2, #0]
 800975c:	b144      	cbz	r4, 8009770 <__strtok_r+0x1c>
 800975e:	4620      	mov	r0, r4
 8009760:	f814 5b01 	ldrb.w	r5, [r4], #1
 8009764:	460f      	mov	r7, r1
 8009766:	f817 6b01 	ldrb.w	r6, [r7], #1
 800976a:	b91e      	cbnz	r6, 8009774 <__strtok_r+0x20>
 800976c:	b965      	cbnz	r5, 8009788 <__strtok_r+0x34>
 800976e:	6015      	str	r5, [r2, #0]
 8009770:	2000      	movs	r0, #0
 8009772:	e005      	b.n	8009780 <__strtok_r+0x2c>
 8009774:	42b5      	cmp	r5, r6
 8009776:	d1f6      	bne.n	8009766 <__strtok_r+0x12>
 8009778:	2b00      	cmp	r3, #0
 800977a:	d1f0      	bne.n	800975e <__strtok_r+0xa>
 800977c:	6014      	str	r4, [r2, #0]
 800977e:	7003      	strb	r3, [r0, #0]
 8009780:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009782:	461c      	mov	r4, r3
 8009784:	e00c      	b.n	80097a0 <__strtok_r+0x4c>
 8009786:	b915      	cbnz	r5, 800978e <__strtok_r+0x3a>
 8009788:	f814 3b01 	ldrb.w	r3, [r4], #1
 800978c:	460e      	mov	r6, r1
 800978e:	f816 5b01 	ldrb.w	r5, [r6], #1
 8009792:	42ab      	cmp	r3, r5
 8009794:	d1f7      	bne.n	8009786 <__strtok_r+0x32>
 8009796:	2b00      	cmp	r3, #0
 8009798:	d0f3      	beq.n	8009782 <__strtok_r+0x2e>
 800979a:	2300      	movs	r3, #0
 800979c:	f804 3c01 	strb.w	r3, [r4, #-1]
 80097a0:	6014      	str	r4, [r2, #0]
 80097a2:	e7ed      	b.n	8009780 <__strtok_r+0x2c>

080097a4 <_localeconv_r>:
 80097a4:	4800      	ldr	r0, [pc, #0]	@ (80097a8 <_localeconv_r+0x4>)
 80097a6:	4770      	bx	lr
 80097a8:	200040d4 	.word	0x200040d4

080097ac <_close_r>:
 80097ac:	b538      	push	{r3, r4, r5, lr}
 80097ae:	4d06      	ldr	r5, [pc, #24]	@ (80097c8 <_close_r+0x1c>)
 80097b0:	2300      	movs	r3, #0
 80097b2:	4604      	mov	r4, r0
 80097b4:	4608      	mov	r0, r1
 80097b6:	602b      	str	r3, [r5, #0]
 80097b8:	f7f7 fd05 	bl	80011c6 <_close>
 80097bc:	1c43      	adds	r3, r0, #1
 80097be:	d102      	bne.n	80097c6 <_close_r+0x1a>
 80097c0:	682b      	ldr	r3, [r5, #0]
 80097c2:	b103      	cbz	r3, 80097c6 <_close_r+0x1a>
 80097c4:	6023      	str	r3, [r4, #0]
 80097c6:	bd38      	pop	{r3, r4, r5, pc}
 80097c8:	20004560 	.word	0x20004560

080097cc <_lseek_r>:
 80097cc:	b538      	push	{r3, r4, r5, lr}
 80097ce:	4d07      	ldr	r5, [pc, #28]	@ (80097ec <_lseek_r+0x20>)
 80097d0:	4604      	mov	r4, r0
 80097d2:	4608      	mov	r0, r1
 80097d4:	4611      	mov	r1, r2
 80097d6:	2200      	movs	r2, #0
 80097d8:	602a      	str	r2, [r5, #0]
 80097da:	461a      	mov	r2, r3
 80097dc:	f7f7 fcfd 	bl	80011da <_lseek>
 80097e0:	1c43      	adds	r3, r0, #1
 80097e2:	d102      	bne.n	80097ea <_lseek_r+0x1e>
 80097e4:	682b      	ldr	r3, [r5, #0]
 80097e6:	b103      	cbz	r3, 80097ea <_lseek_r+0x1e>
 80097e8:	6023      	str	r3, [r4, #0]
 80097ea:	bd38      	pop	{r3, r4, r5, pc}
 80097ec:	20004560 	.word	0x20004560

080097f0 <_read_r>:
 80097f0:	b538      	push	{r3, r4, r5, lr}
 80097f2:	4d07      	ldr	r5, [pc, #28]	@ (8009810 <_read_r+0x20>)
 80097f4:	4604      	mov	r4, r0
 80097f6:	4608      	mov	r0, r1
 80097f8:	4611      	mov	r1, r2
 80097fa:	2200      	movs	r2, #0
 80097fc:	602a      	str	r2, [r5, #0]
 80097fe:	461a      	mov	r2, r3
 8009800:	f7f7 fcd3 	bl	80011aa <_read>
 8009804:	1c43      	adds	r3, r0, #1
 8009806:	d102      	bne.n	800980e <_read_r+0x1e>
 8009808:	682b      	ldr	r3, [r5, #0]
 800980a:	b103      	cbz	r3, 800980e <_read_r+0x1e>
 800980c:	6023      	str	r3, [r4, #0]
 800980e:	bd38      	pop	{r3, r4, r5, pc}
 8009810:	20004560 	.word	0x20004560

08009814 <_sbrk_r>:
 8009814:	b538      	push	{r3, r4, r5, lr}
 8009816:	4d06      	ldr	r5, [pc, #24]	@ (8009830 <_sbrk_r+0x1c>)
 8009818:	2300      	movs	r3, #0
 800981a:	4604      	mov	r4, r0
 800981c:	4608      	mov	r0, r1
 800981e:	602b      	str	r3, [r5, #0]
 8009820:	f7f7 fcde 	bl	80011e0 <_sbrk>
 8009824:	1c43      	adds	r3, r0, #1
 8009826:	d102      	bne.n	800982e <_sbrk_r+0x1a>
 8009828:	682b      	ldr	r3, [r5, #0]
 800982a:	b103      	cbz	r3, 800982e <_sbrk_r+0x1a>
 800982c:	6023      	str	r3, [r4, #0]
 800982e:	bd38      	pop	{r3, r4, r5, pc}
 8009830:	20004560 	.word	0x20004560

08009834 <_write_r>:
 8009834:	b538      	push	{r3, r4, r5, lr}
 8009836:	4d07      	ldr	r5, [pc, #28]	@ (8009854 <_write_r+0x20>)
 8009838:	4604      	mov	r4, r0
 800983a:	4608      	mov	r0, r1
 800983c:	4611      	mov	r1, r2
 800983e:	2200      	movs	r2, #0
 8009840:	602a      	str	r2, [r5, #0]
 8009842:	461a      	mov	r2, r3
 8009844:	f7fa f90e 	bl	8003a64 <_write>
 8009848:	1c43      	adds	r3, r0, #1
 800984a:	d102      	bne.n	8009852 <_write_r+0x1e>
 800984c:	682b      	ldr	r3, [r5, #0]
 800984e:	b103      	cbz	r3, 8009852 <_write_r+0x1e>
 8009850:	6023      	str	r3, [r4, #0]
 8009852:	bd38      	pop	{r3, r4, r5, pc}
 8009854:	20004560 	.word	0x20004560

08009858 <__errno>:
 8009858:	4b01      	ldr	r3, [pc, #4]	@ (8009860 <__errno+0x8>)
 800985a:	6818      	ldr	r0, [r3, #0]
 800985c:	4770      	bx	lr
 800985e:	bf00      	nop
 8009860:	20003f94 	.word	0x20003f94

08009864 <__libc_init_array>:
 8009864:	b570      	push	{r4, r5, r6, lr}
 8009866:	4d0d      	ldr	r5, [pc, #52]	@ (800989c <__libc_init_array+0x38>)
 8009868:	4c0d      	ldr	r4, [pc, #52]	@ (80098a0 <__libc_init_array+0x3c>)
 800986a:	1b64      	subs	r4, r4, r5
 800986c:	10a4      	asrs	r4, r4, #2
 800986e:	2600      	movs	r6, #0
 8009870:	42a6      	cmp	r6, r4
 8009872:	d109      	bne.n	8009888 <__libc_init_array+0x24>
 8009874:	4d0b      	ldr	r5, [pc, #44]	@ (80098a4 <__libc_init_array+0x40>)
 8009876:	4c0c      	ldr	r4, [pc, #48]	@ (80098a8 <__libc_init_array+0x44>)
 8009878:	f002 f81a 	bl	800b8b0 <_init>
 800987c:	1b64      	subs	r4, r4, r5
 800987e:	10a4      	asrs	r4, r4, #2
 8009880:	2600      	movs	r6, #0
 8009882:	42a6      	cmp	r6, r4
 8009884:	d105      	bne.n	8009892 <__libc_init_array+0x2e>
 8009886:	bd70      	pop	{r4, r5, r6, pc}
 8009888:	f855 3b04 	ldr.w	r3, [r5], #4
 800988c:	4798      	blx	r3
 800988e:	3601      	adds	r6, #1
 8009890:	e7ee      	b.n	8009870 <__libc_init_array+0xc>
 8009892:	f855 3b04 	ldr.w	r3, [r5], #4
 8009896:	4798      	blx	r3
 8009898:	3601      	adds	r6, #1
 800989a:	e7f2      	b.n	8009882 <__libc_init_array+0x1e>
 800989c:	080127f4 	.word	0x080127f4
 80098a0:	080127f4 	.word	0x080127f4
 80098a4:	080127f4 	.word	0x080127f4
 80098a8:	080127f8 	.word	0x080127f8

080098ac <__retarget_lock_init_recursive>:
 80098ac:	4770      	bx	lr

080098ae <__retarget_lock_acquire_recursive>:
 80098ae:	4770      	bx	lr

080098b0 <__retarget_lock_release_recursive>:
 80098b0:	4770      	bx	lr

080098b2 <memcpy>:
 80098b2:	440a      	add	r2, r1
 80098b4:	4291      	cmp	r1, r2
 80098b6:	f100 33ff 	add.w	r3, r0, #4294967295
 80098ba:	d100      	bne.n	80098be <memcpy+0xc>
 80098bc:	4770      	bx	lr
 80098be:	b510      	push	{r4, lr}
 80098c0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80098c4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80098c8:	4291      	cmp	r1, r2
 80098ca:	d1f9      	bne.n	80098c0 <memcpy+0xe>
 80098cc:	bd10      	pop	{r4, pc}
	...

080098d0 <__assert_func>:
 80098d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80098d2:	4614      	mov	r4, r2
 80098d4:	461a      	mov	r2, r3
 80098d6:	4b09      	ldr	r3, [pc, #36]	@ (80098fc <__assert_func+0x2c>)
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	4605      	mov	r5, r0
 80098dc:	68d8      	ldr	r0, [r3, #12]
 80098de:	b954      	cbnz	r4, 80098f6 <__assert_func+0x26>
 80098e0:	4b07      	ldr	r3, [pc, #28]	@ (8009900 <__assert_func+0x30>)
 80098e2:	461c      	mov	r4, r3
 80098e4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80098e8:	9100      	str	r1, [sp, #0]
 80098ea:	462b      	mov	r3, r5
 80098ec:	4905      	ldr	r1, [pc, #20]	@ (8009904 <__assert_func+0x34>)
 80098ee:	f001 fa27 	bl	800ad40 <fiprintf>
 80098f2:	f001 fa37 	bl	800ad64 <abort>
 80098f6:	4b04      	ldr	r3, [pc, #16]	@ (8009908 <__assert_func+0x38>)
 80098f8:	e7f4      	b.n	80098e4 <__assert_func+0x14>
 80098fa:	bf00      	nop
 80098fc:	20003f94 	.word	0x20003f94
 8009900:	0800c577 	.word	0x0800c577
 8009904:	080125b7 	.word	0x080125b7
 8009908:	080125aa 	.word	0x080125aa

0800990c <quorem>:
 800990c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009910:	6903      	ldr	r3, [r0, #16]
 8009912:	690c      	ldr	r4, [r1, #16]
 8009914:	42a3      	cmp	r3, r4
 8009916:	4607      	mov	r7, r0
 8009918:	db7e      	blt.n	8009a18 <quorem+0x10c>
 800991a:	3c01      	subs	r4, #1
 800991c:	f101 0814 	add.w	r8, r1, #20
 8009920:	00a3      	lsls	r3, r4, #2
 8009922:	f100 0514 	add.w	r5, r0, #20
 8009926:	9300      	str	r3, [sp, #0]
 8009928:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800992c:	9301      	str	r3, [sp, #4]
 800992e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009932:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009936:	3301      	adds	r3, #1
 8009938:	429a      	cmp	r2, r3
 800993a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800993e:	fbb2 f6f3 	udiv	r6, r2, r3
 8009942:	d32e      	bcc.n	80099a2 <quorem+0x96>
 8009944:	f04f 0a00 	mov.w	sl, #0
 8009948:	46c4      	mov	ip, r8
 800994a:	46ae      	mov	lr, r5
 800994c:	46d3      	mov	fp, sl
 800994e:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009952:	b298      	uxth	r0, r3
 8009954:	fb06 a000 	mla	r0, r6, r0, sl
 8009958:	0c02      	lsrs	r2, r0, #16
 800995a:	0c1b      	lsrs	r3, r3, #16
 800995c:	fb06 2303 	mla	r3, r6, r3, r2
 8009960:	f8de 2000 	ldr.w	r2, [lr]
 8009964:	b280      	uxth	r0, r0
 8009966:	b292      	uxth	r2, r2
 8009968:	1a12      	subs	r2, r2, r0
 800996a:	445a      	add	r2, fp
 800996c:	f8de 0000 	ldr.w	r0, [lr]
 8009970:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009974:	b29b      	uxth	r3, r3
 8009976:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800997a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800997e:	b292      	uxth	r2, r2
 8009980:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8009984:	45e1      	cmp	r9, ip
 8009986:	f84e 2b04 	str.w	r2, [lr], #4
 800998a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800998e:	d2de      	bcs.n	800994e <quorem+0x42>
 8009990:	9b00      	ldr	r3, [sp, #0]
 8009992:	58eb      	ldr	r3, [r5, r3]
 8009994:	b92b      	cbnz	r3, 80099a2 <quorem+0x96>
 8009996:	9b01      	ldr	r3, [sp, #4]
 8009998:	3b04      	subs	r3, #4
 800999a:	429d      	cmp	r5, r3
 800999c:	461a      	mov	r2, r3
 800999e:	d32f      	bcc.n	8009a00 <quorem+0xf4>
 80099a0:	613c      	str	r4, [r7, #16]
 80099a2:	4638      	mov	r0, r7
 80099a4:	f001 f8c4 	bl	800ab30 <__mcmp>
 80099a8:	2800      	cmp	r0, #0
 80099aa:	db25      	blt.n	80099f8 <quorem+0xec>
 80099ac:	4629      	mov	r1, r5
 80099ae:	2000      	movs	r0, #0
 80099b0:	f858 2b04 	ldr.w	r2, [r8], #4
 80099b4:	f8d1 c000 	ldr.w	ip, [r1]
 80099b8:	fa1f fe82 	uxth.w	lr, r2
 80099bc:	fa1f f38c 	uxth.w	r3, ip
 80099c0:	eba3 030e 	sub.w	r3, r3, lr
 80099c4:	4403      	add	r3, r0
 80099c6:	0c12      	lsrs	r2, r2, #16
 80099c8:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80099cc:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80099d0:	b29b      	uxth	r3, r3
 80099d2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80099d6:	45c1      	cmp	r9, r8
 80099d8:	f841 3b04 	str.w	r3, [r1], #4
 80099dc:	ea4f 4022 	mov.w	r0, r2, asr #16
 80099e0:	d2e6      	bcs.n	80099b0 <quorem+0xa4>
 80099e2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80099e6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80099ea:	b922      	cbnz	r2, 80099f6 <quorem+0xea>
 80099ec:	3b04      	subs	r3, #4
 80099ee:	429d      	cmp	r5, r3
 80099f0:	461a      	mov	r2, r3
 80099f2:	d30b      	bcc.n	8009a0c <quorem+0x100>
 80099f4:	613c      	str	r4, [r7, #16]
 80099f6:	3601      	adds	r6, #1
 80099f8:	4630      	mov	r0, r6
 80099fa:	b003      	add	sp, #12
 80099fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a00:	6812      	ldr	r2, [r2, #0]
 8009a02:	3b04      	subs	r3, #4
 8009a04:	2a00      	cmp	r2, #0
 8009a06:	d1cb      	bne.n	80099a0 <quorem+0x94>
 8009a08:	3c01      	subs	r4, #1
 8009a0a:	e7c6      	b.n	800999a <quorem+0x8e>
 8009a0c:	6812      	ldr	r2, [r2, #0]
 8009a0e:	3b04      	subs	r3, #4
 8009a10:	2a00      	cmp	r2, #0
 8009a12:	d1ef      	bne.n	80099f4 <quorem+0xe8>
 8009a14:	3c01      	subs	r4, #1
 8009a16:	e7ea      	b.n	80099ee <quorem+0xe2>
 8009a18:	2000      	movs	r0, #0
 8009a1a:	e7ee      	b.n	80099fa <quorem+0xee>
 8009a1c:	0000      	movs	r0, r0
	...

08009a20 <_dtoa_r>:
 8009a20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a24:	69c7      	ldr	r7, [r0, #28]
 8009a26:	b099      	sub	sp, #100	@ 0x64
 8009a28:	ed8d 0b02 	vstr	d0, [sp, #8]
 8009a2c:	ec55 4b10 	vmov	r4, r5, d0
 8009a30:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8009a32:	9109      	str	r1, [sp, #36]	@ 0x24
 8009a34:	4683      	mov	fp, r0
 8009a36:	920e      	str	r2, [sp, #56]	@ 0x38
 8009a38:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009a3a:	b97f      	cbnz	r7, 8009a5c <_dtoa_r+0x3c>
 8009a3c:	2010      	movs	r0, #16
 8009a3e:	f7fa f85b 	bl	8003af8 <__wrap_malloc>
 8009a42:	4602      	mov	r2, r0
 8009a44:	f8cb 001c 	str.w	r0, [fp, #28]
 8009a48:	b920      	cbnz	r0, 8009a54 <_dtoa_r+0x34>
 8009a4a:	4ba7      	ldr	r3, [pc, #668]	@ (8009ce8 <_dtoa_r+0x2c8>)
 8009a4c:	21ef      	movs	r1, #239	@ 0xef
 8009a4e:	48a7      	ldr	r0, [pc, #668]	@ (8009cec <_dtoa_r+0x2cc>)
 8009a50:	f7ff ff3e 	bl	80098d0 <__assert_func>
 8009a54:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8009a58:	6007      	str	r7, [r0, #0]
 8009a5a:	60c7      	str	r7, [r0, #12]
 8009a5c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009a60:	6819      	ldr	r1, [r3, #0]
 8009a62:	b159      	cbz	r1, 8009a7c <_dtoa_r+0x5c>
 8009a64:	685a      	ldr	r2, [r3, #4]
 8009a66:	604a      	str	r2, [r1, #4]
 8009a68:	2301      	movs	r3, #1
 8009a6a:	4093      	lsls	r3, r2
 8009a6c:	608b      	str	r3, [r1, #8]
 8009a6e:	4658      	mov	r0, fp
 8009a70:	f000 fe24 	bl	800a6bc <_Bfree>
 8009a74:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009a78:	2200      	movs	r2, #0
 8009a7a:	601a      	str	r2, [r3, #0]
 8009a7c:	1e2b      	subs	r3, r5, #0
 8009a7e:	bfb9      	ittee	lt
 8009a80:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8009a84:	9303      	strlt	r3, [sp, #12]
 8009a86:	2300      	movge	r3, #0
 8009a88:	6033      	strge	r3, [r6, #0]
 8009a8a:	9f03      	ldr	r7, [sp, #12]
 8009a8c:	4b98      	ldr	r3, [pc, #608]	@ (8009cf0 <_dtoa_r+0x2d0>)
 8009a8e:	bfbc      	itt	lt
 8009a90:	2201      	movlt	r2, #1
 8009a92:	6032      	strlt	r2, [r6, #0]
 8009a94:	43bb      	bics	r3, r7
 8009a96:	d112      	bne.n	8009abe <_dtoa_r+0x9e>
 8009a98:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8009a9a:	f242 730f 	movw	r3, #9999	@ 0x270f
 8009a9e:	6013      	str	r3, [r2, #0]
 8009aa0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009aa4:	4323      	orrs	r3, r4
 8009aa6:	f000 854d 	beq.w	800a544 <_dtoa_r+0xb24>
 8009aaa:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009aac:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8009d04 <_dtoa_r+0x2e4>
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	f000 854f 	beq.w	800a554 <_dtoa_r+0xb34>
 8009ab6:	f10a 0303 	add.w	r3, sl, #3
 8009aba:	f000 bd49 	b.w	800a550 <_dtoa_r+0xb30>
 8009abe:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009ac2:	2200      	movs	r2, #0
 8009ac4:	ec51 0b17 	vmov	r0, r1, d7
 8009ac8:	2300      	movs	r3, #0
 8009aca:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8009ace:	f7f6 fffb 	bl	8000ac8 <__aeabi_dcmpeq>
 8009ad2:	4680      	mov	r8, r0
 8009ad4:	b158      	cbz	r0, 8009aee <_dtoa_r+0xce>
 8009ad6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8009ad8:	2301      	movs	r3, #1
 8009ada:	6013      	str	r3, [r2, #0]
 8009adc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009ade:	b113      	cbz	r3, 8009ae6 <_dtoa_r+0xc6>
 8009ae0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8009ae2:	4b84      	ldr	r3, [pc, #528]	@ (8009cf4 <_dtoa_r+0x2d4>)
 8009ae4:	6013      	str	r3, [r2, #0]
 8009ae6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8009d08 <_dtoa_r+0x2e8>
 8009aea:	f000 bd33 	b.w	800a554 <_dtoa_r+0xb34>
 8009aee:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8009af2:	aa16      	add	r2, sp, #88	@ 0x58
 8009af4:	a917      	add	r1, sp, #92	@ 0x5c
 8009af6:	4658      	mov	r0, fp
 8009af8:	f001 f8ca 	bl	800ac90 <__d2b>
 8009afc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8009b00:	4681      	mov	r9, r0
 8009b02:	2e00      	cmp	r6, #0
 8009b04:	d077      	beq.n	8009bf6 <_dtoa_r+0x1d6>
 8009b06:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009b08:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8009b0c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009b10:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009b14:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8009b18:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8009b1c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8009b20:	4619      	mov	r1, r3
 8009b22:	2200      	movs	r2, #0
 8009b24:	4b74      	ldr	r3, [pc, #464]	@ (8009cf8 <_dtoa_r+0x2d8>)
 8009b26:	f7f6 fbaf 	bl	8000288 <__aeabi_dsub>
 8009b2a:	a369      	add	r3, pc, #420	@ (adr r3, 8009cd0 <_dtoa_r+0x2b0>)
 8009b2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b30:	f7f6 fd62 	bl	80005f8 <__aeabi_dmul>
 8009b34:	a368      	add	r3, pc, #416	@ (adr r3, 8009cd8 <_dtoa_r+0x2b8>)
 8009b36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b3a:	f7f6 fba7 	bl	800028c <__adddf3>
 8009b3e:	4604      	mov	r4, r0
 8009b40:	4630      	mov	r0, r6
 8009b42:	460d      	mov	r5, r1
 8009b44:	f7f6 fcee 	bl	8000524 <__aeabi_i2d>
 8009b48:	a365      	add	r3, pc, #404	@ (adr r3, 8009ce0 <_dtoa_r+0x2c0>)
 8009b4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b4e:	f7f6 fd53 	bl	80005f8 <__aeabi_dmul>
 8009b52:	4602      	mov	r2, r0
 8009b54:	460b      	mov	r3, r1
 8009b56:	4620      	mov	r0, r4
 8009b58:	4629      	mov	r1, r5
 8009b5a:	f7f6 fb97 	bl	800028c <__adddf3>
 8009b5e:	4604      	mov	r4, r0
 8009b60:	460d      	mov	r5, r1
 8009b62:	f7f6 fff9 	bl	8000b58 <__aeabi_d2iz>
 8009b66:	2200      	movs	r2, #0
 8009b68:	4607      	mov	r7, r0
 8009b6a:	2300      	movs	r3, #0
 8009b6c:	4620      	mov	r0, r4
 8009b6e:	4629      	mov	r1, r5
 8009b70:	f7f6 ffb4 	bl	8000adc <__aeabi_dcmplt>
 8009b74:	b140      	cbz	r0, 8009b88 <_dtoa_r+0x168>
 8009b76:	4638      	mov	r0, r7
 8009b78:	f7f6 fcd4 	bl	8000524 <__aeabi_i2d>
 8009b7c:	4622      	mov	r2, r4
 8009b7e:	462b      	mov	r3, r5
 8009b80:	f7f6 ffa2 	bl	8000ac8 <__aeabi_dcmpeq>
 8009b84:	b900      	cbnz	r0, 8009b88 <_dtoa_r+0x168>
 8009b86:	3f01      	subs	r7, #1
 8009b88:	2f16      	cmp	r7, #22
 8009b8a:	d851      	bhi.n	8009c30 <_dtoa_r+0x210>
 8009b8c:	4b5b      	ldr	r3, [pc, #364]	@ (8009cfc <_dtoa_r+0x2dc>)
 8009b8e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009b92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b96:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009b9a:	f7f6 ff9f 	bl	8000adc <__aeabi_dcmplt>
 8009b9e:	2800      	cmp	r0, #0
 8009ba0:	d048      	beq.n	8009c34 <_dtoa_r+0x214>
 8009ba2:	3f01      	subs	r7, #1
 8009ba4:	2300      	movs	r3, #0
 8009ba6:	9312      	str	r3, [sp, #72]	@ 0x48
 8009ba8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8009baa:	1b9b      	subs	r3, r3, r6
 8009bac:	1e5a      	subs	r2, r3, #1
 8009bae:	bf44      	itt	mi
 8009bb0:	f1c3 0801 	rsbmi	r8, r3, #1
 8009bb4:	2300      	movmi	r3, #0
 8009bb6:	9208      	str	r2, [sp, #32]
 8009bb8:	bf54      	ite	pl
 8009bba:	f04f 0800 	movpl.w	r8, #0
 8009bbe:	9308      	strmi	r3, [sp, #32]
 8009bc0:	2f00      	cmp	r7, #0
 8009bc2:	db39      	blt.n	8009c38 <_dtoa_r+0x218>
 8009bc4:	9b08      	ldr	r3, [sp, #32]
 8009bc6:	970f      	str	r7, [sp, #60]	@ 0x3c
 8009bc8:	443b      	add	r3, r7
 8009bca:	9308      	str	r3, [sp, #32]
 8009bcc:	2300      	movs	r3, #0
 8009bce:	930a      	str	r3, [sp, #40]	@ 0x28
 8009bd0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009bd2:	2b09      	cmp	r3, #9
 8009bd4:	d864      	bhi.n	8009ca0 <_dtoa_r+0x280>
 8009bd6:	2b05      	cmp	r3, #5
 8009bd8:	bfc4      	itt	gt
 8009bda:	3b04      	subgt	r3, #4
 8009bdc:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8009bde:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009be0:	f1a3 0302 	sub.w	r3, r3, #2
 8009be4:	bfcc      	ite	gt
 8009be6:	2400      	movgt	r4, #0
 8009be8:	2401      	movle	r4, #1
 8009bea:	2b03      	cmp	r3, #3
 8009bec:	d863      	bhi.n	8009cb6 <_dtoa_r+0x296>
 8009bee:	e8df f003 	tbb	[pc, r3]
 8009bf2:	372a      	.short	0x372a
 8009bf4:	5535      	.short	0x5535
 8009bf6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8009bfa:	441e      	add	r6, r3
 8009bfc:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8009c00:	2b20      	cmp	r3, #32
 8009c02:	bfc1      	itttt	gt
 8009c04:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8009c08:	409f      	lslgt	r7, r3
 8009c0a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8009c0e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8009c12:	bfd6      	itet	le
 8009c14:	f1c3 0320 	rsble	r3, r3, #32
 8009c18:	ea47 0003 	orrgt.w	r0, r7, r3
 8009c1c:	fa04 f003 	lslle.w	r0, r4, r3
 8009c20:	f7f6 fc70 	bl	8000504 <__aeabi_ui2d>
 8009c24:	2201      	movs	r2, #1
 8009c26:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8009c2a:	3e01      	subs	r6, #1
 8009c2c:	9214      	str	r2, [sp, #80]	@ 0x50
 8009c2e:	e777      	b.n	8009b20 <_dtoa_r+0x100>
 8009c30:	2301      	movs	r3, #1
 8009c32:	e7b8      	b.n	8009ba6 <_dtoa_r+0x186>
 8009c34:	9012      	str	r0, [sp, #72]	@ 0x48
 8009c36:	e7b7      	b.n	8009ba8 <_dtoa_r+0x188>
 8009c38:	427b      	negs	r3, r7
 8009c3a:	930a      	str	r3, [sp, #40]	@ 0x28
 8009c3c:	2300      	movs	r3, #0
 8009c3e:	eba8 0807 	sub.w	r8, r8, r7
 8009c42:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009c44:	e7c4      	b.n	8009bd0 <_dtoa_r+0x1b0>
 8009c46:	2300      	movs	r3, #0
 8009c48:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009c4a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	dc35      	bgt.n	8009cbc <_dtoa_r+0x29c>
 8009c50:	2301      	movs	r3, #1
 8009c52:	9300      	str	r3, [sp, #0]
 8009c54:	9307      	str	r3, [sp, #28]
 8009c56:	461a      	mov	r2, r3
 8009c58:	920e      	str	r2, [sp, #56]	@ 0x38
 8009c5a:	e00b      	b.n	8009c74 <_dtoa_r+0x254>
 8009c5c:	2301      	movs	r3, #1
 8009c5e:	e7f3      	b.n	8009c48 <_dtoa_r+0x228>
 8009c60:	2300      	movs	r3, #0
 8009c62:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009c64:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009c66:	18fb      	adds	r3, r7, r3
 8009c68:	9300      	str	r3, [sp, #0]
 8009c6a:	3301      	adds	r3, #1
 8009c6c:	2b01      	cmp	r3, #1
 8009c6e:	9307      	str	r3, [sp, #28]
 8009c70:	bfb8      	it	lt
 8009c72:	2301      	movlt	r3, #1
 8009c74:	f8db 001c 	ldr.w	r0, [fp, #28]
 8009c78:	2100      	movs	r1, #0
 8009c7a:	2204      	movs	r2, #4
 8009c7c:	f102 0514 	add.w	r5, r2, #20
 8009c80:	429d      	cmp	r5, r3
 8009c82:	d91f      	bls.n	8009cc4 <_dtoa_r+0x2a4>
 8009c84:	6041      	str	r1, [r0, #4]
 8009c86:	4658      	mov	r0, fp
 8009c88:	f000 fcd8 	bl	800a63c <_Balloc>
 8009c8c:	4682      	mov	sl, r0
 8009c8e:	2800      	cmp	r0, #0
 8009c90:	d13c      	bne.n	8009d0c <_dtoa_r+0x2ec>
 8009c92:	4b1b      	ldr	r3, [pc, #108]	@ (8009d00 <_dtoa_r+0x2e0>)
 8009c94:	4602      	mov	r2, r0
 8009c96:	f240 11af 	movw	r1, #431	@ 0x1af
 8009c9a:	e6d8      	b.n	8009a4e <_dtoa_r+0x2e>
 8009c9c:	2301      	movs	r3, #1
 8009c9e:	e7e0      	b.n	8009c62 <_dtoa_r+0x242>
 8009ca0:	2401      	movs	r4, #1
 8009ca2:	2300      	movs	r3, #0
 8009ca4:	9309      	str	r3, [sp, #36]	@ 0x24
 8009ca6:	940b      	str	r4, [sp, #44]	@ 0x2c
 8009ca8:	f04f 33ff 	mov.w	r3, #4294967295
 8009cac:	9300      	str	r3, [sp, #0]
 8009cae:	9307      	str	r3, [sp, #28]
 8009cb0:	2200      	movs	r2, #0
 8009cb2:	2312      	movs	r3, #18
 8009cb4:	e7d0      	b.n	8009c58 <_dtoa_r+0x238>
 8009cb6:	2301      	movs	r3, #1
 8009cb8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009cba:	e7f5      	b.n	8009ca8 <_dtoa_r+0x288>
 8009cbc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009cbe:	9300      	str	r3, [sp, #0]
 8009cc0:	9307      	str	r3, [sp, #28]
 8009cc2:	e7d7      	b.n	8009c74 <_dtoa_r+0x254>
 8009cc4:	3101      	adds	r1, #1
 8009cc6:	0052      	lsls	r2, r2, #1
 8009cc8:	e7d8      	b.n	8009c7c <_dtoa_r+0x25c>
 8009cca:	bf00      	nop
 8009ccc:	f3af 8000 	nop.w
 8009cd0:	636f4361 	.word	0x636f4361
 8009cd4:	3fd287a7 	.word	0x3fd287a7
 8009cd8:	8b60c8b3 	.word	0x8b60c8b3
 8009cdc:	3fc68a28 	.word	0x3fc68a28
 8009ce0:	509f79fb 	.word	0x509f79fb
 8009ce4:	3fd34413 	.word	0x3fd34413
 8009ce8:	080123ac 	.word	0x080123ac
 8009cec:	080125f3 	.word	0x080125f3
 8009cf0:	7ff00000 	.word	0x7ff00000
 8009cf4:	0801252d 	.word	0x0801252d
 8009cf8:	3ff80000 	.word	0x3ff80000
 8009cfc:	080126f0 	.word	0x080126f0
 8009d00:	0801264b 	.word	0x0801264b
 8009d04:	080125ef 	.word	0x080125ef
 8009d08:	0801252c 	.word	0x0801252c
 8009d0c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009d10:	6018      	str	r0, [r3, #0]
 8009d12:	9b07      	ldr	r3, [sp, #28]
 8009d14:	2b0e      	cmp	r3, #14
 8009d16:	f200 80a4 	bhi.w	8009e62 <_dtoa_r+0x442>
 8009d1a:	2c00      	cmp	r4, #0
 8009d1c:	f000 80a1 	beq.w	8009e62 <_dtoa_r+0x442>
 8009d20:	2f00      	cmp	r7, #0
 8009d22:	dd33      	ble.n	8009d8c <_dtoa_r+0x36c>
 8009d24:	4bad      	ldr	r3, [pc, #692]	@ (8009fdc <_dtoa_r+0x5bc>)
 8009d26:	f007 020f 	and.w	r2, r7, #15
 8009d2a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009d2e:	ed93 7b00 	vldr	d7, [r3]
 8009d32:	05f8      	lsls	r0, r7, #23
 8009d34:	ed8d 7b04 	vstr	d7, [sp, #16]
 8009d38:	ea4f 1427 	mov.w	r4, r7, asr #4
 8009d3c:	d516      	bpl.n	8009d6c <_dtoa_r+0x34c>
 8009d3e:	4ba8      	ldr	r3, [pc, #672]	@ (8009fe0 <_dtoa_r+0x5c0>)
 8009d40:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009d44:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009d48:	f7f6 fd80 	bl	800084c <__aeabi_ddiv>
 8009d4c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009d50:	f004 040f 	and.w	r4, r4, #15
 8009d54:	2603      	movs	r6, #3
 8009d56:	4da2      	ldr	r5, [pc, #648]	@ (8009fe0 <_dtoa_r+0x5c0>)
 8009d58:	b954      	cbnz	r4, 8009d70 <_dtoa_r+0x350>
 8009d5a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009d5e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009d62:	f7f6 fd73 	bl	800084c <__aeabi_ddiv>
 8009d66:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009d6a:	e028      	b.n	8009dbe <_dtoa_r+0x39e>
 8009d6c:	2602      	movs	r6, #2
 8009d6e:	e7f2      	b.n	8009d56 <_dtoa_r+0x336>
 8009d70:	07e1      	lsls	r1, r4, #31
 8009d72:	d508      	bpl.n	8009d86 <_dtoa_r+0x366>
 8009d74:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009d78:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009d7c:	f7f6 fc3c 	bl	80005f8 <__aeabi_dmul>
 8009d80:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009d84:	3601      	adds	r6, #1
 8009d86:	1064      	asrs	r4, r4, #1
 8009d88:	3508      	adds	r5, #8
 8009d8a:	e7e5      	b.n	8009d58 <_dtoa_r+0x338>
 8009d8c:	f000 80d2 	beq.w	8009f34 <_dtoa_r+0x514>
 8009d90:	427c      	negs	r4, r7
 8009d92:	4b92      	ldr	r3, [pc, #584]	@ (8009fdc <_dtoa_r+0x5bc>)
 8009d94:	4d92      	ldr	r5, [pc, #584]	@ (8009fe0 <_dtoa_r+0x5c0>)
 8009d96:	f004 020f 	and.w	r2, r4, #15
 8009d9a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009d9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009da2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009da6:	f7f6 fc27 	bl	80005f8 <__aeabi_dmul>
 8009daa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009dae:	1124      	asrs	r4, r4, #4
 8009db0:	2300      	movs	r3, #0
 8009db2:	2602      	movs	r6, #2
 8009db4:	2c00      	cmp	r4, #0
 8009db6:	f040 80b2 	bne.w	8009f1e <_dtoa_r+0x4fe>
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d1d3      	bne.n	8009d66 <_dtoa_r+0x346>
 8009dbe:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009dc0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	f000 80b7 	beq.w	8009f38 <_dtoa_r+0x518>
 8009dca:	4b86      	ldr	r3, [pc, #536]	@ (8009fe4 <_dtoa_r+0x5c4>)
 8009dcc:	2200      	movs	r2, #0
 8009dce:	4620      	mov	r0, r4
 8009dd0:	4629      	mov	r1, r5
 8009dd2:	f7f6 fe83 	bl	8000adc <__aeabi_dcmplt>
 8009dd6:	2800      	cmp	r0, #0
 8009dd8:	f000 80ae 	beq.w	8009f38 <_dtoa_r+0x518>
 8009ddc:	9b07      	ldr	r3, [sp, #28]
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	f000 80aa 	beq.w	8009f38 <_dtoa_r+0x518>
 8009de4:	9b00      	ldr	r3, [sp, #0]
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	dd37      	ble.n	8009e5a <_dtoa_r+0x43a>
 8009dea:	1e7b      	subs	r3, r7, #1
 8009dec:	9304      	str	r3, [sp, #16]
 8009dee:	4620      	mov	r0, r4
 8009df0:	4b7d      	ldr	r3, [pc, #500]	@ (8009fe8 <_dtoa_r+0x5c8>)
 8009df2:	2200      	movs	r2, #0
 8009df4:	4629      	mov	r1, r5
 8009df6:	f7f6 fbff 	bl	80005f8 <__aeabi_dmul>
 8009dfa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009dfe:	9c00      	ldr	r4, [sp, #0]
 8009e00:	3601      	adds	r6, #1
 8009e02:	4630      	mov	r0, r6
 8009e04:	f7f6 fb8e 	bl	8000524 <__aeabi_i2d>
 8009e08:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009e0c:	f7f6 fbf4 	bl	80005f8 <__aeabi_dmul>
 8009e10:	4b76      	ldr	r3, [pc, #472]	@ (8009fec <_dtoa_r+0x5cc>)
 8009e12:	2200      	movs	r2, #0
 8009e14:	f7f6 fa3a 	bl	800028c <__adddf3>
 8009e18:	4605      	mov	r5, r0
 8009e1a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8009e1e:	2c00      	cmp	r4, #0
 8009e20:	f040 808d 	bne.w	8009f3e <_dtoa_r+0x51e>
 8009e24:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009e28:	4b71      	ldr	r3, [pc, #452]	@ (8009ff0 <_dtoa_r+0x5d0>)
 8009e2a:	2200      	movs	r2, #0
 8009e2c:	f7f6 fa2c 	bl	8000288 <__aeabi_dsub>
 8009e30:	4602      	mov	r2, r0
 8009e32:	460b      	mov	r3, r1
 8009e34:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009e38:	462a      	mov	r2, r5
 8009e3a:	4633      	mov	r3, r6
 8009e3c:	f7f6 fe6c 	bl	8000b18 <__aeabi_dcmpgt>
 8009e40:	2800      	cmp	r0, #0
 8009e42:	f040 828b 	bne.w	800a35c <_dtoa_r+0x93c>
 8009e46:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009e4a:	462a      	mov	r2, r5
 8009e4c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8009e50:	f7f6 fe44 	bl	8000adc <__aeabi_dcmplt>
 8009e54:	2800      	cmp	r0, #0
 8009e56:	f040 8128 	bne.w	800a0aa <_dtoa_r+0x68a>
 8009e5a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8009e5e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8009e62:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	f2c0 815a 	blt.w	800a11e <_dtoa_r+0x6fe>
 8009e6a:	2f0e      	cmp	r7, #14
 8009e6c:	f300 8157 	bgt.w	800a11e <_dtoa_r+0x6fe>
 8009e70:	4b5a      	ldr	r3, [pc, #360]	@ (8009fdc <_dtoa_r+0x5bc>)
 8009e72:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009e76:	ed93 7b00 	vldr	d7, [r3]
 8009e7a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	ed8d 7b00 	vstr	d7, [sp]
 8009e82:	da03      	bge.n	8009e8c <_dtoa_r+0x46c>
 8009e84:	9b07      	ldr	r3, [sp, #28]
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	f340 8101 	ble.w	800a08e <_dtoa_r+0x66e>
 8009e8c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8009e90:	4656      	mov	r6, sl
 8009e92:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009e96:	4620      	mov	r0, r4
 8009e98:	4629      	mov	r1, r5
 8009e9a:	f7f6 fcd7 	bl	800084c <__aeabi_ddiv>
 8009e9e:	f7f6 fe5b 	bl	8000b58 <__aeabi_d2iz>
 8009ea2:	4680      	mov	r8, r0
 8009ea4:	f7f6 fb3e 	bl	8000524 <__aeabi_i2d>
 8009ea8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009eac:	f7f6 fba4 	bl	80005f8 <__aeabi_dmul>
 8009eb0:	4602      	mov	r2, r0
 8009eb2:	460b      	mov	r3, r1
 8009eb4:	4620      	mov	r0, r4
 8009eb6:	4629      	mov	r1, r5
 8009eb8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8009ebc:	f7f6 f9e4 	bl	8000288 <__aeabi_dsub>
 8009ec0:	f806 4b01 	strb.w	r4, [r6], #1
 8009ec4:	9d07      	ldr	r5, [sp, #28]
 8009ec6:	eba6 040a 	sub.w	r4, r6, sl
 8009eca:	42a5      	cmp	r5, r4
 8009ecc:	4602      	mov	r2, r0
 8009ece:	460b      	mov	r3, r1
 8009ed0:	f040 8117 	bne.w	800a102 <_dtoa_r+0x6e2>
 8009ed4:	f7f6 f9da 	bl	800028c <__adddf3>
 8009ed8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009edc:	4604      	mov	r4, r0
 8009ede:	460d      	mov	r5, r1
 8009ee0:	f7f6 fe1a 	bl	8000b18 <__aeabi_dcmpgt>
 8009ee4:	2800      	cmp	r0, #0
 8009ee6:	f040 80f9 	bne.w	800a0dc <_dtoa_r+0x6bc>
 8009eea:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009eee:	4620      	mov	r0, r4
 8009ef0:	4629      	mov	r1, r5
 8009ef2:	f7f6 fde9 	bl	8000ac8 <__aeabi_dcmpeq>
 8009ef6:	b118      	cbz	r0, 8009f00 <_dtoa_r+0x4e0>
 8009ef8:	f018 0f01 	tst.w	r8, #1
 8009efc:	f040 80ee 	bne.w	800a0dc <_dtoa_r+0x6bc>
 8009f00:	4649      	mov	r1, r9
 8009f02:	4658      	mov	r0, fp
 8009f04:	f000 fbda 	bl	800a6bc <_Bfree>
 8009f08:	2300      	movs	r3, #0
 8009f0a:	7033      	strb	r3, [r6, #0]
 8009f0c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009f0e:	3701      	adds	r7, #1
 8009f10:	601f      	str	r7, [r3, #0]
 8009f12:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	f000 831d 	beq.w	800a554 <_dtoa_r+0xb34>
 8009f1a:	601e      	str	r6, [r3, #0]
 8009f1c:	e31a      	b.n	800a554 <_dtoa_r+0xb34>
 8009f1e:	07e2      	lsls	r2, r4, #31
 8009f20:	d505      	bpl.n	8009f2e <_dtoa_r+0x50e>
 8009f22:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009f26:	f7f6 fb67 	bl	80005f8 <__aeabi_dmul>
 8009f2a:	3601      	adds	r6, #1
 8009f2c:	2301      	movs	r3, #1
 8009f2e:	1064      	asrs	r4, r4, #1
 8009f30:	3508      	adds	r5, #8
 8009f32:	e73f      	b.n	8009db4 <_dtoa_r+0x394>
 8009f34:	2602      	movs	r6, #2
 8009f36:	e742      	b.n	8009dbe <_dtoa_r+0x39e>
 8009f38:	9c07      	ldr	r4, [sp, #28]
 8009f3a:	9704      	str	r7, [sp, #16]
 8009f3c:	e761      	b.n	8009e02 <_dtoa_r+0x3e2>
 8009f3e:	4b27      	ldr	r3, [pc, #156]	@ (8009fdc <_dtoa_r+0x5bc>)
 8009f40:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009f42:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009f46:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009f4a:	4454      	add	r4, sl
 8009f4c:	2900      	cmp	r1, #0
 8009f4e:	d053      	beq.n	8009ff8 <_dtoa_r+0x5d8>
 8009f50:	4928      	ldr	r1, [pc, #160]	@ (8009ff4 <_dtoa_r+0x5d4>)
 8009f52:	2000      	movs	r0, #0
 8009f54:	f7f6 fc7a 	bl	800084c <__aeabi_ddiv>
 8009f58:	4633      	mov	r3, r6
 8009f5a:	462a      	mov	r2, r5
 8009f5c:	f7f6 f994 	bl	8000288 <__aeabi_dsub>
 8009f60:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009f64:	4656      	mov	r6, sl
 8009f66:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009f6a:	f7f6 fdf5 	bl	8000b58 <__aeabi_d2iz>
 8009f6e:	4605      	mov	r5, r0
 8009f70:	f7f6 fad8 	bl	8000524 <__aeabi_i2d>
 8009f74:	4602      	mov	r2, r0
 8009f76:	460b      	mov	r3, r1
 8009f78:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009f7c:	f7f6 f984 	bl	8000288 <__aeabi_dsub>
 8009f80:	3530      	adds	r5, #48	@ 0x30
 8009f82:	4602      	mov	r2, r0
 8009f84:	460b      	mov	r3, r1
 8009f86:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009f8a:	f806 5b01 	strb.w	r5, [r6], #1
 8009f8e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009f92:	f7f6 fda3 	bl	8000adc <__aeabi_dcmplt>
 8009f96:	2800      	cmp	r0, #0
 8009f98:	d171      	bne.n	800a07e <_dtoa_r+0x65e>
 8009f9a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009f9e:	4911      	ldr	r1, [pc, #68]	@ (8009fe4 <_dtoa_r+0x5c4>)
 8009fa0:	2000      	movs	r0, #0
 8009fa2:	f7f6 f971 	bl	8000288 <__aeabi_dsub>
 8009fa6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009faa:	f7f6 fd97 	bl	8000adc <__aeabi_dcmplt>
 8009fae:	2800      	cmp	r0, #0
 8009fb0:	f040 8095 	bne.w	800a0de <_dtoa_r+0x6be>
 8009fb4:	42a6      	cmp	r6, r4
 8009fb6:	f43f af50 	beq.w	8009e5a <_dtoa_r+0x43a>
 8009fba:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8009fbe:	4b0a      	ldr	r3, [pc, #40]	@ (8009fe8 <_dtoa_r+0x5c8>)
 8009fc0:	2200      	movs	r2, #0
 8009fc2:	f7f6 fb19 	bl	80005f8 <__aeabi_dmul>
 8009fc6:	4b08      	ldr	r3, [pc, #32]	@ (8009fe8 <_dtoa_r+0x5c8>)
 8009fc8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009fcc:	2200      	movs	r2, #0
 8009fce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009fd2:	f7f6 fb11 	bl	80005f8 <__aeabi_dmul>
 8009fd6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009fda:	e7c4      	b.n	8009f66 <_dtoa_r+0x546>
 8009fdc:	080126f0 	.word	0x080126f0
 8009fe0:	080126c8 	.word	0x080126c8
 8009fe4:	3ff00000 	.word	0x3ff00000
 8009fe8:	40240000 	.word	0x40240000
 8009fec:	401c0000 	.word	0x401c0000
 8009ff0:	40140000 	.word	0x40140000
 8009ff4:	3fe00000 	.word	0x3fe00000
 8009ff8:	4631      	mov	r1, r6
 8009ffa:	4628      	mov	r0, r5
 8009ffc:	f7f6 fafc 	bl	80005f8 <__aeabi_dmul>
 800a000:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a004:	9415      	str	r4, [sp, #84]	@ 0x54
 800a006:	4656      	mov	r6, sl
 800a008:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a00c:	f7f6 fda4 	bl	8000b58 <__aeabi_d2iz>
 800a010:	4605      	mov	r5, r0
 800a012:	f7f6 fa87 	bl	8000524 <__aeabi_i2d>
 800a016:	4602      	mov	r2, r0
 800a018:	460b      	mov	r3, r1
 800a01a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a01e:	f7f6 f933 	bl	8000288 <__aeabi_dsub>
 800a022:	3530      	adds	r5, #48	@ 0x30
 800a024:	f806 5b01 	strb.w	r5, [r6], #1
 800a028:	4602      	mov	r2, r0
 800a02a:	460b      	mov	r3, r1
 800a02c:	42a6      	cmp	r6, r4
 800a02e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a032:	f04f 0200 	mov.w	r2, #0
 800a036:	d124      	bne.n	800a082 <_dtoa_r+0x662>
 800a038:	4bac      	ldr	r3, [pc, #688]	@ (800a2ec <_dtoa_r+0x8cc>)
 800a03a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800a03e:	f7f6 f925 	bl	800028c <__adddf3>
 800a042:	4602      	mov	r2, r0
 800a044:	460b      	mov	r3, r1
 800a046:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a04a:	f7f6 fd65 	bl	8000b18 <__aeabi_dcmpgt>
 800a04e:	2800      	cmp	r0, #0
 800a050:	d145      	bne.n	800a0de <_dtoa_r+0x6be>
 800a052:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a056:	49a5      	ldr	r1, [pc, #660]	@ (800a2ec <_dtoa_r+0x8cc>)
 800a058:	2000      	movs	r0, #0
 800a05a:	f7f6 f915 	bl	8000288 <__aeabi_dsub>
 800a05e:	4602      	mov	r2, r0
 800a060:	460b      	mov	r3, r1
 800a062:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a066:	f7f6 fd39 	bl	8000adc <__aeabi_dcmplt>
 800a06a:	2800      	cmp	r0, #0
 800a06c:	f43f aef5 	beq.w	8009e5a <_dtoa_r+0x43a>
 800a070:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800a072:	1e73      	subs	r3, r6, #1
 800a074:	9315      	str	r3, [sp, #84]	@ 0x54
 800a076:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a07a:	2b30      	cmp	r3, #48	@ 0x30
 800a07c:	d0f8      	beq.n	800a070 <_dtoa_r+0x650>
 800a07e:	9f04      	ldr	r7, [sp, #16]
 800a080:	e73e      	b.n	8009f00 <_dtoa_r+0x4e0>
 800a082:	4b9b      	ldr	r3, [pc, #620]	@ (800a2f0 <_dtoa_r+0x8d0>)
 800a084:	f7f6 fab8 	bl	80005f8 <__aeabi_dmul>
 800a088:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a08c:	e7bc      	b.n	800a008 <_dtoa_r+0x5e8>
 800a08e:	d10c      	bne.n	800a0aa <_dtoa_r+0x68a>
 800a090:	4b98      	ldr	r3, [pc, #608]	@ (800a2f4 <_dtoa_r+0x8d4>)
 800a092:	2200      	movs	r2, #0
 800a094:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a098:	f7f6 faae 	bl	80005f8 <__aeabi_dmul>
 800a09c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a0a0:	f7f6 fd30 	bl	8000b04 <__aeabi_dcmpge>
 800a0a4:	2800      	cmp	r0, #0
 800a0a6:	f000 8157 	beq.w	800a358 <_dtoa_r+0x938>
 800a0aa:	2400      	movs	r4, #0
 800a0ac:	4625      	mov	r5, r4
 800a0ae:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a0b0:	43db      	mvns	r3, r3
 800a0b2:	9304      	str	r3, [sp, #16]
 800a0b4:	4656      	mov	r6, sl
 800a0b6:	2700      	movs	r7, #0
 800a0b8:	4621      	mov	r1, r4
 800a0ba:	4658      	mov	r0, fp
 800a0bc:	f000 fafe 	bl	800a6bc <_Bfree>
 800a0c0:	2d00      	cmp	r5, #0
 800a0c2:	d0dc      	beq.n	800a07e <_dtoa_r+0x65e>
 800a0c4:	b12f      	cbz	r7, 800a0d2 <_dtoa_r+0x6b2>
 800a0c6:	42af      	cmp	r7, r5
 800a0c8:	d003      	beq.n	800a0d2 <_dtoa_r+0x6b2>
 800a0ca:	4639      	mov	r1, r7
 800a0cc:	4658      	mov	r0, fp
 800a0ce:	f000 faf5 	bl	800a6bc <_Bfree>
 800a0d2:	4629      	mov	r1, r5
 800a0d4:	4658      	mov	r0, fp
 800a0d6:	f000 faf1 	bl	800a6bc <_Bfree>
 800a0da:	e7d0      	b.n	800a07e <_dtoa_r+0x65e>
 800a0dc:	9704      	str	r7, [sp, #16]
 800a0de:	4633      	mov	r3, r6
 800a0e0:	461e      	mov	r6, r3
 800a0e2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a0e6:	2a39      	cmp	r2, #57	@ 0x39
 800a0e8:	d107      	bne.n	800a0fa <_dtoa_r+0x6da>
 800a0ea:	459a      	cmp	sl, r3
 800a0ec:	d1f8      	bne.n	800a0e0 <_dtoa_r+0x6c0>
 800a0ee:	9a04      	ldr	r2, [sp, #16]
 800a0f0:	3201      	adds	r2, #1
 800a0f2:	9204      	str	r2, [sp, #16]
 800a0f4:	2230      	movs	r2, #48	@ 0x30
 800a0f6:	f88a 2000 	strb.w	r2, [sl]
 800a0fa:	781a      	ldrb	r2, [r3, #0]
 800a0fc:	3201      	adds	r2, #1
 800a0fe:	701a      	strb	r2, [r3, #0]
 800a100:	e7bd      	b.n	800a07e <_dtoa_r+0x65e>
 800a102:	4b7b      	ldr	r3, [pc, #492]	@ (800a2f0 <_dtoa_r+0x8d0>)
 800a104:	2200      	movs	r2, #0
 800a106:	f7f6 fa77 	bl	80005f8 <__aeabi_dmul>
 800a10a:	2200      	movs	r2, #0
 800a10c:	2300      	movs	r3, #0
 800a10e:	4604      	mov	r4, r0
 800a110:	460d      	mov	r5, r1
 800a112:	f7f6 fcd9 	bl	8000ac8 <__aeabi_dcmpeq>
 800a116:	2800      	cmp	r0, #0
 800a118:	f43f aebb 	beq.w	8009e92 <_dtoa_r+0x472>
 800a11c:	e6f0      	b.n	8009f00 <_dtoa_r+0x4e0>
 800a11e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800a120:	2a00      	cmp	r2, #0
 800a122:	f000 80db 	beq.w	800a2dc <_dtoa_r+0x8bc>
 800a126:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a128:	2a01      	cmp	r2, #1
 800a12a:	f300 80bf 	bgt.w	800a2ac <_dtoa_r+0x88c>
 800a12e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800a130:	2a00      	cmp	r2, #0
 800a132:	f000 80b7 	beq.w	800a2a4 <_dtoa_r+0x884>
 800a136:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800a13a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800a13c:	4646      	mov	r6, r8
 800a13e:	9a08      	ldr	r2, [sp, #32]
 800a140:	2101      	movs	r1, #1
 800a142:	441a      	add	r2, r3
 800a144:	4658      	mov	r0, fp
 800a146:	4498      	add	r8, r3
 800a148:	9208      	str	r2, [sp, #32]
 800a14a:	f000 fb6b 	bl	800a824 <__i2b>
 800a14e:	4605      	mov	r5, r0
 800a150:	b15e      	cbz	r6, 800a16a <_dtoa_r+0x74a>
 800a152:	9b08      	ldr	r3, [sp, #32]
 800a154:	2b00      	cmp	r3, #0
 800a156:	dd08      	ble.n	800a16a <_dtoa_r+0x74a>
 800a158:	42b3      	cmp	r3, r6
 800a15a:	9a08      	ldr	r2, [sp, #32]
 800a15c:	bfa8      	it	ge
 800a15e:	4633      	movge	r3, r6
 800a160:	eba8 0803 	sub.w	r8, r8, r3
 800a164:	1af6      	subs	r6, r6, r3
 800a166:	1ad3      	subs	r3, r2, r3
 800a168:	9308      	str	r3, [sp, #32]
 800a16a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a16c:	b1f3      	cbz	r3, 800a1ac <_dtoa_r+0x78c>
 800a16e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a170:	2b00      	cmp	r3, #0
 800a172:	f000 80b7 	beq.w	800a2e4 <_dtoa_r+0x8c4>
 800a176:	b18c      	cbz	r4, 800a19c <_dtoa_r+0x77c>
 800a178:	4629      	mov	r1, r5
 800a17a:	4622      	mov	r2, r4
 800a17c:	4658      	mov	r0, fp
 800a17e:	f000 fc11 	bl	800a9a4 <__pow5mult>
 800a182:	464a      	mov	r2, r9
 800a184:	4601      	mov	r1, r0
 800a186:	4605      	mov	r5, r0
 800a188:	4658      	mov	r0, fp
 800a18a:	f000 fb61 	bl	800a850 <__multiply>
 800a18e:	4649      	mov	r1, r9
 800a190:	9004      	str	r0, [sp, #16]
 800a192:	4658      	mov	r0, fp
 800a194:	f000 fa92 	bl	800a6bc <_Bfree>
 800a198:	9b04      	ldr	r3, [sp, #16]
 800a19a:	4699      	mov	r9, r3
 800a19c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a19e:	1b1a      	subs	r2, r3, r4
 800a1a0:	d004      	beq.n	800a1ac <_dtoa_r+0x78c>
 800a1a2:	4649      	mov	r1, r9
 800a1a4:	4658      	mov	r0, fp
 800a1a6:	f000 fbfd 	bl	800a9a4 <__pow5mult>
 800a1aa:	4681      	mov	r9, r0
 800a1ac:	2101      	movs	r1, #1
 800a1ae:	4658      	mov	r0, fp
 800a1b0:	f000 fb38 	bl	800a824 <__i2b>
 800a1b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a1b6:	4604      	mov	r4, r0
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	f000 81cf 	beq.w	800a55c <_dtoa_r+0xb3c>
 800a1be:	461a      	mov	r2, r3
 800a1c0:	4601      	mov	r1, r0
 800a1c2:	4658      	mov	r0, fp
 800a1c4:	f000 fbee 	bl	800a9a4 <__pow5mult>
 800a1c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a1ca:	2b01      	cmp	r3, #1
 800a1cc:	4604      	mov	r4, r0
 800a1ce:	f300 8095 	bgt.w	800a2fc <_dtoa_r+0x8dc>
 800a1d2:	9b02      	ldr	r3, [sp, #8]
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	f040 8087 	bne.w	800a2e8 <_dtoa_r+0x8c8>
 800a1da:	9b03      	ldr	r3, [sp, #12]
 800a1dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	f040 8089 	bne.w	800a2f8 <_dtoa_r+0x8d8>
 800a1e6:	9b03      	ldr	r3, [sp, #12]
 800a1e8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a1ec:	0d1b      	lsrs	r3, r3, #20
 800a1ee:	051b      	lsls	r3, r3, #20
 800a1f0:	b12b      	cbz	r3, 800a1fe <_dtoa_r+0x7de>
 800a1f2:	9b08      	ldr	r3, [sp, #32]
 800a1f4:	3301      	adds	r3, #1
 800a1f6:	9308      	str	r3, [sp, #32]
 800a1f8:	f108 0801 	add.w	r8, r8, #1
 800a1fc:	2301      	movs	r3, #1
 800a1fe:	930a      	str	r3, [sp, #40]	@ 0x28
 800a200:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a202:	2b00      	cmp	r3, #0
 800a204:	f000 81b0 	beq.w	800a568 <_dtoa_r+0xb48>
 800a208:	6923      	ldr	r3, [r4, #16]
 800a20a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a20e:	6918      	ldr	r0, [r3, #16]
 800a210:	f000 fabc 	bl	800a78c <__hi0bits>
 800a214:	f1c0 0020 	rsb	r0, r0, #32
 800a218:	9b08      	ldr	r3, [sp, #32]
 800a21a:	4418      	add	r0, r3
 800a21c:	f010 001f 	ands.w	r0, r0, #31
 800a220:	d077      	beq.n	800a312 <_dtoa_r+0x8f2>
 800a222:	f1c0 0320 	rsb	r3, r0, #32
 800a226:	2b04      	cmp	r3, #4
 800a228:	dd6b      	ble.n	800a302 <_dtoa_r+0x8e2>
 800a22a:	9b08      	ldr	r3, [sp, #32]
 800a22c:	f1c0 001c 	rsb	r0, r0, #28
 800a230:	4403      	add	r3, r0
 800a232:	4480      	add	r8, r0
 800a234:	4406      	add	r6, r0
 800a236:	9308      	str	r3, [sp, #32]
 800a238:	f1b8 0f00 	cmp.w	r8, #0
 800a23c:	dd05      	ble.n	800a24a <_dtoa_r+0x82a>
 800a23e:	4649      	mov	r1, r9
 800a240:	4642      	mov	r2, r8
 800a242:	4658      	mov	r0, fp
 800a244:	f000 fc08 	bl	800aa58 <__lshift>
 800a248:	4681      	mov	r9, r0
 800a24a:	9b08      	ldr	r3, [sp, #32]
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	dd05      	ble.n	800a25c <_dtoa_r+0x83c>
 800a250:	4621      	mov	r1, r4
 800a252:	461a      	mov	r2, r3
 800a254:	4658      	mov	r0, fp
 800a256:	f000 fbff 	bl	800aa58 <__lshift>
 800a25a:	4604      	mov	r4, r0
 800a25c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d059      	beq.n	800a316 <_dtoa_r+0x8f6>
 800a262:	4621      	mov	r1, r4
 800a264:	4648      	mov	r0, r9
 800a266:	f000 fc63 	bl	800ab30 <__mcmp>
 800a26a:	2800      	cmp	r0, #0
 800a26c:	da53      	bge.n	800a316 <_dtoa_r+0x8f6>
 800a26e:	1e7b      	subs	r3, r7, #1
 800a270:	9304      	str	r3, [sp, #16]
 800a272:	4649      	mov	r1, r9
 800a274:	2300      	movs	r3, #0
 800a276:	220a      	movs	r2, #10
 800a278:	4658      	mov	r0, fp
 800a27a:	f000 fa41 	bl	800a700 <__multadd>
 800a27e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a280:	4681      	mov	r9, r0
 800a282:	2b00      	cmp	r3, #0
 800a284:	f000 8172 	beq.w	800a56c <_dtoa_r+0xb4c>
 800a288:	2300      	movs	r3, #0
 800a28a:	4629      	mov	r1, r5
 800a28c:	220a      	movs	r2, #10
 800a28e:	4658      	mov	r0, fp
 800a290:	f000 fa36 	bl	800a700 <__multadd>
 800a294:	9b00      	ldr	r3, [sp, #0]
 800a296:	2b00      	cmp	r3, #0
 800a298:	4605      	mov	r5, r0
 800a29a:	dc67      	bgt.n	800a36c <_dtoa_r+0x94c>
 800a29c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a29e:	2b02      	cmp	r3, #2
 800a2a0:	dc41      	bgt.n	800a326 <_dtoa_r+0x906>
 800a2a2:	e063      	b.n	800a36c <_dtoa_r+0x94c>
 800a2a4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800a2a6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800a2aa:	e746      	b.n	800a13a <_dtoa_r+0x71a>
 800a2ac:	9b07      	ldr	r3, [sp, #28]
 800a2ae:	1e5c      	subs	r4, r3, #1
 800a2b0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a2b2:	42a3      	cmp	r3, r4
 800a2b4:	bfbf      	itttt	lt
 800a2b6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800a2b8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800a2ba:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800a2bc:	1ae3      	sublt	r3, r4, r3
 800a2be:	bfb4      	ite	lt
 800a2c0:	18d2      	addlt	r2, r2, r3
 800a2c2:	1b1c      	subge	r4, r3, r4
 800a2c4:	9b07      	ldr	r3, [sp, #28]
 800a2c6:	bfbc      	itt	lt
 800a2c8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800a2ca:	2400      	movlt	r4, #0
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	bfb5      	itete	lt
 800a2d0:	eba8 0603 	sublt.w	r6, r8, r3
 800a2d4:	9b07      	ldrge	r3, [sp, #28]
 800a2d6:	2300      	movlt	r3, #0
 800a2d8:	4646      	movge	r6, r8
 800a2da:	e730      	b.n	800a13e <_dtoa_r+0x71e>
 800a2dc:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800a2de:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800a2e0:	4646      	mov	r6, r8
 800a2e2:	e735      	b.n	800a150 <_dtoa_r+0x730>
 800a2e4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a2e6:	e75c      	b.n	800a1a2 <_dtoa_r+0x782>
 800a2e8:	2300      	movs	r3, #0
 800a2ea:	e788      	b.n	800a1fe <_dtoa_r+0x7de>
 800a2ec:	3fe00000 	.word	0x3fe00000
 800a2f0:	40240000 	.word	0x40240000
 800a2f4:	40140000 	.word	0x40140000
 800a2f8:	9b02      	ldr	r3, [sp, #8]
 800a2fa:	e780      	b.n	800a1fe <_dtoa_r+0x7de>
 800a2fc:	2300      	movs	r3, #0
 800a2fe:	930a      	str	r3, [sp, #40]	@ 0x28
 800a300:	e782      	b.n	800a208 <_dtoa_r+0x7e8>
 800a302:	d099      	beq.n	800a238 <_dtoa_r+0x818>
 800a304:	9a08      	ldr	r2, [sp, #32]
 800a306:	331c      	adds	r3, #28
 800a308:	441a      	add	r2, r3
 800a30a:	4498      	add	r8, r3
 800a30c:	441e      	add	r6, r3
 800a30e:	9208      	str	r2, [sp, #32]
 800a310:	e792      	b.n	800a238 <_dtoa_r+0x818>
 800a312:	4603      	mov	r3, r0
 800a314:	e7f6      	b.n	800a304 <_dtoa_r+0x8e4>
 800a316:	9b07      	ldr	r3, [sp, #28]
 800a318:	9704      	str	r7, [sp, #16]
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	dc20      	bgt.n	800a360 <_dtoa_r+0x940>
 800a31e:	9300      	str	r3, [sp, #0]
 800a320:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a322:	2b02      	cmp	r3, #2
 800a324:	dd1e      	ble.n	800a364 <_dtoa_r+0x944>
 800a326:	9b00      	ldr	r3, [sp, #0]
 800a328:	2b00      	cmp	r3, #0
 800a32a:	f47f aec0 	bne.w	800a0ae <_dtoa_r+0x68e>
 800a32e:	4621      	mov	r1, r4
 800a330:	2205      	movs	r2, #5
 800a332:	4658      	mov	r0, fp
 800a334:	f000 f9e4 	bl	800a700 <__multadd>
 800a338:	4601      	mov	r1, r0
 800a33a:	4604      	mov	r4, r0
 800a33c:	4648      	mov	r0, r9
 800a33e:	f000 fbf7 	bl	800ab30 <__mcmp>
 800a342:	2800      	cmp	r0, #0
 800a344:	f77f aeb3 	ble.w	800a0ae <_dtoa_r+0x68e>
 800a348:	4656      	mov	r6, sl
 800a34a:	2331      	movs	r3, #49	@ 0x31
 800a34c:	f806 3b01 	strb.w	r3, [r6], #1
 800a350:	9b04      	ldr	r3, [sp, #16]
 800a352:	3301      	adds	r3, #1
 800a354:	9304      	str	r3, [sp, #16]
 800a356:	e6ae      	b.n	800a0b6 <_dtoa_r+0x696>
 800a358:	9c07      	ldr	r4, [sp, #28]
 800a35a:	9704      	str	r7, [sp, #16]
 800a35c:	4625      	mov	r5, r4
 800a35e:	e7f3      	b.n	800a348 <_dtoa_r+0x928>
 800a360:	9b07      	ldr	r3, [sp, #28]
 800a362:	9300      	str	r3, [sp, #0]
 800a364:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a366:	2b00      	cmp	r3, #0
 800a368:	f000 8104 	beq.w	800a574 <_dtoa_r+0xb54>
 800a36c:	2e00      	cmp	r6, #0
 800a36e:	dd05      	ble.n	800a37c <_dtoa_r+0x95c>
 800a370:	4629      	mov	r1, r5
 800a372:	4632      	mov	r2, r6
 800a374:	4658      	mov	r0, fp
 800a376:	f000 fb6f 	bl	800aa58 <__lshift>
 800a37a:	4605      	mov	r5, r0
 800a37c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d05a      	beq.n	800a438 <_dtoa_r+0xa18>
 800a382:	6869      	ldr	r1, [r5, #4]
 800a384:	4658      	mov	r0, fp
 800a386:	f000 f959 	bl	800a63c <_Balloc>
 800a38a:	4606      	mov	r6, r0
 800a38c:	b928      	cbnz	r0, 800a39a <_dtoa_r+0x97a>
 800a38e:	4b84      	ldr	r3, [pc, #528]	@ (800a5a0 <_dtoa_r+0xb80>)
 800a390:	4602      	mov	r2, r0
 800a392:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800a396:	f7ff bb5a 	b.w	8009a4e <_dtoa_r+0x2e>
 800a39a:	692a      	ldr	r2, [r5, #16]
 800a39c:	3202      	adds	r2, #2
 800a39e:	0092      	lsls	r2, r2, #2
 800a3a0:	f105 010c 	add.w	r1, r5, #12
 800a3a4:	300c      	adds	r0, #12
 800a3a6:	f7ff fa84 	bl	80098b2 <memcpy>
 800a3aa:	2201      	movs	r2, #1
 800a3ac:	4631      	mov	r1, r6
 800a3ae:	4658      	mov	r0, fp
 800a3b0:	f000 fb52 	bl	800aa58 <__lshift>
 800a3b4:	f10a 0301 	add.w	r3, sl, #1
 800a3b8:	9307      	str	r3, [sp, #28]
 800a3ba:	9b00      	ldr	r3, [sp, #0]
 800a3bc:	4453      	add	r3, sl
 800a3be:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a3c0:	9b02      	ldr	r3, [sp, #8]
 800a3c2:	f003 0301 	and.w	r3, r3, #1
 800a3c6:	462f      	mov	r7, r5
 800a3c8:	930a      	str	r3, [sp, #40]	@ 0x28
 800a3ca:	4605      	mov	r5, r0
 800a3cc:	9b07      	ldr	r3, [sp, #28]
 800a3ce:	4621      	mov	r1, r4
 800a3d0:	3b01      	subs	r3, #1
 800a3d2:	4648      	mov	r0, r9
 800a3d4:	9300      	str	r3, [sp, #0]
 800a3d6:	f7ff fa99 	bl	800990c <quorem>
 800a3da:	4639      	mov	r1, r7
 800a3dc:	9002      	str	r0, [sp, #8]
 800a3de:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800a3e2:	4648      	mov	r0, r9
 800a3e4:	f000 fba4 	bl	800ab30 <__mcmp>
 800a3e8:	462a      	mov	r2, r5
 800a3ea:	9008      	str	r0, [sp, #32]
 800a3ec:	4621      	mov	r1, r4
 800a3ee:	4658      	mov	r0, fp
 800a3f0:	f000 fbba 	bl	800ab68 <__mdiff>
 800a3f4:	68c2      	ldr	r2, [r0, #12]
 800a3f6:	4606      	mov	r6, r0
 800a3f8:	bb02      	cbnz	r2, 800a43c <_dtoa_r+0xa1c>
 800a3fa:	4601      	mov	r1, r0
 800a3fc:	4648      	mov	r0, r9
 800a3fe:	f000 fb97 	bl	800ab30 <__mcmp>
 800a402:	4602      	mov	r2, r0
 800a404:	4631      	mov	r1, r6
 800a406:	4658      	mov	r0, fp
 800a408:	920e      	str	r2, [sp, #56]	@ 0x38
 800a40a:	f000 f957 	bl	800a6bc <_Bfree>
 800a40e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a410:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a412:	9e07      	ldr	r6, [sp, #28]
 800a414:	ea43 0102 	orr.w	r1, r3, r2
 800a418:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a41a:	4319      	orrs	r1, r3
 800a41c:	d110      	bne.n	800a440 <_dtoa_r+0xa20>
 800a41e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a422:	d029      	beq.n	800a478 <_dtoa_r+0xa58>
 800a424:	9b08      	ldr	r3, [sp, #32]
 800a426:	2b00      	cmp	r3, #0
 800a428:	dd02      	ble.n	800a430 <_dtoa_r+0xa10>
 800a42a:	9b02      	ldr	r3, [sp, #8]
 800a42c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800a430:	9b00      	ldr	r3, [sp, #0]
 800a432:	f883 8000 	strb.w	r8, [r3]
 800a436:	e63f      	b.n	800a0b8 <_dtoa_r+0x698>
 800a438:	4628      	mov	r0, r5
 800a43a:	e7bb      	b.n	800a3b4 <_dtoa_r+0x994>
 800a43c:	2201      	movs	r2, #1
 800a43e:	e7e1      	b.n	800a404 <_dtoa_r+0x9e4>
 800a440:	9b08      	ldr	r3, [sp, #32]
 800a442:	2b00      	cmp	r3, #0
 800a444:	db04      	blt.n	800a450 <_dtoa_r+0xa30>
 800a446:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a448:	430b      	orrs	r3, r1
 800a44a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a44c:	430b      	orrs	r3, r1
 800a44e:	d120      	bne.n	800a492 <_dtoa_r+0xa72>
 800a450:	2a00      	cmp	r2, #0
 800a452:	dded      	ble.n	800a430 <_dtoa_r+0xa10>
 800a454:	4649      	mov	r1, r9
 800a456:	2201      	movs	r2, #1
 800a458:	4658      	mov	r0, fp
 800a45a:	f000 fafd 	bl	800aa58 <__lshift>
 800a45e:	4621      	mov	r1, r4
 800a460:	4681      	mov	r9, r0
 800a462:	f000 fb65 	bl	800ab30 <__mcmp>
 800a466:	2800      	cmp	r0, #0
 800a468:	dc03      	bgt.n	800a472 <_dtoa_r+0xa52>
 800a46a:	d1e1      	bne.n	800a430 <_dtoa_r+0xa10>
 800a46c:	f018 0f01 	tst.w	r8, #1
 800a470:	d0de      	beq.n	800a430 <_dtoa_r+0xa10>
 800a472:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a476:	d1d8      	bne.n	800a42a <_dtoa_r+0xa0a>
 800a478:	9a00      	ldr	r2, [sp, #0]
 800a47a:	2339      	movs	r3, #57	@ 0x39
 800a47c:	7013      	strb	r3, [r2, #0]
 800a47e:	4633      	mov	r3, r6
 800a480:	461e      	mov	r6, r3
 800a482:	3b01      	subs	r3, #1
 800a484:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800a488:	2a39      	cmp	r2, #57	@ 0x39
 800a48a:	d052      	beq.n	800a532 <_dtoa_r+0xb12>
 800a48c:	3201      	adds	r2, #1
 800a48e:	701a      	strb	r2, [r3, #0]
 800a490:	e612      	b.n	800a0b8 <_dtoa_r+0x698>
 800a492:	2a00      	cmp	r2, #0
 800a494:	dd07      	ble.n	800a4a6 <_dtoa_r+0xa86>
 800a496:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a49a:	d0ed      	beq.n	800a478 <_dtoa_r+0xa58>
 800a49c:	9a00      	ldr	r2, [sp, #0]
 800a49e:	f108 0301 	add.w	r3, r8, #1
 800a4a2:	7013      	strb	r3, [r2, #0]
 800a4a4:	e608      	b.n	800a0b8 <_dtoa_r+0x698>
 800a4a6:	9b07      	ldr	r3, [sp, #28]
 800a4a8:	9a07      	ldr	r2, [sp, #28]
 800a4aa:	f803 8c01 	strb.w	r8, [r3, #-1]
 800a4ae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a4b0:	4293      	cmp	r3, r2
 800a4b2:	d028      	beq.n	800a506 <_dtoa_r+0xae6>
 800a4b4:	4649      	mov	r1, r9
 800a4b6:	2300      	movs	r3, #0
 800a4b8:	220a      	movs	r2, #10
 800a4ba:	4658      	mov	r0, fp
 800a4bc:	f000 f920 	bl	800a700 <__multadd>
 800a4c0:	42af      	cmp	r7, r5
 800a4c2:	4681      	mov	r9, r0
 800a4c4:	f04f 0300 	mov.w	r3, #0
 800a4c8:	f04f 020a 	mov.w	r2, #10
 800a4cc:	4639      	mov	r1, r7
 800a4ce:	4658      	mov	r0, fp
 800a4d0:	d107      	bne.n	800a4e2 <_dtoa_r+0xac2>
 800a4d2:	f000 f915 	bl	800a700 <__multadd>
 800a4d6:	4607      	mov	r7, r0
 800a4d8:	4605      	mov	r5, r0
 800a4da:	9b07      	ldr	r3, [sp, #28]
 800a4dc:	3301      	adds	r3, #1
 800a4de:	9307      	str	r3, [sp, #28]
 800a4e0:	e774      	b.n	800a3cc <_dtoa_r+0x9ac>
 800a4e2:	f000 f90d 	bl	800a700 <__multadd>
 800a4e6:	4629      	mov	r1, r5
 800a4e8:	4607      	mov	r7, r0
 800a4ea:	2300      	movs	r3, #0
 800a4ec:	220a      	movs	r2, #10
 800a4ee:	4658      	mov	r0, fp
 800a4f0:	f000 f906 	bl	800a700 <__multadd>
 800a4f4:	4605      	mov	r5, r0
 800a4f6:	e7f0      	b.n	800a4da <_dtoa_r+0xaba>
 800a4f8:	9b00      	ldr	r3, [sp, #0]
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	bfcc      	ite	gt
 800a4fe:	461e      	movgt	r6, r3
 800a500:	2601      	movle	r6, #1
 800a502:	4456      	add	r6, sl
 800a504:	2700      	movs	r7, #0
 800a506:	4649      	mov	r1, r9
 800a508:	2201      	movs	r2, #1
 800a50a:	4658      	mov	r0, fp
 800a50c:	f000 faa4 	bl	800aa58 <__lshift>
 800a510:	4621      	mov	r1, r4
 800a512:	4681      	mov	r9, r0
 800a514:	f000 fb0c 	bl	800ab30 <__mcmp>
 800a518:	2800      	cmp	r0, #0
 800a51a:	dcb0      	bgt.n	800a47e <_dtoa_r+0xa5e>
 800a51c:	d102      	bne.n	800a524 <_dtoa_r+0xb04>
 800a51e:	f018 0f01 	tst.w	r8, #1
 800a522:	d1ac      	bne.n	800a47e <_dtoa_r+0xa5e>
 800a524:	4633      	mov	r3, r6
 800a526:	461e      	mov	r6, r3
 800a528:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a52c:	2a30      	cmp	r2, #48	@ 0x30
 800a52e:	d0fa      	beq.n	800a526 <_dtoa_r+0xb06>
 800a530:	e5c2      	b.n	800a0b8 <_dtoa_r+0x698>
 800a532:	459a      	cmp	sl, r3
 800a534:	d1a4      	bne.n	800a480 <_dtoa_r+0xa60>
 800a536:	9b04      	ldr	r3, [sp, #16]
 800a538:	3301      	adds	r3, #1
 800a53a:	9304      	str	r3, [sp, #16]
 800a53c:	2331      	movs	r3, #49	@ 0x31
 800a53e:	f88a 3000 	strb.w	r3, [sl]
 800a542:	e5b9      	b.n	800a0b8 <_dtoa_r+0x698>
 800a544:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a546:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800a5a4 <_dtoa_r+0xb84>
 800a54a:	b11b      	cbz	r3, 800a554 <_dtoa_r+0xb34>
 800a54c:	f10a 0308 	add.w	r3, sl, #8
 800a550:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800a552:	6013      	str	r3, [r2, #0]
 800a554:	4650      	mov	r0, sl
 800a556:	b019      	add	sp, #100	@ 0x64
 800a558:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a55c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a55e:	2b01      	cmp	r3, #1
 800a560:	f77f ae37 	ble.w	800a1d2 <_dtoa_r+0x7b2>
 800a564:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a566:	930a      	str	r3, [sp, #40]	@ 0x28
 800a568:	2001      	movs	r0, #1
 800a56a:	e655      	b.n	800a218 <_dtoa_r+0x7f8>
 800a56c:	9b00      	ldr	r3, [sp, #0]
 800a56e:	2b00      	cmp	r3, #0
 800a570:	f77f aed6 	ble.w	800a320 <_dtoa_r+0x900>
 800a574:	4656      	mov	r6, sl
 800a576:	4621      	mov	r1, r4
 800a578:	4648      	mov	r0, r9
 800a57a:	f7ff f9c7 	bl	800990c <quorem>
 800a57e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800a582:	f806 8b01 	strb.w	r8, [r6], #1
 800a586:	9b00      	ldr	r3, [sp, #0]
 800a588:	eba6 020a 	sub.w	r2, r6, sl
 800a58c:	4293      	cmp	r3, r2
 800a58e:	ddb3      	ble.n	800a4f8 <_dtoa_r+0xad8>
 800a590:	4649      	mov	r1, r9
 800a592:	2300      	movs	r3, #0
 800a594:	220a      	movs	r2, #10
 800a596:	4658      	mov	r0, fp
 800a598:	f000 f8b2 	bl	800a700 <__multadd>
 800a59c:	4681      	mov	r9, r0
 800a59e:	e7ea      	b.n	800a576 <_dtoa_r+0xb56>
 800a5a0:	0801264b 	.word	0x0801264b
 800a5a4:	080125e6 	.word	0x080125e6

0800a5a8 <_free_r>:
 800a5a8:	b538      	push	{r3, r4, r5, lr}
 800a5aa:	4605      	mov	r5, r0
 800a5ac:	2900      	cmp	r1, #0
 800a5ae:	d041      	beq.n	800a634 <_free_r+0x8c>
 800a5b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a5b4:	1f0c      	subs	r4, r1, #4
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	bfb8      	it	lt
 800a5ba:	18e4      	addlt	r4, r4, r3
 800a5bc:	f7fe f9a0 	bl	8008900 <__malloc_lock>
 800a5c0:	4a1d      	ldr	r2, [pc, #116]	@ (800a638 <_free_r+0x90>)
 800a5c2:	6813      	ldr	r3, [r2, #0]
 800a5c4:	b933      	cbnz	r3, 800a5d4 <_free_r+0x2c>
 800a5c6:	6063      	str	r3, [r4, #4]
 800a5c8:	6014      	str	r4, [r2, #0]
 800a5ca:	4628      	mov	r0, r5
 800a5cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a5d0:	f7fe b99c 	b.w	800890c <__malloc_unlock>
 800a5d4:	42a3      	cmp	r3, r4
 800a5d6:	d908      	bls.n	800a5ea <_free_r+0x42>
 800a5d8:	6820      	ldr	r0, [r4, #0]
 800a5da:	1821      	adds	r1, r4, r0
 800a5dc:	428b      	cmp	r3, r1
 800a5de:	bf01      	itttt	eq
 800a5e0:	6819      	ldreq	r1, [r3, #0]
 800a5e2:	685b      	ldreq	r3, [r3, #4]
 800a5e4:	1809      	addeq	r1, r1, r0
 800a5e6:	6021      	streq	r1, [r4, #0]
 800a5e8:	e7ed      	b.n	800a5c6 <_free_r+0x1e>
 800a5ea:	461a      	mov	r2, r3
 800a5ec:	685b      	ldr	r3, [r3, #4]
 800a5ee:	b10b      	cbz	r3, 800a5f4 <_free_r+0x4c>
 800a5f0:	42a3      	cmp	r3, r4
 800a5f2:	d9fa      	bls.n	800a5ea <_free_r+0x42>
 800a5f4:	6811      	ldr	r1, [r2, #0]
 800a5f6:	1850      	adds	r0, r2, r1
 800a5f8:	42a0      	cmp	r0, r4
 800a5fa:	d10b      	bne.n	800a614 <_free_r+0x6c>
 800a5fc:	6820      	ldr	r0, [r4, #0]
 800a5fe:	4401      	add	r1, r0
 800a600:	1850      	adds	r0, r2, r1
 800a602:	4283      	cmp	r3, r0
 800a604:	6011      	str	r1, [r2, #0]
 800a606:	d1e0      	bne.n	800a5ca <_free_r+0x22>
 800a608:	6818      	ldr	r0, [r3, #0]
 800a60a:	685b      	ldr	r3, [r3, #4]
 800a60c:	6053      	str	r3, [r2, #4]
 800a60e:	4408      	add	r0, r1
 800a610:	6010      	str	r0, [r2, #0]
 800a612:	e7da      	b.n	800a5ca <_free_r+0x22>
 800a614:	d902      	bls.n	800a61c <_free_r+0x74>
 800a616:	230c      	movs	r3, #12
 800a618:	602b      	str	r3, [r5, #0]
 800a61a:	e7d6      	b.n	800a5ca <_free_r+0x22>
 800a61c:	6820      	ldr	r0, [r4, #0]
 800a61e:	1821      	adds	r1, r4, r0
 800a620:	428b      	cmp	r3, r1
 800a622:	bf04      	itt	eq
 800a624:	6819      	ldreq	r1, [r3, #0]
 800a626:	685b      	ldreq	r3, [r3, #4]
 800a628:	6063      	str	r3, [r4, #4]
 800a62a:	bf04      	itt	eq
 800a62c:	1809      	addeq	r1, r1, r0
 800a62e:	6021      	streq	r1, [r4, #0]
 800a630:	6054      	str	r4, [r2, #4]
 800a632:	e7ca      	b.n	800a5ca <_free_r+0x22>
 800a634:	bd38      	pop	{r3, r4, r5, pc}
 800a636:	bf00      	nop
 800a638:	20004420 	.word	0x20004420

0800a63c <_Balloc>:
 800a63c:	b570      	push	{r4, r5, r6, lr}
 800a63e:	69c6      	ldr	r6, [r0, #28]
 800a640:	4604      	mov	r4, r0
 800a642:	460d      	mov	r5, r1
 800a644:	b976      	cbnz	r6, 800a664 <_Balloc+0x28>
 800a646:	2010      	movs	r0, #16
 800a648:	f7f9 fa56 	bl	8003af8 <__wrap_malloc>
 800a64c:	4602      	mov	r2, r0
 800a64e:	61e0      	str	r0, [r4, #28]
 800a650:	b920      	cbnz	r0, 800a65c <_Balloc+0x20>
 800a652:	4b18      	ldr	r3, [pc, #96]	@ (800a6b4 <_Balloc+0x78>)
 800a654:	4818      	ldr	r0, [pc, #96]	@ (800a6b8 <_Balloc+0x7c>)
 800a656:	216b      	movs	r1, #107	@ 0x6b
 800a658:	f7ff f93a 	bl	80098d0 <__assert_func>
 800a65c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a660:	6006      	str	r6, [r0, #0]
 800a662:	60c6      	str	r6, [r0, #12]
 800a664:	69e6      	ldr	r6, [r4, #28]
 800a666:	68f3      	ldr	r3, [r6, #12]
 800a668:	b183      	cbz	r3, 800a68c <_Balloc+0x50>
 800a66a:	69e3      	ldr	r3, [r4, #28]
 800a66c:	68db      	ldr	r3, [r3, #12]
 800a66e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a672:	b9b8      	cbnz	r0, 800a6a4 <_Balloc+0x68>
 800a674:	2101      	movs	r1, #1
 800a676:	fa01 f605 	lsl.w	r6, r1, r5
 800a67a:	1d72      	adds	r2, r6, #5
 800a67c:	0092      	lsls	r2, r2, #2
 800a67e:	4620      	mov	r0, r4
 800a680:	f000 fb77 	bl	800ad72 <_calloc_r>
 800a684:	b160      	cbz	r0, 800a6a0 <_Balloc+0x64>
 800a686:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a68a:	e00e      	b.n	800a6aa <_Balloc+0x6e>
 800a68c:	2221      	movs	r2, #33	@ 0x21
 800a68e:	2104      	movs	r1, #4
 800a690:	4620      	mov	r0, r4
 800a692:	f000 fb6e 	bl	800ad72 <_calloc_r>
 800a696:	69e3      	ldr	r3, [r4, #28]
 800a698:	60f0      	str	r0, [r6, #12]
 800a69a:	68db      	ldr	r3, [r3, #12]
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	d1e4      	bne.n	800a66a <_Balloc+0x2e>
 800a6a0:	2000      	movs	r0, #0
 800a6a2:	bd70      	pop	{r4, r5, r6, pc}
 800a6a4:	6802      	ldr	r2, [r0, #0]
 800a6a6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a6aa:	2300      	movs	r3, #0
 800a6ac:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a6b0:	e7f7      	b.n	800a6a2 <_Balloc+0x66>
 800a6b2:	bf00      	nop
 800a6b4:	080123ac 	.word	0x080123ac
 800a6b8:	0801265c 	.word	0x0801265c

0800a6bc <_Bfree>:
 800a6bc:	b570      	push	{r4, r5, r6, lr}
 800a6be:	69c6      	ldr	r6, [r0, #28]
 800a6c0:	4605      	mov	r5, r0
 800a6c2:	460c      	mov	r4, r1
 800a6c4:	b976      	cbnz	r6, 800a6e4 <_Bfree+0x28>
 800a6c6:	2010      	movs	r0, #16
 800a6c8:	f7f9 fa16 	bl	8003af8 <__wrap_malloc>
 800a6cc:	4602      	mov	r2, r0
 800a6ce:	61e8      	str	r0, [r5, #28]
 800a6d0:	b920      	cbnz	r0, 800a6dc <_Bfree+0x20>
 800a6d2:	4b09      	ldr	r3, [pc, #36]	@ (800a6f8 <_Bfree+0x3c>)
 800a6d4:	4809      	ldr	r0, [pc, #36]	@ (800a6fc <_Bfree+0x40>)
 800a6d6:	218f      	movs	r1, #143	@ 0x8f
 800a6d8:	f7ff f8fa 	bl	80098d0 <__assert_func>
 800a6dc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a6e0:	6006      	str	r6, [r0, #0]
 800a6e2:	60c6      	str	r6, [r0, #12]
 800a6e4:	b13c      	cbz	r4, 800a6f6 <_Bfree+0x3a>
 800a6e6:	69eb      	ldr	r3, [r5, #28]
 800a6e8:	6862      	ldr	r2, [r4, #4]
 800a6ea:	68db      	ldr	r3, [r3, #12]
 800a6ec:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a6f0:	6021      	str	r1, [r4, #0]
 800a6f2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a6f6:	bd70      	pop	{r4, r5, r6, pc}
 800a6f8:	080123ac 	.word	0x080123ac
 800a6fc:	0801265c 	.word	0x0801265c

0800a700 <__multadd>:
 800a700:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a704:	690d      	ldr	r5, [r1, #16]
 800a706:	4607      	mov	r7, r0
 800a708:	460c      	mov	r4, r1
 800a70a:	461e      	mov	r6, r3
 800a70c:	f101 0c14 	add.w	ip, r1, #20
 800a710:	2000      	movs	r0, #0
 800a712:	f8dc 3000 	ldr.w	r3, [ip]
 800a716:	b299      	uxth	r1, r3
 800a718:	fb02 6101 	mla	r1, r2, r1, r6
 800a71c:	0c1e      	lsrs	r6, r3, #16
 800a71e:	0c0b      	lsrs	r3, r1, #16
 800a720:	fb02 3306 	mla	r3, r2, r6, r3
 800a724:	b289      	uxth	r1, r1
 800a726:	3001      	adds	r0, #1
 800a728:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a72c:	4285      	cmp	r5, r0
 800a72e:	f84c 1b04 	str.w	r1, [ip], #4
 800a732:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a736:	dcec      	bgt.n	800a712 <__multadd+0x12>
 800a738:	b30e      	cbz	r6, 800a77e <__multadd+0x7e>
 800a73a:	68a3      	ldr	r3, [r4, #8]
 800a73c:	42ab      	cmp	r3, r5
 800a73e:	dc19      	bgt.n	800a774 <__multadd+0x74>
 800a740:	6861      	ldr	r1, [r4, #4]
 800a742:	4638      	mov	r0, r7
 800a744:	3101      	adds	r1, #1
 800a746:	f7ff ff79 	bl	800a63c <_Balloc>
 800a74a:	4680      	mov	r8, r0
 800a74c:	b928      	cbnz	r0, 800a75a <__multadd+0x5a>
 800a74e:	4602      	mov	r2, r0
 800a750:	4b0c      	ldr	r3, [pc, #48]	@ (800a784 <__multadd+0x84>)
 800a752:	480d      	ldr	r0, [pc, #52]	@ (800a788 <__multadd+0x88>)
 800a754:	21ba      	movs	r1, #186	@ 0xba
 800a756:	f7ff f8bb 	bl	80098d0 <__assert_func>
 800a75a:	6922      	ldr	r2, [r4, #16]
 800a75c:	3202      	adds	r2, #2
 800a75e:	f104 010c 	add.w	r1, r4, #12
 800a762:	0092      	lsls	r2, r2, #2
 800a764:	300c      	adds	r0, #12
 800a766:	f7ff f8a4 	bl	80098b2 <memcpy>
 800a76a:	4621      	mov	r1, r4
 800a76c:	4638      	mov	r0, r7
 800a76e:	f7ff ffa5 	bl	800a6bc <_Bfree>
 800a772:	4644      	mov	r4, r8
 800a774:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a778:	3501      	adds	r5, #1
 800a77a:	615e      	str	r6, [r3, #20]
 800a77c:	6125      	str	r5, [r4, #16]
 800a77e:	4620      	mov	r0, r4
 800a780:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a784:	0801264b 	.word	0x0801264b
 800a788:	0801265c 	.word	0x0801265c

0800a78c <__hi0bits>:
 800a78c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800a790:	4603      	mov	r3, r0
 800a792:	bf36      	itet	cc
 800a794:	0403      	lslcc	r3, r0, #16
 800a796:	2000      	movcs	r0, #0
 800a798:	2010      	movcc	r0, #16
 800a79a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a79e:	bf3c      	itt	cc
 800a7a0:	021b      	lslcc	r3, r3, #8
 800a7a2:	3008      	addcc	r0, #8
 800a7a4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a7a8:	bf3c      	itt	cc
 800a7aa:	011b      	lslcc	r3, r3, #4
 800a7ac:	3004      	addcc	r0, #4
 800a7ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a7b2:	bf3c      	itt	cc
 800a7b4:	009b      	lslcc	r3, r3, #2
 800a7b6:	3002      	addcc	r0, #2
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	db05      	blt.n	800a7c8 <__hi0bits+0x3c>
 800a7bc:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800a7c0:	f100 0001 	add.w	r0, r0, #1
 800a7c4:	bf08      	it	eq
 800a7c6:	2020      	moveq	r0, #32
 800a7c8:	4770      	bx	lr

0800a7ca <__lo0bits>:
 800a7ca:	6803      	ldr	r3, [r0, #0]
 800a7cc:	4602      	mov	r2, r0
 800a7ce:	f013 0007 	ands.w	r0, r3, #7
 800a7d2:	d00b      	beq.n	800a7ec <__lo0bits+0x22>
 800a7d4:	07d9      	lsls	r1, r3, #31
 800a7d6:	d421      	bmi.n	800a81c <__lo0bits+0x52>
 800a7d8:	0798      	lsls	r0, r3, #30
 800a7da:	bf49      	itett	mi
 800a7dc:	085b      	lsrmi	r3, r3, #1
 800a7de:	089b      	lsrpl	r3, r3, #2
 800a7e0:	2001      	movmi	r0, #1
 800a7e2:	6013      	strmi	r3, [r2, #0]
 800a7e4:	bf5c      	itt	pl
 800a7e6:	6013      	strpl	r3, [r2, #0]
 800a7e8:	2002      	movpl	r0, #2
 800a7ea:	4770      	bx	lr
 800a7ec:	b299      	uxth	r1, r3
 800a7ee:	b909      	cbnz	r1, 800a7f4 <__lo0bits+0x2a>
 800a7f0:	0c1b      	lsrs	r3, r3, #16
 800a7f2:	2010      	movs	r0, #16
 800a7f4:	b2d9      	uxtb	r1, r3
 800a7f6:	b909      	cbnz	r1, 800a7fc <__lo0bits+0x32>
 800a7f8:	3008      	adds	r0, #8
 800a7fa:	0a1b      	lsrs	r3, r3, #8
 800a7fc:	0719      	lsls	r1, r3, #28
 800a7fe:	bf04      	itt	eq
 800a800:	091b      	lsreq	r3, r3, #4
 800a802:	3004      	addeq	r0, #4
 800a804:	0799      	lsls	r1, r3, #30
 800a806:	bf04      	itt	eq
 800a808:	089b      	lsreq	r3, r3, #2
 800a80a:	3002      	addeq	r0, #2
 800a80c:	07d9      	lsls	r1, r3, #31
 800a80e:	d403      	bmi.n	800a818 <__lo0bits+0x4e>
 800a810:	085b      	lsrs	r3, r3, #1
 800a812:	f100 0001 	add.w	r0, r0, #1
 800a816:	d003      	beq.n	800a820 <__lo0bits+0x56>
 800a818:	6013      	str	r3, [r2, #0]
 800a81a:	4770      	bx	lr
 800a81c:	2000      	movs	r0, #0
 800a81e:	4770      	bx	lr
 800a820:	2020      	movs	r0, #32
 800a822:	4770      	bx	lr

0800a824 <__i2b>:
 800a824:	b510      	push	{r4, lr}
 800a826:	460c      	mov	r4, r1
 800a828:	2101      	movs	r1, #1
 800a82a:	f7ff ff07 	bl	800a63c <_Balloc>
 800a82e:	4602      	mov	r2, r0
 800a830:	b928      	cbnz	r0, 800a83e <__i2b+0x1a>
 800a832:	4b05      	ldr	r3, [pc, #20]	@ (800a848 <__i2b+0x24>)
 800a834:	4805      	ldr	r0, [pc, #20]	@ (800a84c <__i2b+0x28>)
 800a836:	f240 1145 	movw	r1, #325	@ 0x145
 800a83a:	f7ff f849 	bl	80098d0 <__assert_func>
 800a83e:	2301      	movs	r3, #1
 800a840:	6144      	str	r4, [r0, #20]
 800a842:	6103      	str	r3, [r0, #16]
 800a844:	bd10      	pop	{r4, pc}
 800a846:	bf00      	nop
 800a848:	0801264b 	.word	0x0801264b
 800a84c:	0801265c 	.word	0x0801265c

0800a850 <__multiply>:
 800a850:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a854:	4614      	mov	r4, r2
 800a856:	690a      	ldr	r2, [r1, #16]
 800a858:	6923      	ldr	r3, [r4, #16]
 800a85a:	429a      	cmp	r2, r3
 800a85c:	bfa8      	it	ge
 800a85e:	4623      	movge	r3, r4
 800a860:	460f      	mov	r7, r1
 800a862:	bfa4      	itt	ge
 800a864:	460c      	movge	r4, r1
 800a866:	461f      	movge	r7, r3
 800a868:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800a86c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800a870:	68a3      	ldr	r3, [r4, #8]
 800a872:	6861      	ldr	r1, [r4, #4]
 800a874:	eb0a 0609 	add.w	r6, sl, r9
 800a878:	42b3      	cmp	r3, r6
 800a87a:	b085      	sub	sp, #20
 800a87c:	bfb8      	it	lt
 800a87e:	3101      	addlt	r1, #1
 800a880:	f7ff fedc 	bl	800a63c <_Balloc>
 800a884:	b930      	cbnz	r0, 800a894 <__multiply+0x44>
 800a886:	4602      	mov	r2, r0
 800a888:	4b44      	ldr	r3, [pc, #272]	@ (800a99c <__multiply+0x14c>)
 800a88a:	4845      	ldr	r0, [pc, #276]	@ (800a9a0 <__multiply+0x150>)
 800a88c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800a890:	f7ff f81e 	bl	80098d0 <__assert_func>
 800a894:	f100 0514 	add.w	r5, r0, #20
 800a898:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a89c:	462b      	mov	r3, r5
 800a89e:	2200      	movs	r2, #0
 800a8a0:	4543      	cmp	r3, r8
 800a8a2:	d321      	bcc.n	800a8e8 <__multiply+0x98>
 800a8a4:	f107 0114 	add.w	r1, r7, #20
 800a8a8:	f104 0214 	add.w	r2, r4, #20
 800a8ac:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800a8b0:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800a8b4:	9302      	str	r3, [sp, #8]
 800a8b6:	1b13      	subs	r3, r2, r4
 800a8b8:	3b15      	subs	r3, #21
 800a8ba:	f023 0303 	bic.w	r3, r3, #3
 800a8be:	3304      	adds	r3, #4
 800a8c0:	f104 0715 	add.w	r7, r4, #21
 800a8c4:	42ba      	cmp	r2, r7
 800a8c6:	bf38      	it	cc
 800a8c8:	2304      	movcc	r3, #4
 800a8ca:	9301      	str	r3, [sp, #4]
 800a8cc:	9b02      	ldr	r3, [sp, #8]
 800a8ce:	9103      	str	r1, [sp, #12]
 800a8d0:	428b      	cmp	r3, r1
 800a8d2:	d80c      	bhi.n	800a8ee <__multiply+0x9e>
 800a8d4:	2e00      	cmp	r6, #0
 800a8d6:	dd03      	ble.n	800a8e0 <__multiply+0x90>
 800a8d8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	d05b      	beq.n	800a998 <__multiply+0x148>
 800a8e0:	6106      	str	r6, [r0, #16]
 800a8e2:	b005      	add	sp, #20
 800a8e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a8e8:	f843 2b04 	str.w	r2, [r3], #4
 800a8ec:	e7d8      	b.n	800a8a0 <__multiply+0x50>
 800a8ee:	f8b1 a000 	ldrh.w	sl, [r1]
 800a8f2:	f1ba 0f00 	cmp.w	sl, #0
 800a8f6:	d024      	beq.n	800a942 <__multiply+0xf2>
 800a8f8:	f104 0e14 	add.w	lr, r4, #20
 800a8fc:	46a9      	mov	r9, r5
 800a8fe:	f04f 0c00 	mov.w	ip, #0
 800a902:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a906:	f8d9 3000 	ldr.w	r3, [r9]
 800a90a:	fa1f fb87 	uxth.w	fp, r7
 800a90e:	b29b      	uxth	r3, r3
 800a910:	fb0a 330b 	mla	r3, sl, fp, r3
 800a914:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800a918:	f8d9 7000 	ldr.w	r7, [r9]
 800a91c:	4463      	add	r3, ip
 800a91e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800a922:	fb0a c70b 	mla	r7, sl, fp, ip
 800a926:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800a92a:	b29b      	uxth	r3, r3
 800a92c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a930:	4572      	cmp	r2, lr
 800a932:	f849 3b04 	str.w	r3, [r9], #4
 800a936:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800a93a:	d8e2      	bhi.n	800a902 <__multiply+0xb2>
 800a93c:	9b01      	ldr	r3, [sp, #4]
 800a93e:	f845 c003 	str.w	ip, [r5, r3]
 800a942:	9b03      	ldr	r3, [sp, #12]
 800a944:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800a948:	3104      	adds	r1, #4
 800a94a:	f1b9 0f00 	cmp.w	r9, #0
 800a94e:	d021      	beq.n	800a994 <__multiply+0x144>
 800a950:	682b      	ldr	r3, [r5, #0]
 800a952:	f104 0c14 	add.w	ip, r4, #20
 800a956:	46ae      	mov	lr, r5
 800a958:	f04f 0a00 	mov.w	sl, #0
 800a95c:	f8bc b000 	ldrh.w	fp, [ip]
 800a960:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800a964:	fb09 770b 	mla	r7, r9, fp, r7
 800a968:	4457      	add	r7, sl
 800a96a:	b29b      	uxth	r3, r3
 800a96c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a970:	f84e 3b04 	str.w	r3, [lr], #4
 800a974:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a978:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a97c:	f8be 3000 	ldrh.w	r3, [lr]
 800a980:	fb09 330a 	mla	r3, r9, sl, r3
 800a984:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800a988:	4562      	cmp	r2, ip
 800a98a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a98e:	d8e5      	bhi.n	800a95c <__multiply+0x10c>
 800a990:	9f01      	ldr	r7, [sp, #4]
 800a992:	51eb      	str	r3, [r5, r7]
 800a994:	3504      	adds	r5, #4
 800a996:	e799      	b.n	800a8cc <__multiply+0x7c>
 800a998:	3e01      	subs	r6, #1
 800a99a:	e79b      	b.n	800a8d4 <__multiply+0x84>
 800a99c:	0801264b 	.word	0x0801264b
 800a9a0:	0801265c 	.word	0x0801265c

0800a9a4 <__pow5mult>:
 800a9a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a9a8:	4615      	mov	r5, r2
 800a9aa:	f012 0203 	ands.w	r2, r2, #3
 800a9ae:	4607      	mov	r7, r0
 800a9b0:	460e      	mov	r6, r1
 800a9b2:	d007      	beq.n	800a9c4 <__pow5mult+0x20>
 800a9b4:	4c25      	ldr	r4, [pc, #148]	@ (800aa4c <__pow5mult+0xa8>)
 800a9b6:	3a01      	subs	r2, #1
 800a9b8:	2300      	movs	r3, #0
 800a9ba:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a9be:	f7ff fe9f 	bl	800a700 <__multadd>
 800a9c2:	4606      	mov	r6, r0
 800a9c4:	10ad      	asrs	r5, r5, #2
 800a9c6:	d03d      	beq.n	800aa44 <__pow5mult+0xa0>
 800a9c8:	69fc      	ldr	r4, [r7, #28]
 800a9ca:	b97c      	cbnz	r4, 800a9ec <__pow5mult+0x48>
 800a9cc:	2010      	movs	r0, #16
 800a9ce:	f7f9 f893 	bl	8003af8 <__wrap_malloc>
 800a9d2:	4602      	mov	r2, r0
 800a9d4:	61f8      	str	r0, [r7, #28]
 800a9d6:	b928      	cbnz	r0, 800a9e4 <__pow5mult+0x40>
 800a9d8:	4b1d      	ldr	r3, [pc, #116]	@ (800aa50 <__pow5mult+0xac>)
 800a9da:	481e      	ldr	r0, [pc, #120]	@ (800aa54 <__pow5mult+0xb0>)
 800a9dc:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800a9e0:	f7fe ff76 	bl	80098d0 <__assert_func>
 800a9e4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a9e8:	6004      	str	r4, [r0, #0]
 800a9ea:	60c4      	str	r4, [r0, #12]
 800a9ec:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800a9f0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a9f4:	b94c      	cbnz	r4, 800aa0a <__pow5mult+0x66>
 800a9f6:	f240 2171 	movw	r1, #625	@ 0x271
 800a9fa:	4638      	mov	r0, r7
 800a9fc:	f7ff ff12 	bl	800a824 <__i2b>
 800aa00:	2300      	movs	r3, #0
 800aa02:	f8c8 0008 	str.w	r0, [r8, #8]
 800aa06:	4604      	mov	r4, r0
 800aa08:	6003      	str	r3, [r0, #0]
 800aa0a:	f04f 0900 	mov.w	r9, #0
 800aa0e:	07eb      	lsls	r3, r5, #31
 800aa10:	d50a      	bpl.n	800aa28 <__pow5mult+0x84>
 800aa12:	4631      	mov	r1, r6
 800aa14:	4622      	mov	r2, r4
 800aa16:	4638      	mov	r0, r7
 800aa18:	f7ff ff1a 	bl	800a850 <__multiply>
 800aa1c:	4631      	mov	r1, r6
 800aa1e:	4680      	mov	r8, r0
 800aa20:	4638      	mov	r0, r7
 800aa22:	f7ff fe4b 	bl	800a6bc <_Bfree>
 800aa26:	4646      	mov	r6, r8
 800aa28:	106d      	asrs	r5, r5, #1
 800aa2a:	d00b      	beq.n	800aa44 <__pow5mult+0xa0>
 800aa2c:	6820      	ldr	r0, [r4, #0]
 800aa2e:	b938      	cbnz	r0, 800aa40 <__pow5mult+0x9c>
 800aa30:	4622      	mov	r2, r4
 800aa32:	4621      	mov	r1, r4
 800aa34:	4638      	mov	r0, r7
 800aa36:	f7ff ff0b 	bl	800a850 <__multiply>
 800aa3a:	6020      	str	r0, [r4, #0]
 800aa3c:	f8c0 9000 	str.w	r9, [r0]
 800aa40:	4604      	mov	r4, r0
 800aa42:	e7e4      	b.n	800aa0e <__pow5mult+0x6a>
 800aa44:	4630      	mov	r0, r6
 800aa46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aa4a:	bf00      	nop
 800aa4c:	080126b8 	.word	0x080126b8
 800aa50:	080123ac 	.word	0x080123ac
 800aa54:	0801265c 	.word	0x0801265c

0800aa58 <__lshift>:
 800aa58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aa5c:	460c      	mov	r4, r1
 800aa5e:	6849      	ldr	r1, [r1, #4]
 800aa60:	6923      	ldr	r3, [r4, #16]
 800aa62:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800aa66:	68a3      	ldr	r3, [r4, #8]
 800aa68:	4607      	mov	r7, r0
 800aa6a:	4691      	mov	r9, r2
 800aa6c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800aa70:	f108 0601 	add.w	r6, r8, #1
 800aa74:	42b3      	cmp	r3, r6
 800aa76:	db0b      	blt.n	800aa90 <__lshift+0x38>
 800aa78:	4638      	mov	r0, r7
 800aa7a:	f7ff fddf 	bl	800a63c <_Balloc>
 800aa7e:	4605      	mov	r5, r0
 800aa80:	b948      	cbnz	r0, 800aa96 <__lshift+0x3e>
 800aa82:	4602      	mov	r2, r0
 800aa84:	4b28      	ldr	r3, [pc, #160]	@ (800ab28 <__lshift+0xd0>)
 800aa86:	4829      	ldr	r0, [pc, #164]	@ (800ab2c <__lshift+0xd4>)
 800aa88:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800aa8c:	f7fe ff20 	bl	80098d0 <__assert_func>
 800aa90:	3101      	adds	r1, #1
 800aa92:	005b      	lsls	r3, r3, #1
 800aa94:	e7ee      	b.n	800aa74 <__lshift+0x1c>
 800aa96:	2300      	movs	r3, #0
 800aa98:	f100 0114 	add.w	r1, r0, #20
 800aa9c:	f100 0210 	add.w	r2, r0, #16
 800aaa0:	4618      	mov	r0, r3
 800aaa2:	4553      	cmp	r3, sl
 800aaa4:	db33      	blt.n	800ab0e <__lshift+0xb6>
 800aaa6:	6920      	ldr	r0, [r4, #16]
 800aaa8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800aaac:	f104 0314 	add.w	r3, r4, #20
 800aab0:	f019 091f 	ands.w	r9, r9, #31
 800aab4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800aab8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800aabc:	d02b      	beq.n	800ab16 <__lshift+0xbe>
 800aabe:	f1c9 0e20 	rsb	lr, r9, #32
 800aac2:	468a      	mov	sl, r1
 800aac4:	2200      	movs	r2, #0
 800aac6:	6818      	ldr	r0, [r3, #0]
 800aac8:	fa00 f009 	lsl.w	r0, r0, r9
 800aacc:	4310      	orrs	r0, r2
 800aace:	f84a 0b04 	str.w	r0, [sl], #4
 800aad2:	f853 2b04 	ldr.w	r2, [r3], #4
 800aad6:	459c      	cmp	ip, r3
 800aad8:	fa22 f20e 	lsr.w	r2, r2, lr
 800aadc:	d8f3      	bhi.n	800aac6 <__lshift+0x6e>
 800aade:	ebac 0304 	sub.w	r3, ip, r4
 800aae2:	3b15      	subs	r3, #21
 800aae4:	f023 0303 	bic.w	r3, r3, #3
 800aae8:	3304      	adds	r3, #4
 800aaea:	f104 0015 	add.w	r0, r4, #21
 800aaee:	4584      	cmp	ip, r0
 800aaf0:	bf38      	it	cc
 800aaf2:	2304      	movcc	r3, #4
 800aaf4:	50ca      	str	r2, [r1, r3]
 800aaf6:	b10a      	cbz	r2, 800aafc <__lshift+0xa4>
 800aaf8:	f108 0602 	add.w	r6, r8, #2
 800aafc:	3e01      	subs	r6, #1
 800aafe:	4638      	mov	r0, r7
 800ab00:	612e      	str	r6, [r5, #16]
 800ab02:	4621      	mov	r1, r4
 800ab04:	f7ff fdda 	bl	800a6bc <_Bfree>
 800ab08:	4628      	mov	r0, r5
 800ab0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab0e:	f842 0f04 	str.w	r0, [r2, #4]!
 800ab12:	3301      	adds	r3, #1
 800ab14:	e7c5      	b.n	800aaa2 <__lshift+0x4a>
 800ab16:	3904      	subs	r1, #4
 800ab18:	f853 2b04 	ldr.w	r2, [r3], #4
 800ab1c:	f841 2f04 	str.w	r2, [r1, #4]!
 800ab20:	459c      	cmp	ip, r3
 800ab22:	d8f9      	bhi.n	800ab18 <__lshift+0xc0>
 800ab24:	e7ea      	b.n	800aafc <__lshift+0xa4>
 800ab26:	bf00      	nop
 800ab28:	0801264b 	.word	0x0801264b
 800ab2c:	0801265c 	.word	0x0801265c

0800ab30 <__mcmp>:
 800ab30:	690a      	ldr	r2, [r1, #16]
 800ab32:	4603      	mov	r3, r0
 800ab34:	6900      	ldr	r0, [r0, #16]
 800ab36:	1a80      	subs	r0, r0, r2
 800ab38:	b530      	push	{r4, r5, lr}
 800ab3a:	d10e      	bne.n	800ab5a <__mcmp+0x2a>
 800ab3c:	3314      	adds	r3, #20
 800ab3e:	3114      	adds	r1, #20
 800ab40:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800ab44:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800ab48:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800ab4c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800ab50:	4295      	cmp	r5, r2
 800ab52:	d003      	beq.n	800ab5c <__mcmp+0x2c>
 800ab54:	d205      	bcs.n	800ab62 <__mcmp+0x32>
 800ab56:	f04f 30ff 	mov.w	r0, #4294967295
 800ab5a:	bd30      	pop	{r4, r5, pc}
 800ab5c:	42a3      	cmp	r3, r4
 800ab5e:	d3f3      	bcc.n	800ab48 <__mcmp+0x18>
 800ab60:	e7fb      	b.n	800ab5a <__mcmp+0x2a>
 800ab62:	2001      	movs	r0, #1
 800ab64:	e7f9      	b.n	800ab5a <__mcmp+0x2a>
	...

0800ab68 <__mdiff>:
 800ab68:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab6c:	4689      	mov	r9, r1
 800ab6e:	4606      	mov	r6, r0
 800ab70:	4611      	mov	r1, r2
 800ab72:	4648      	mov	r0, r9
 800ab74:	4614      	mov	r4, r2
 800ab76:	f7ff ffdb 	bl	800ab30 <__mcmp>
 800ab7a:	1e05      	subs	r5, r0, #0
 800ab7c:	d112      	bne.n	800aba4 <__mdiff+0x3c>
 800ab7e:	4629      	mov	r1, r5
 800ab80:	4630      	mov	r0, r6
 800ab82:	f7ff fd5b 	bl	800a63c <_Balloc>
 800ab86:	4602      	mov	r2, r0
 800ab88:	b928      	cbnz	r0, 800ab96 <__mdiff+0x2e>
 800ab8a:	4b3f      	ldr	r3, [pc, #252]	@ (800ac88 <__mdiff+0x120>)
 800ab8c:	f240 2137 	movw	r1, #567	@ 0x237
 800ab90:	483e      	ldr	r0, [pc, #248]	@ (800ac8c <__mdiff+0x124>)
 800ab92:	f7fe fe9d 	bl	80098d0 <__assert_func>
 800ab96:	2301      	movs	r3, #1
 800ab98:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ab9c:	4610      	mov	r0, r2
 800ab9e:	b003      	add	sp, #12
 800aba0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aba4:	bfbc      	itt	lt
 800aba6:	464b      	movlt	r3, r9
 800aba8:	46a1      	movlt	r9, r4
 800abaa:	4630      	mov	r0, r6
 800abac:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800abb0:	bfba      	itte	lt
 800abb2:	461c      	movlt	r4, r3
 800abb4:	2501      	movlt	r5, #1
 800abb6:	2500      	movge	r5, #0
 800abb8:	f7ff fd40 	bl	800a63c <_Balloc>
 800abbc:	4602      	mov	r2, r0
 800abbe:	b918      	cbnz	r0, 800abc8 <__mdiff+0x60>
 800abc0:	4b31      	ldr	r3, [pc, #196]	@ (800ac88 <__mdiff+0x120>)
 800abc2:	f240 2145 	movw	r1, #581	@ 0x245
 800abc6:	e7e3      	b.n	800ab90 <__mdiff+0x28>
 800abc8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800abcc:	6926      	ldr	r6, [r4, #16]
 800abce:	60c5      	str	r5, [r0, #12]
 800abd0:	f109 0310 	add.w	r3, r9, #16
 800abd4:	f109 0514 	add.w	r5, r9, #20
 800abd8:	f104 0e14 	add.w	lr, r4, #20
 800abdc:	f100 0b14 	add.w	fp, r0, #20
 800abe0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800abe4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800abe8:	9301      	str	r3, [sp, #4]
 800abea:	46d9      	mov	r9, fp
 800abec:	f04f 0c00 	mov.w	ip, #0
 800abf0:	9b01      	ldr	r3, [sp, #4]
 800abf2:	f85e 0b04 	ldr.w	r0, [lr], #4
 800abf6:	f853 af04 	ldr.w	sl, [r3, #4]!
 800abfa:	9301      	str	r3, [sp, #4]
 800abfc:	fa1f f38a 	uxth.w	r3, sl
 800ac00:	4619      	mov	r1, r3
 800ac02:	b283      	uxth	r3, r0
 800ac04:	1acb      	subs	r3, r1, r3
 800ac06:	0c00      	lsrs	r0, r0, #16
 800ac08:	4463      	add	r3, ip
 800ac0a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800ac0e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800ac12:	b29b      	uxth	r3, r3
 800ac14:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800ac18:	4576      	cmp	r6, lr
 800ac1a:	f849 3b04 	str.w	r3, [r9], #4
 800ac1e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ac22:	d8e5      	bhi.n	800abf0 <__mdiff+0x88>
 800ac24:	1b33      	subs	r3, r6, r4
 800ac26:	3b15      	subs	r3, #21
 800ac28:	f023 0303 	bic.w	r3, r3, #3
 800ac2c:	3415      	adds	r4, #21
 800ac2e:	3304      	adds	r3, #4
 800ac30:	42a6      	cmp	r6, r4
 800ac32:	bf38      	it	cc
 800ac34:	2304      	movcc	r3, #4
 800ac36:	441d      	add	r5, r3
 800ac38:	445b      	add	r3, fp
 800ac3a:	461e      	mov	r6, r3
 800ac3c:	462c      	mov	r4, r5
 800ac3e:	4544      	cmp	r4, r8
 800ac40:	d30e      	bcc.n	800ac60 <__mdiff+0xf8>
 800ac42:	f108 0103 	add.w	r1, r8, #3
 800ac46:	1b49      	subs	r1, r1, r5
 800ac48:	f021 0103 	bic.w	r1, r1, #3
 800ac4c:	3d03      	subs	r5, #3
 800ac4e:	45a8      	cmp	r8, r5
 800ac50:	bf38      	it	cc
 800ac52:	2100      	movcc	r1, #0
 800ac54:	440b      	add	r3, r1
 800ac56:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ac5a:	b191      	cbz	r1, 800ac82 <__mdiff+0x11a>
 800ac5c:	6117      	str	r7, [r2, #16]
 800ac5e:	e79d      	b.n	800ab9c <__mdiff+0x34>
 800ac60:	f854 1b04 	ldr.w	r1, [r4], #4
 800ac64:	46e6      	mov	lr, ip
 800ac66:	0c08      	lsrs	r0, r1, #16
 800ac68:	fa1c fc81 	uxtah	ip, ip, r1
 800ac6c:	4471      	add	r1, lr
 800ac6e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800ac72:	b289      	uxth	r1, r1
 800ac74:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800ac78:	f846 1b04 	str.w	r1, [r6], #4
 800ac7c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ac80:	e7dd      	b.n	800ac3e <__mdiff+0xd6>
 800ac82:	3f01      	subs	r7, #1
 800ac84:	e7e7      	b.n	800ac56 <__mdiff+0xee>
 800ac86:	bf00      	nop
 800ac88:	0801264b 	.word	0x0801264b
 800ac8c:	0801265c 	.word	0x0801265c

0800ac90 <__d2b>:
 800ac90:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ac94:	460f      	mov	r7, r1
 800ac96:	2101      	movs	r1, #1
 800ac98:	ec59 8b10 	vmov	r8, r9, d0
 800ac9c:	4616      	mov	r6, r2
 800ac9e:	f7ff fccd 	bl	800a63c <_Balloc>
 800aca2:	4604      	mov	r4, r0
 800aca4:	b930      	cbnz	r0, 800acb4 <__d2b+0x24>
 800aca6:	4602      	mov	r2, r0
 800aca8:	4b23      	ldr	r3, [pc, #140]	@ (800ad38 <__d2b+0xa8>)
 800acaa:	4824      	ldr	r0, [pc, #144]	@ (800ad3c <__d2b+0xac>)
 800acac:	f240 310f 	movw	r1, #783	@ 0x30f
 800acb0:	f7fe fe0e 	bl	80098d0 <__assert_func>
 800acb4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800acb8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800acbc:	b10d      	cbz	r5, 800acc2 <__d2b+0x32>
 800acbe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800acc2:	9301      	str	r3, [sp, #4]
 800acc4:	f1b8 0300 	subs.w	r3, r8, #0
 800acc8:	d023      	beq.n	800ad12 <__d2b+0x82>
 800acca:	4668      	mov	r0, sp
 800accc:	9300      	str	r3, [sp, #0]
 800acce:	f7ff fd7c 	bl	800a7ca <__lo0bits>
 800acd2:	e9dd 1200 	ldrd	r1, r2, [sp]
 800acd6:	b1d0      	cbz	r0, 800ad0e <__d2b+0x7e>
 800acd8:	f1c0 0320 	rsb	r3, r0, #32
 800acdc:	fa02 f303 	lsl.w	r3, r2, r3
 800ace0:	430b      	orrs	r3, r1
 800ace2:	40c2      	lsrs	r2, r0
 800ace4:	6163      	str	r3, [r4, #20]
 800ace6:	9201      	str	r2, [sp, #4]
 800ace8:	9b01      	ldr	r3, [sp, #4]
 800acea:	61a3      	str	r3, [r4, #24]
 800acec:	2b00      	cmp	r3, #0
 800acee:	bf0c      	ite	eq
 800acf0:	2201      	moveq	r2, #1
 800acf2:	2202      	movne	r2, #2
 800acf4:	6122      	str	r2, [r4, #16]
 800acf6:	b1a5      	cbz	r5, 800ad22 <__d2b+0x92>
 800acf8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800acfc:	4405      	add	r5, r0
 800acfe:	603d      	str	r5, [r7, #0]
 800ad00:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800ad04:	6030      	str	r0, [r6, #0]
 800ad06:	4620      	mov	r0, r4
 800ad08:	b003      	add	sp, #12
 800ad0a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ad0e:	6161      	str	r1, [r4, #20]
 800ad10:	e7ea      	b.n	800ace8 <__d2b+0x58>
 800ad12:	a801      	add	r0, sp, #4
 800ad14:	f7ff fd59 	bl	800a7ca <__lo0bits>
 800ad18:	9b01      	ldr	r3, [sp, #4]
 800ad1a:	6163      	str	r3, [r4, #20]
 800ad1c:	3020      	adds	r0, #32
 800ad1e:	2201      	movs	r2, #1
 800ad20:	e7e8      	b.n	800acf4 <__d2b+0x64>
 800ad22:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ad26:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800ad2a:	6038      	str	r0, [r7, #0]
 800ad2c:	6918      	ldr	r0, [r3, #16]
 800ad2e:	f7ff fd2d 	bl	800a78c <__hi0bits>
 800ad32:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ad36:	e7e5      	b.n	800ad04 <__d2b+0x74>
 800ad38:	0801264b 	.word	0x0801264b
 800ad3c:	0801265c 	.word	0x0801265c

0800ad40 <fiprintf>:
 800ad40:	b40e      	push	{r1, r2, r3}
 800ad42:	b503      	push	{r0, r1, lr}
 800ad44:	4601      	mov	r1, r0
 800ad46:	ab03      	add	r3, sp, #12
 800ad48:	4805      	ldr	r0, [pc, #20]	@ (800ad60 <fiprintf+0x20>)
 800ad4a:	f853 2b04 	ldr.w	r2, [r3], #4
 800ad4e:	6800      	ldr	r0, [r0, #0]
 800ad50:	9301      	str	r3, [sp, #4]
 800ad52:	f000 f86b 	bl	800ae2c <_vfiprintf_r>
 800ad56:	b002      	add	sp, #8
 800ad58:	f85d eb04 	ldr.w	lr, [sp], #4
 800ad5c:	b003      	add	sp, #12
 800ad5e:	4770      	bx	lr
 800ad60:	20003f94 	.word	0x20003f94

0800ad64 <abort>:
 800ad64:	b508      	push	{r3, lr}
 800ad66:	2006      	movs	r0, #6
 800ad68:	f000 fa34 	bl	800b1d4 <raise>
 800ad6c:	2001      	movs	r0, #1
 800ad6e:	f7f6 fa16 	bl	800119e <_exit>

0800ad72 <_calloc_r>:
 800ad72:	b570      	push	{r4, r5, r6, lr}
 800ad74:	fba1 5402 	umull	r5, r4, r1, r2
 800ad78:	b93c      	cbnz	r4, 800ad8a <_calloc_r+0x18>
 800ad7a:	4629      	mov	r1, r5
 800ad7c:	f7fd fd40 	bl	8008800 <_malloc_r>
 800ad80:	4606      	mov	r6, r0
 800ad82:	b928      	cbnz	r0, 800ad90 <_calloc_r+0x1e>
 800ad84:	2600      	movs	r6, #0
 800ad86:	4630      	mov	r0, r6
 800ad88:	bd70      	pop	{r4, r5, r6, pc}
 800ad8a:	220c      	movs	r2, #12
 800ad8c:	6002      	str	r2, [r0, #0]
 800ad8e:	e7f9      	b.n	800ad84 <_calloc_r+0x12>
 800ad90:	462a      	mov	r2, r5
 800ad92:	4621      	mov	r1, r4
 800ad94:	f7fe fc8f 	bl	80096b6 <memset>
 800ad98:	e7f5      	b.n	800ad86 <_calloc_r+0x14>

0800ad9a <__ascii_mbtowc>:
 800ad9a:	b082      	sub	sp, #8
 800ad9c:	b901      	cbnz	r1, 800ada0 <__ascii_mbtowc+0x6>
 800ad9e:	a901      	add	r1, sp, #4
 800ada0:	b142      	cbz	r2, 800adb4 <__ascii_mbtowc+0x1a>
 800ada2:	b14b      	cbz	r3, 800adb8 <__ascii_mbtowc+0x1e>
 800ada4:	7813      	ldrb	r3, [r2, #0]
 800ada6:	600b      	str	r3, [r1, #0]
 800ada8:	7812      	ldrb	r2, [r2, #0]
 800adaa:	1e10      	subs	r0, r2, #0
 800adac:	bf18      	it	ne
 800adae:	2001      	movne	r0, #1
 800adb0:	b002      	add	sp, #8
 800adb2:	4770      	bx	lr
 800adb4:	4610      	mov	r0, r2
 800adb6:	e7fb      	b.n	800adb0 <__ascii_mbtowc+0x16>
 800adb8:	f06f 0001 	mvn.w	r0, #1
 800adbc:	e7f8      	b.n	800adb0 <__ascii_mbtowc+0x16>

0800adbe <__ascii_wctomb>:
 800adbe:	4603      	mov	r3, r0
 800adc0:	4608      	mov	r0, r1
 800adc2:	b141      	cbz	r1, 800add6 <__ascii_wctomb+0x18>
 800adc4:	2aff      	cmp	r2, #255	@ 0xff
 800adc6:	d904      	bls.n	800add2 <__ascii_wctomb+0x14>
 800adc8:	228a      	movs	r2, #138	@ 0x8a
 800adca:	601a      	str	r2, [r3, #0]
 800adcc:	f04f 30ff 	mov.w	r0, #4294967295
 800add0:	4770      	bx	lr
 800add2:	700a      	strb	r2, [r1, #0]
 800add4:	2001      	movs	r0, #1
 800add6:	4770      	bx	lr

0800add8 <__sfputc_r>:
 800add8:	6893      	ldr	r3, [r2, #8]
 800adda:	3b01      	subs	r3, #1
 800addc:	2b00      	cmp	r3, #0
 800adde:	b410      	push	{r4}
 800ade0:	6093      	str	r3, [r2, #8]
 800ade2:	da08      	bge.n	800adf6 <__sfputc_r+0x1e>
 800ade4:	6994      	ldr	r4, [r2, #24]
 800ade6:	42a3      	cmp	r3, r4
 800ade8:	db01      	blt.n	800adee <__sfputc_r+0x16>
 800adea:	290a      	cmp	r1, #10
 800adec:	d103      	bne.n	800adf6 <__sfputc_r+0x1e>
 800adee:	f85d 4b04 	ldr.w	r4, [sp], #4
 800adf2:	f000 b933 	b.w	800b05c <__swbuf_r>
 800adf6:	6813      	ldr	r3, [r2, #0]
 800adf8:	1c58      	adds	r0, r3, #1
 800adfa:	6010      	str	r0, [r2, #0]
 800adfc:	7019      	strb	r1, [r3, #0]
 800adfe:	4608      	mov	r0, r1
 800ae00:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ae04:	4770      	bx	lr

0800ae06 <__sfputs_r>:
 800ae06:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae08:	4606      	mov	r6, r0
 800ae0a:	460f      	mov	r7, r1
 800ae0c:	4614      	mov	r4, r2
 800ae0e:	18d5      	adds	r5, r2, r3
 800ae10:	42ac      	cmp	r4, r5
 800ae12:	d101      	bne.n	800ae18 <__sfputs_r+0x12>
 800ae14:	2000      	movs	r0, #0
 800ae16:	e007      	b.n	800ae28 <__sfputs_r+0x22>
 800ae18:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ae1c:	463a      	mov	r2, r7
 800ae1e:	4630      	mov	r0, r6
 800ae20:	f7ff ffda 	bl	800add8 <__sfputc_r>
 800ae24:	1c43      	adds	r3, r0, #1
 800ae26:	d1f3      	bne.n	800ae10 <__sfputs_r+0xa>
 800ae28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ae2c <_vfiprintf_r>:
 800ae2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae30:	460d      	mov	r5, r1
 800ae32:	b09d      	sub	sp, #116	@ 0x74
 800ae34:	4614      	mov	r4, r2
 800ae36:	4698      	mov	r8, r3
 800ae38:	4606      	mov	r6, r0
 800ae3a:	b118      	cbz	r0, 800ae44 <_vfiprintf_r+0x18>
 800ae3c:	6a03      	ldr	r3, [r0, #32]
 800ae3e:	b90b      	cbnz	r3, 800ae44 <_vfiprintf_r+0x18>
 800ae40:	f7fe fbc0 	bl	80095c4 <__sinit>
 800ae44:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ae46:	07d9      	lsls	r1, r3, #31
 800ae48:	d405      	bmi.n	800ae56 <_vfiprintf_r+0x2a>
 800ae4a:	89ab      	ldrh	r3, [r5, #12]
 800ae4c:	059a      	lsls	r2, r3, #22
 800ae4e:	d402      	bmi.n	800ae56 <_vfiprintf_r+0x2a>
 800ae50:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ae52:	f7fe fd2c 	bl	80098ae <__retarget_lock_acquire_recursive>
 800ae56:	89ab      	ldrh	r3, [r5, #12]
 800ae58:	071b      	lsls	r3, r3, #28
 800ae5a:	d501      	bpl.n	800ae60 <_vfiprintf_r+0x34>
 800ae5c:	692b      	ldr	r3, [r5, #16]
 800ae5e:	b99b      	cbnz	r3, 800ae88 <_vfiprintf_r+0x5c>
 800ae60:	4629      	mov	r1, r5
 800ae62:	4630      	mov	r0, r6
 800ae64:	f000 f938 	bl	800b0d8 <__swsetup_r>
 800ae68:	b170      	cbz	r0, 800ae88 <_vfiprintf_r+0x5c>
 800ae6a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ae6c:	07dc      	lsls	r4, r3, #31
 800ae6e:	d504      	bpl.n	800ae7a <_vfiprintf_r+0x4e>
 800ae70:	f04f 30ff 	mov.w	r0, #4294967295
 800ae74:	b01d      	add	sp, #116	@ 0x74
 800ae76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae7a:	89ab      	ldrh	r3, [r5, #12]
 800ae7c:	0598      	lsls	r0, r3, #22
 800ae7e:	d4f7      	bmi.n	800ae70 <_vfiprintf_r+0x44>
 800ae80:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ae82:	f7fe fd15 	bl	80098b0 <__retarget_lock_release_recursive>
 800ae86:	e7f3      	b.n	800ae70 <_vfiprintf_r+0x44>
 800ae88:	2300      	movs	r3, #0
 800ae8a:	9309      	str	r3, [sp, #36]	@ 0x24
 800ae8c:	2320      	movs	r3, #32
 800ae8e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ae92:	f8cd 800c 	str.w	r8, [sp, #12]
 800ae96:	2330      	movs	r3, #48	@ 0x30
 800ae98:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800b048 <_vfiprintf_r+0x21c>
 800ae9c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800aea0:	f04f 0901 	mov.w	r9, #1
 800aea4:	4623      	mov	r3, r4
 800aea6:	469a      	mov	sl, r3
 800aea8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aeac:	b10a      	cbz	r2, 800aeb2 <_vfiprintf_r+0x86>
 800aeae:	2a25      	cmp	r2, #37	@ 0x25
 800aeb0:	d1f9      	bne.n	800aea6 <_vfiprintf_r+0x7a>
 800aeb2:	ebba 0b04 	subs.w	fp, sl, r4
 800aeb6:	d00b      	beq.n	800aed0 <_vfiprintf_r+0xa4>
 800aeb8:	465b      	mov	r3, fp
 800aeba:	4622      	mov	r2, r4
 800aebc:	4629      	mov	r1, r5
 800aebe:	4630      	mov	r0, r6
 800aec0:	f7ff ffa1 	bl	800ae06 <__sfputs_r>
 800aec4:	3001      	adds	r0, #1
 800aec6:	f000 80a7 	beq.w	800b018 <_vfiprintf_r+0x1ec>
 800aeca:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800aecc:	445a      	add	r2, fp
 800aece:	9209      	str	r2, [sp, #36]	@ 0x24
 800aed0:	f89a 3000 	ldrb.w	r3, [sl]
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	f000 809f 	beq.w	800b018 <_vfiprintf_r+0x1ec>
 800aeda:	2300      	movs	r3, #0
 800aedc:	f04f 32ff 	mov.w	r2, #4294967295
 800aee0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800aee4:	f10a 0a01 	add.w	sl, sl, #1
 800aee8:	9304      	str	r3, [sp, #16]
 800aeea:	9307      	str	r3, [sp, #28]
 800aeec:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800aef0:	931a      	str	r3, [sp, #104]	@ 0x68
 800aef2:	4654      	mov	r4, sl
 800aef4:	2205      	movs	r2, #5
 800aef6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aefa:	4853      	ldr	r0, [pc, #332]	@ (800b048 <_vfiprintf_r+0x21c>)
 800aefc:	f7f5 f968 	bl	80001d0 <memchr>
 800af00:	9a04      	ldr	r2, [sp, #16]
 800af02:	b9d8      	cbnz	r0, 800af3c <_vfiprintf_r+0x110>
 800af04:	06d1      	lsls	r1, r2, #27
 800af06:	bf44      	itt	mi
 800af08:	2320      	movmi	r3, #32
 800af0a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800af0e:	0713      	lsls	r3, r2, #28
 800af10:	bf44      	itt	mi
 800af12:	232b      	movmi	r3, #43	@ 0x2b
 800af14:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800af18:	f89a 3000 	ldrb.w	r3, [sl]
 800af1c:	2b2a      	cmp	r3, #42	@ 0x2a
 800af1e:	d015      	beq.n	800af4c <_vfiprintf_r+0x120>
 800af20:	9a07      	ldr	r2, [sp, #28]
 800af22:	4654      	mov	r4, sl
 800af24:	2000      	movs	r0, #0
 800af26:	f04f 0c0a 	mov.w	ip, #10
 800af2a:	4621      	mov	r1, r4
 800af2c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800af30:	3b30      	subs	r3, #48	@ 0x30
 800af32:	2b09      	cmp	r3, #9
 800af34:	d94b      	bls.n	800afce <_vfiprintf_r+0x1a2>
 800af36:	b1b0      	cbz	r0, 800af66 <_vfiprintf_r+0x13a>
 800af38:	9207      	str	r2, [sp, #28]
 800af3a:	e014      	b.n	800af66 <_vfiprintf_r+0x13a>
 800af3c:	eba0 0308 	sub.w	r3, r0, r8
 800af40:	fa09 f303 	lsl.w	r3, r9, r3
 800af44:	4313      	orrs	r3, r2
 800af46:	9304      	str	r3, [sp, #16]
 800af48:	46a2      	mov	sl, r4
 800af4a:	e7d2      	b.n	800aef2 <_vfiprintf_r+0xc6>
 800af4c:	9b03      	ldr	r3, [sp, #12]
 800af4e:	1d19      	adds	r1, r3, #4
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	9103      	str	r1, [sp, #12]
 800af54:	2b00      	cmp	r3, #0
 800af56:	bfbb      	ittet	lt
 800af58:	425b      	neglt	r3, r3
 800af5a:	f042 0202 	orrlt.w	r2, r2, #2
 800af5e:	9307      	strge	r3, [sp, #28]
 800af60:	9307      	strlt	r3, [sp, #28]
 800af62:	bfb8      	it	lt
 800af64:	9204      	strlt	r2, [sp, #16]
 800af66:	7823      	ldrb	r3, [r4, #0]
 800af68:	2b2e      	cmp	r3, #46	@ 0x2e
 800af6a:	d10a      	bne.n	800af82 <_vfiprintf_r+0x156>
 800af6c:	7863      	ldrb	r3, [r4, #1]
 800af6e:	2b2a      	cmp	r3, #42	@ 0x2a
 800af70:	d132      	bne.n	800afd8 <_vfiprintf_r+0x1ac>
 800af72:	9b03      	ldr	r3, [sp, #12]
 800af74:	1d1a      	adds	r2, r3, #4
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	9203      	str	r2, [sp, #12]
 800af7a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800af7e:	3402      	adds	r4, #2
 800af80:	9305      	str	r3, [sp, #20]
 800af82:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800b058 <_vfiprintf_r+0x22c>
 800af86:	7821      	ldrb	r1, [r4, #0]
 800af88:	2203      	movs	r2, #3
 800af8a:	4650      	mov	r0, sl
 800af8c:	f7f5 f920 	bl	80001d0 <memchr>
 800af90:	b138      	cbz	r0, 800afa2 <_vfiprintf_r+0x176>
 800af92:	9b04      	ldr	r3, [sp, #16]
 800af94:	eba0 000a 	sub.w	r0, r0, sl
 800af98:	2240      	movs	r2, #64	@ 0x40
 800af9a:	4082      	lsls	r2, r0
 800af9c:	4313      	orrs	r3, r2
 800af9e:	3401      	adds	r4, #1
 800afa0:	9304      	str	r3, [sp, #16]
 800afa2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800afa6:	4829      	ldr	r0, [pc, #164]	@ (800b04c <_vfiprintf_r+0x220>)
 800afa8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800afac:	2206      	movs	r2, #6
 800afae:	f7f5 f90f 	bl	80001d0 <memchr>
 800afb2:	2800      	cmp	r0, #0
 800afb4:	d03f      	beq.n	800b036 <_vfiprintf_r+0x20a>
 800afb6:	4b26      	ldr	r3, [pc, #152]	@ (800b050 <_vfiprintf_r+0x224>)
 800afb8:	bb1b      	cbnz	r3, 800b002 <_vfiprintf_r+0x1d6>
 800afba:	9b03      	ldr	r3, [sp, #12]
 800afbc:	3307      	adds	r3, #7
 800afbe:	f023 0307 	bic.w	r3, r3, #7
 800afc2:	3308      	adds	r3, #8
 800afc4:	9303      	str	r3, [sp, #12]
 800afc6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800afc8:	443b      	add	r3, r7
 800afca:	9309      	str	r3, [sp, #36]	@ 0x24
 800afcc:	e76a      	b.n	800aea4 <_vfiprintf_r+0x78>
 800afce:	fb0c 3202 	mla	r2, ip, r2, r3
 800afd2:	460c      	mov	r4, r1
 800afd4:	2001      	movs	r0, #1
 800afd6:	e7a8      	b.n	800af2a <_vfiprintf_r+0xfe>
 800afd8:	2300      	movs	r3, #0
 800afda:	3401      	adds	r4, #1
 800afdc:	9305      	str	r3, [sp, #20]
 800afde:	4619      	mov	r1, r3
 800afe0:	f04f 0c0a 	mov.w	ip, #10
 800afe4:	4620      	mov	r0, r4
 800afe6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800afea:	3a30      	subs	r2, #48	@ 0x30
 800afec:	2a09      	cmp	r2, #9
 800afee:	d903      	bls.n	800aff8 <_vfiprintf_r+0x1cc>
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	d0c6      	beq.n	800af82 <_vfiprintf_r+0x156>
 800aff4:	9105      	str	r1, [sp, #20]
 800aff6:	e7c4      	b.n	800af82 <_vfiprintf_r+0x156>
 800aff8:	fb0c 2101 	mla	r1, ip, r1, r2
 800affc:	4604      	mov	r4, r0
 800affe:	2301      	movs	r3, #1
 800b000:	e7f0      	b.n	800afe4 <_vfiprintf_r+0x1b8>
 800b002:	ab03      	add	r3, sp, #12
 800b004:	9300      	str	r3, [sp, #0]
 800b006:	462a      	mov	r2, r5
 800b008:	4b12      	ldr	r3, [pc, #72]	@ (800b054 <_vfiprintf_r+0x228>)
 800b00a:	a904      	add	r1, sp, #16
 800b00c:	4630      	mov	r0, r6
 800b00e:	f7fd fdd5 	bl	8008bbc <_printf_float>
 800b012:	4607      	mov	r7, r0
 800b014:	1c78      	adds	r0, r7, #1
 800b016:	d1d6      	bne.n	800afc6 <_vfiprintf_r+0x19a>
 800b018:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b01a:	07d9      	lsls	r1, r3, #31
 800b01c:	d405      	bmi.n	800b02a <_vfiprintf_r+0x1fe>
 800b01e:	89ab      	ldrh	r3, [r5, #12]
 800b020:	059a      	lsls	r2, r3, #22
 800b022:	d402      	bmi.n	800b02a <_vfiprintf_r+0x1fe>
 800b024:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b026:	f7fe fc43 	bl	80098b0 <__retarget_lock_release_recursive>
 800b02a:	89ab      	ldrh	r3, [r5, #12]
 800b02c:	065b      	lsls	r3, r3, #25
 800b02e:	f53f af1f 	bmi.w	800ae70 <_vfiprintf_r+0x44>
 800b032:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b034:	e71e      	b.n	800ae74 <_vfiprintf_r+0x48>
 800b036:	ab03      	add	r3, sp, #12
 800b038:	9300      	str	r3, [sp, #0]
 800b03a:	462a      	mov	r2, r5
 800b03c:	4b05      	ldr	r3, [pc, #20]	@ (800b054 <_vfiprintf_r+0x228>)
 800b03e:	a904      	add	r1, sp, #16
 800b040:	4630      	mov	r0, r6
 800b042:	f7fe f853 	bl	80090ec <_printf_i>
 800b046:	e7e4      	b.n	800b012 <_vfiprintf_r+0x1e6>
 800b048:	080127c2 	.word	0x080127c2
 800b04c:	080127cc 	.word	0x080127cc
 800b050:	08008bbd 	.word	0x08008bbd
 800b054:	0800ae07 	.word	0x0800ae07
 800b058:	080127c8 	.word	0x080127c8

0800b05c <__swbuf_r>:
 800b05c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b05e:	460e      	mov	r6, r1
 800b060:	4614      	mov	r4, r2
 800b062:	4605      	mov	r5, r0
 800b064:	b118      	cbz	r0, 800b06e <__swbuf_r+0x12>
 800b066:	6a03      	ldr	r3, [r0, #32]
 800b068:	b90b      	cbnz	r3, 800b06e <__swbuf_r+0x12>
 800b06a:	f7fe faab 	bl	80095c4 <__sinit>
 800b06e:	69a3      	ldr	r3, [r4, #24]
 800b070:	60a3      	str	r3, [r4, #8]
 800b072:	89a3      	ldrh	r3, [r4, #12]
 800b074:	071a      	lsls	r2, r3, #28
 800b076:	d501      	bpl.n	800b07c <__swbuf_r+0x20>
 800b078:	6923      	ldr	r3, [r4, #16]
 800b07a:	b943      	cbnz	r3, 800b08e <__swbuf_r+0x32>
 800b07c:	4621      	mov	r1, r4
 800b07e:	4628      	mov	r0, r5
 800b080:	f000 f82a 	bl	800b0d8 <__swsetup_r>
 800b084:	b118      	cbz	r0, 800b08e <__swbuf_r+0x32>
 800b086:	f04f 37ff 	mov.w	r7, #4294967295
 800b08a:	4638      	mov	r0, r7
 800b08c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b08e:	6823      	ldr	r3, [r4, #0]
 800b090:	6922      	ldr	r2, [r4, #16]
 800b092:	1a98      	subs	r0, r3, r2
 800b094:	6963      	ldr	r3, [r4, #20]
 800b096:	b2f6      	uxtb	r6, r6
 800b098:	4283      	cmp	r3, r0
 800b09a:	4637      	mov	r7, r6
 800b09c:	dc05      	bgt.n	800b0aa <__swbuf_r+0x4e>
 800b09e:	4621      	mov	r1, r4
 800b0a0:	4628      	mov	r0, r5
 800b0a2:	f7fe f9c7 	bl	8009434 <_fflush_r>
 800b0a6:	2800      	cmp	r0, #0
 800b0a8:	d1ed      	bne.n	800b086 <__swbuf_r+0x2a>
 800b0aa:	68a3      	ldr	r3, [r4, #8]
 800b0ac:	3b01      	subs	r3, #1
 800b0ae:	60a3      	str	r3, [r4, #8]
 800b0b0:	6823      	ldr	r3, [r4, #0]
 800b0b2:	1c5a      	adds	r2, r3, #1
 800b0b4:	6022      	str	r2, [r4, #0]
 800b0b6:	701e      	strb	r6, [r3, #0]
 800b0b8:	6962      	ldr	r2, [r4, #20]
 800b0ba:	1c43      	adds	r3, r0, #1
 800b0bc:	429a      	cmp	r2, r3
 800b0be:	d004      	beq.n	800b0ca <__swbuf_r+0x6e>
 800b0c0:	89a3      	ldrh	r3, [r4, #12]
 800b0c2:	07db      	lsls	r3, r3, #31
 800b0c4:	d5e1      	bpl.n	800b08a <__swbuf_r+0x2e>
 800b0c6:	2e0a      	cmp	r6, #10
 800b0c8:	d1df      	bne.n	800b08a <__swbuf_r+0x2e>
 800b0ca:	4621      	mov	r1, r4
 800b0cc:	4628      	mov	r0, r5
 800b0ce:	f7fe f9b1 	bl	8009434 <_fflush_r>
 800b0d2:	2800      	cmp	r0, #0
 800b0d4:	d0d9      	beq.n	800b08a <__swbuf_r+0x2e>
 800b0d6:	e7d6      	b.n	800b086 <__swbuf_r+0x2a>

0800b0d8 <__swsetup_r>:
 800b0d8:	b538      	push	{r3, r4, r5, lr}
 800b0da:	4b29      	ldr	r3, [pc, #164]	@ (800b180 <__swsetup_r+0xa8>)
 800b0dc:	4605      	mov	r5, r0
 800b0de:	6818      	ldr	r0, [r3, #0]
 800b0e0:	460c      	mov	r4, r1
 800b0e2:	b118      	cbz	r0, 800b0ec <__swsetup_r+0x14>
 800b0e4:	6a03      	ldr	r3, [r0, #32]
 800b0e6:	b90b      	cbnz	r3, 800b0ec <__swsetup_r+0x14>
 800b0e8:	f7fe fa6c 	bl	80095c4 <__sinit>
 800b0ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b0f0:	0719      	lsls	r1, r3, #28
 800b0f2:	d422      	bmi.n	800b13a <__swsetup_r+0x62>
 800b0f4:	06da      	lsls	r2, r3, #27
 800b0f6:	d407      	bmi.n	800b108 <__swsetup_r+0x30>
 800b0f8:	2209      	movs	r2, #9
 800b0fa:	602a      	str	r2, [r5, #0]
 800b0fc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b100:	81a3      	strh	r3, [r4, #12]
 800b102:	f04f 30ff 	mov.w	r0, #4294967295
 800b106:	e033      	b.n	800b170 <__swsetup_r+0x98>
 800b108:	0758      	lsls	r0, r3, #29
 800b10a:	d512      	bpl.n	800b132 <__swsetup_r+0x5a>
 800b10c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b10e:	b141      	cbz	r1, 800b122 <__swsetup_r+0x4a>
 800b110:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b114:	4299      	cmp	r1, r3
 800b116:	d002      	beq.n	800b11e <__swsetup_r+0x46>
 800b118:	4628      	mov	r0, r5
 800b11a:	f7ff fa45 	bl	800a5a8 <_free_r>
 800b11e:	2300      	movs	r3, #0
 800b120:	6363      	str	r3, [r4, #52]	@ 0x34
 800b122:	89a3      	ldrh	r3, [r4, #12]
 800b124:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b128:	81a3      	strh	r3, [r4, #12]
 800b12a:	2300      	movs	r3, #0
 800b12c:	6063      	str	r3, [r4, #4]
 800b12e:	6923      	ldr	r3, [r4, #16]
 800b130:	6023      	str	r3, [r4, #0]
 800b132:	89a3      	ldrh	r3, [r4, #12]
 800b134:	f043 0308 	orr.w	r3, r3, #8
 800b138:	81a3      	strh	r3, [r4, #12]
 800b13a:	6923      	ldr	r3, [r4, #16]
 800b13c:	b94b      	cbnz	r3, 800b152 <__swsetup_r+0x7a>
 800b13e:	89a3      	ldrh	r3, [r4, #12]
 800b140:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b144:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b148:	d003      	beq.n	800b152 <__swsetup_r+0x7a>
 800b14a:	4621      	mov	r1, r4
 800b14c:	4628      	mov	r0, r5
 800b14e:	f000 f883 	bl	800b258 <__smakebuf_r>
 800b152:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b156:	f013 0201 	ands.w	r2, r3, #1
 800b15a:	d00a      	beq.n	800b172 <__swsetup_r+0x9a>
 800b15c:	2200      	movs	r2, #0
 800b15e:	60a2      	str	r2, [r4, #8]
 800b160:	6962      	ldr	r2, [r4, #20]
 800b162:	4252      	negs	r2, r2
 800b164:	61a2      	str	r2, [r4, #24]
 800b166:	6922      	ldr	r2, [r4, #16]
 800b168:	b942      	cbnz	r2, 800b17c <__swsetup_r+0xa4>
 800b16a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b16e:	d1c5      	bne.n	800b0fc <__swsetup_r+0x24>
 800b170:	bd38      	pop	{r3, r4, r5, pc}
 800b172:	0799      	lsls	r1, r3, #30
 800b174:	bf58      	it	pl
 800b176:	6962      	ldrpl	r2, [r4, #20]
 800b178:	60a2      	str	r2, [r4, #8]
 800b17a:	e7f4      	b.n	800b166 <__swsetup_r+0x8e>
 800b17c:	2000      	movs	r0, #0
 800b17e:	e7f7      	b.n	800b170 <__swsetup_r+0x98>
 800b180:	20003f94 	.word	0x20003f94

0800b184 <_raise_r>:
 800b184:	291f      	cmp	r1, #31
 800b186:	b538      	push	{r3, r4, r5, lr}
 800b188:	4605      	mov	r5, r0
 800b18a:	460c      	mov	r4, r1
 800b18c:	d904      	bls.n	800b198 <_raise_r+0x14>
 800b18e:	2316      	movs	r3, #22
 800b190:	6003      	str	r3, [r0, #0]
 800b192:	f04f 30ff 	mov.w	r0, #4294967295
 800b196:	bd38      	pop	{r3, r4, r5, pc}
 800b198:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800b19a:	b112      	cbz	r2, 800b1a2 <_raise_r+0x1e>
 800b19c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b1a0:	b94b      	cbnz	r3, 800b1b6 <_raise_r+0x32>
 800b1a2:	4628      	mov	r0, r5
 800b1a4:	f000 f830 	bl	800b208 <_getpid_r>
 800b1a8:	4622      	mov	r2, r4
 800b1aa:	4601      	mov	r1, r0
 800b1ac:	4628      	mov	r0, r5
 800b1ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b1b2:	f000 b817 	b.w	800b1e4 <_kill_r>
 800b1b6:	2b01      	cmp	r3, #1
 800b1b8:	d00a      	beq.n	800b1d0 <_raise_r+0x4c>
 800b1ba:	1c59      	adds	r1, r3, #1
 800b1bc:	d103      	bne.n	800b1c6 <_raise_r+0x42>
 800b1be:	2316      	movs	r3, #22
 800b1c0:	6003      	str	r3, [r0, #0]
 800b1c2:	2001      	movs	r0, #1
 800b1c4:	e7e7      	b.n	800b196 <_raise_r+0x12>
 800b1c6:	2100      	movs	r1, #0
 800b1c8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800b1cc:	4620      	mov	r0, r4
 800b1ce:	4798      	blx	r3
 800b1d0:	2000      	movs	r0, #0
 800b1d2:	e7e0      	b.n	800b196 <_raise_r+0x12>

0800b1d4 <raise>:
 800b1d4:	4b02      	ldr	r3, [pc, #8]	@ (800b1e0 <raise+0xc>)
 800b1d6:	4601      	mov	r1, r0
 800b1d8:	6818      	ldr	r0, [r3, #0]
 800b1da:	f7ff bfd3 	b.w	800b184 <_raise_r>
 800b1de:	bf00      	nop
 800b1e0:	20003f94 	.word	0x20003f94

0800b1e4 <_kill_r>:
 800b1e4:	b538      	push	{r3, r4, r5, lr}
 800b1e6:	4d07      	ldr	r5, [pc, #28]	@ (800b204 <_kill_r+0x20>)
 800b1e8:	2300      	movs	r3, #0
 800b1ea:	4604      	mov	r4, r0
 800b1ec:	4608      	mov	r0, r1
 800b1ee:	4611      	mov	r1, r2
 800b1f0:	602b      	str	r3, [r5, #0]
 800b1f2:	f7f5 ffcc 	bl	800118e <_kill>
 800b1f6:	1c43      	adds	r3, r0, #1
 800b1f8:	d102      	bne.n	800b200 <_kill_r+0x1c>
 800b1fa:	682b      	ldr	r3, [r5, #0]
 800b1fc:	b103      	cbz	r3, 800b200 <_kill_r+0x1c>
 800b1fe:	6023      	str	r3, [r4, #0]
 800b200:	bd38      	pop	{r3, r4, r5, pc}
 800b202:	bf00      	nop
 800b204:	20004560 	.word	0x20004560

0800b208 <_getpid_r>:
 800b208:	f7f5 bfbf 	b.w	800118a <_getpid>

0800b20c <__swhatbuf_r>:
 800b20c:	b570      	push	{r4, r5, r6, lr}
 800b20e:	460c      	mov	r4, r1
 800b210:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b214:	2900      	cmp	r1, #0
 800b216:	b096      	sub	sp, #88	@ 0x58
 800b218:	4615      	mov	r5, r2
 800b21a:	461e      	mov	r6, r3
 800b21c:	da0d      	bge.n	800b23a <__swhatbuf_r+0x2e>
 800b21e:	89a3      	ldrh	r3, [r4, #12]
 800b220:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b224:	f04f 0100 	mov.w	r1, #0
 800b228:	bf14      	ite	ne
 800b22a:	2340      	movne	r3, #64	@ 0x40
 800b22c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b230:	2000      	movs	r0, #0
 800b232:	6031      	str	r1, [r6, #0]
 800b234:	602b      	str	r3, [r5, #0]
 800b236:	b016      	add	sp, #88	@ 0x58
 800b238:	bd70      	pop	{r4, r5, r6, pc}
 800b23a:	466a      	mov	r2, sp
 800b23c:	f000 f848 	bl	800b2d0 <_fstat_r>
 800b240:	2800      	cmp	r0, #0
 800b242:	dbec      	blt.n	800b21e <__swhatbuf_r+0x12>
 800b244:	9901      	ldr	r1, [sp, #4]
 800b246:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b24a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b24e:	4259      	negs	r1, r3
 800b250:	4159      	adcs	r1, r3
 800b252:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b256:	e7eb      	b.n	800b230 <__swhatbuf_r+0x24>

0800b258 <__smakebuf_r>:
 800b258:	898b      	ldrh	r3, [r1, #12]
 800b25a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b25c:	079d      	lsls	r5, r3, #30
 800b25e:	4606      	mov	r6, r0
 800b260:	460c      	mov	r4, r1
 800b262:	d507      	bpl.n	800b274 <__smakebuf_r+0x1c>
 800b264:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b268:	6023      	str	r3, [r4, #0]
 800b26a:	6123      	str	r3, [r4, #16]
 800b26c:	2301      	movs	r3, #1
 800b26e:	6163      	str	r3, [r4, #20]
 800b270:	b003      	add	sp, #12
 800b272:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b274:	ab01      	add	r3, sp, #4
 800b276:	466a      	mov	r2, sp
 800b278:	f7ff ffc8 	bl	800b20c <__swhatbuf_r>
 800b27c:	9f00      	ldr	r7, [sp, #0]
 800b27e:	4605      	mov	r5, r0
 800b280:	4639      	mov	r1, r7
 800b282:	4630      	mov	r0, r6
 800b284:	f7fd fabc 	bl	8008800 <_malloc_r>
 800b288:	b948      	cbnz	r0, 800b29e <__smakebuf_r+0x46>
 800b28a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b28e:	059a      	lsls	r2, r3, #22
 800b290:	d4ee      	bmi.n	800b270 <__smakebuf_r+0x18>
 800b292:	f023 0303 	bic.w	r3, r3, #3
 800b296:	f043 0302 	orr.w	r3, r3, #2
 800b29a:	81a3      	strh	r3, [r4, #12]
 800b29c:	e7e2      	b.n	800b264 <__smakebuf_r+0xc>
 800b29e:	89a3      	ldrh	r3, [r4, #12]
 800b2a0:	6020      	str	r0, [r4, #0]
 800b2a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b2a6:	81a3      	strh	r3, [r4, #12]
 800b2a8:	9b01      	ldr	r3, [sp, #4]
 800b2aa:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b2ae:	b15b      	cbz	r3, 800b2c8 <__smakebuf_r+0x70>
 800b2b0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b2b4:	4630      	mov	r0, r6
 800b2b6:	f000 f81d 	bl	800b2f4 <_isatty_r>
 800b2ba:	b128      	cbz	r0, 800b2c8 <__smakebuf_r+0x70>
 800b2bc:	89a3      	ldrh	r3, [r4, #12]
 800b2be:	f023 0303 	bic.w	r3, r3, #3
 800b2c2:	f043 0301 	orr.w	r3, r3, #1
 800b2c6:	81a3      	strh	r3, [r4, #12]
 800b2c8:	89a3      	ldrh	r3, [r4, #12]
 800b2ca:	431d      	orrs	r5, r3
 800b2cc:	81a5      	strh	r5, [r4, #12]
 800b2ce:	e7cf      	b.n	800b270 <__smakebuf_r+0x18>

0800b2d0 <_fstat_r>:
 800b2d0:	b538      	push	{r3, r4, r5, lr}
 800b2d2:	4d07      	ldr	r5, [pc, #28]	@ (800b2f0 <_fstat_r+0x20>)
 800b2d4:	2300      	movs	r3, #0
 800b2d6:	4604      	mov	r4, r0
 800b2d8:	4608      	mov	r0, r1
 800b2da:	4611      	mov	r1, r2
 800b2dc:	602b      	str	r3, [r5, #0]
 800b2de:	f7f5 ff75 	bl	80011cc <_fstat>
 800b2e2:	1c43      	adds	r3, r0, #1
 800b2e4:	d102      	bne.n	800b2ec <_fstat_r+0x1c>
 800b2e6:	682b      	ldr	r3, [r5, #0]
 800b2e8:	b103      	cbz	r3, 800b2ec <_fstat_r+0x1c>
 800b2ea:	6023      	str	r3, [r4, #0]
 800b2ec:	bd38      	pop	{r3, r4, r5, pc}
 800b2ee:	bf00      	nop
 800b2f0:	20004560 	.word	0x20004560

0800b2f4 <_isatty_r>:
 800b2f4:	b538      	push	{r3, r4, r5, lr}
 800b2f6:	4d06      	ldr	r5, [pc, #24]	@ (800b310 <_isatty_r+0x1c>)
 800b2f8:	2300      	movs	r3, #0
 800b2fa:	4604      	mov	r4, r0
 800b2fc:	4608      	mov	r0, r1
 800b2fe:	602b      	str	r3, [r5, #0]
 800b300:	f7f5 ff69 	bl	80011d6 <_isatty>
 800b304:	1c43      	adds	r3, r0, #1
 800b306:	d102      	bne.n	800b30e <_isatty_r+0x1a>
 800b308:	682b      	ldr	r3, [r5, #0]
 800b30a:	b103      	cbz	r3, 800b30e <_isatty_r+0x1a>
 800b30c:	6023      	str	r3, [r4, #0]
 800b30e:	bd38      	pop	{r3, r4, r5, pc}
 800b310:	20004560 	.word	0x20004560

0800b314 <expf>:
 800b314:	b508      	push	{r3, lr}
 800b316:	ed2d 8b02 	vpush	{d8}
 800b31a:	eef0 8a40 	vmov.f32	s17, s0
 800b31e:	f000 f9f9 	bl	800b714 <__ieee754_expf>
 800b322:	eeb0 8a40 	vmov.f32	s16, s0
 800b326:	eeb0 0a68 	vmov.f32	s0, s17
 800b32a:	f000 f89b 	bl	800b464 <finitef>
 800b32e:	b160      	cbz	r0, 800b34a <expf+0x36>
 800b330:	eddf 7a0f 	vldr	s15, [pc, #60]	@ 800b370 <expf+0x5c>
 800b334:	eef4 8ae7 	vcmpe.f32	s17, s15
 800b338:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b33c:	dd0a      	ble.n	800b354 <expf+0x40>
 800b33e:	f7fe fa8b 	bl	8009858 <__errno>
 800b342:	ed9f 8a0c 	vldr	s16, [pc, #48]	@ 800b374 <expf+0x60>
 800b346:	2322      	movs	r3, #34	@ 0x22
 800b348:	6003      	str	r3, [r0, #0]
 800b34a:	eeb0 0a48 	vmov.f32	s0, s16
 800b34e:	ecbd 8b02 	vpop	{d8}
 800b352:	bd08      	pop	{r3, pc}
 800b354:	eddf 7a08 	vldr	s15, [pc, #32]	@ 800b378 <expf+0x64>
 800b358:	eef4 8ae7 	vcmpe.f32	s17, s15
 800b35c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b360:	d5f3      	bpl.n	800b34a <expf+0x36>
 800b362:	f7fe fa79 	bl	8009858 <__errno>
 800b366:	2322      	movs	r3, #34	@ 0x22
 800b368:	ed9f 8a04 	vldr	s16, [pc, #16]	@ 800b37c <expf+0x68>
 800b36c:	6003      	str	r3, [r0, #0]
 800b36e:	e7ec      	b.n	800b34a <expf+0x36>
 800b370:	42b17217 	.word	0x42b17217
 800b374:	7f800000 	.word	0x7f800000
 800b378:	c2cff1b5 	.word	0xc2cff1b5
 800b37c:	00000000 	.word	0x00000000

0800b380 <fabsf>:
 800b380:	ee10 3a10 	vmov	r3, s0
 800b384:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b388:	ee00 3a10 	vmov	s0, r3
 800b38c:	4770      	bx	lr
	...

0800b390 <tanhf>:
 800b390:	b538      	push	{r3, r4, r5, lr}
 800b392:	ee10 5a10 	vmov	r5, s0
 800b396:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800b39a:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800b39e:	ed2d 8b02 	vpush	{d8}
 800b3a2:	eef0 7a40 	vmov.f32	s15, s0
 800b3a6:	d30f      	bcc.n	800b3c8 <tanhf+0x38>
 800b3a8:	4b2a      	ldr	r3, [pc, #168]	@ (800b454 <tanhf+0xc4>)
 800b3aa:	edd3 6a00 	vldr	s13, [r3]
 800b3ae:	ed93 7a00 	vldr	s14, [r3]
 800b3b2:	ee86 0aa7 	vdiv.f32	s0, s13, s15
 800b3b6:	2d00      	cmp	r5, #0
 800b3b8:	bfac      	ite	ge
 800b3ba:	ee30 0a07 	vaddge.f32	s0, s0, s14
 800b3be:	ee30 0a47 	vsublt.f32	s0, s0, s14
 800b3c2:	ecbd 8b02 	vpop	{d8}
 800b3c6:	bd38      	pop	{r3, r4, r5, pc}
 800b3c8:	4a23      	ldr	r2, [pc, #140]	@ (800b458 <tanhf+0xc8>)
 800b3ca:	4293      	cmp	r3, r2
 800b3cc:	d839      	bhi.n	800b442 <tanhf+0xb2>
 800b3ce:	f1b3 5f10 	cmp.w	r3, #603979776	@ 0x24000000
 800b3d2:	d207      	bcs.n	800b3e4 <tanhf+0x54>
 800b3d4:	4b1f      	ldr	r3, [pc, #124]	@ (800b454 <tanhf+0xc4>)
 800b3d6:	ed93 0a00 	vldr	s0, [r3]
 800b3da:	ee30 0a27 	vadd.f32	s0, s0, s15
 800b3de:	ee20 0a27 	vmul.f32	s0, s0, s15
 800b3e2:	e7ee      	b.n	800b3c2 <tanhf+0x32>
 800b3e4:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 800b3e8:	4c1c      	ldr	r4, [pc, #112]	@ (800b45c <tanhf+0xcc>)
 800b3ea:	d319      	bcc.n	800b420 <tanhf+0x90>
 800b3ec:	f7ff ffc8 	bl	800b380 <fabsf>
 800b3f0:	edd4 7a00 	vldr	s15, [r4]
 800b3f4:	ee20 0a27 	vmul.f32	s0, s0, s15
 800b3f8:	f000 f83e 	bl	800b478 <expm1f>
 800b3fc:	4b15      	ldr	r3, [pc, #84]	@ (800b454 <tanhf+0xc4>)
 800b3fe:	edd3 7a00 	vldr	s15, [r3]
 800b402:	ed94 6a00 	vldr	s12, [r4]
 800b406:	ed94 7a00 	vldr	s14, [r4]
 800b40a:	ee37 7a00 	vadd.f32	s14, s14, s0
 800b40e:	eec6 6a07 	vdiv.f32	s13, s12, s14
 800b412:	ee37 0ae6 	vsub.f32	s0, s15, s13
 800b416:	2d00      	cmp	r5, #0
 800b418:	bfb8      	it	lt
 800b41a:	eeb1 0a40 	vneglt.f32	s0, s0
 800b41e:	e7d0      	b.n	800b3c2 <tanhf+0x32>
 800b420:	ed94 8a00 	vldr	s16, [r4]
 800b424:	f7ff ffac 	bl	800b380 <fabsf>
 800b428:	ee28 0a40 	vnmul.f32	s0, s16, s0
 800b42c:	f000 f824 	bl	800b478 <expm1f>
 800b430:	edd4 7a00 	vldr	s15, [r4]
 800b434:	ee77 7a80 	vadd.f32	s15, s15, s0
 800b438:	eeb1 7a40 	vneg.f32	s14, s0
 800b43c:	ee87 0a27 	vdiv.f32	s0, s14, s15
 800b440:	e7e9      	b.n	800b416 <tanhf+0x86>
 800b442:	4b04      	ldr	r3, [pc, #16]	@ (800b454 <tanhf+0xc4>)
 800b444:	ed93 0a00 	vldr	s0, [r3]
 800b448:	4b05      	ldr	r3, [pc, #20]	@ (800b460 <tanhf+0xd0>)
 800b44a:	edd3 7a00 	vldr	s15, [r3]
 800b44e:	ee30 0a67 	vsub.f32	s0, s0, s15
 800b452:	e7e0      	b.n	800b416 <tanhf+0x86>
 800b454:	20004158 	.word	0x20004158
 800b458:	41afffff 	.word	0x41afffff
 800b45c:	20004154 	.word	0x20004154
 800b460:	20004150 	.word	0x20004150

0800b464 <finitef>:
 800b464:	ee10 3a10 	vmov	r3, s0
 800b468:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 800b46c:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 800b470:	bfac      	ite	ge
 800b472:	2000      	movge	r0, #0
 800b474:	2001      	movlt	r0, #1
 800b476:	4770      	bx	lr

0800b478 <expm1f>:
 800b478:	ee10 3a10 	vmov	r3, s0
 800b47c:	4a83      	ldr	r2, [pc, #524]	@ (800b68c <expm1f+0x214>)
 800b47e:	f003 4000 	and.w	r0, r3, #2147483648	@ 0x80000000
 800b482:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b486:	4293      	cmp	r3, r2
 800b488:	d91f      	bls.n	800b4ca <expm1f+0x52>
 800b48a:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800b48e:	d902      	bls.n	800b496 <expm1f+0x1e>
 800b490:	ee30 0a00 	vadd.f32	s0, s0, s0
 800b494:	4770      	bx	lr
 800b496:	d106      	bne.n	800b4a6 <expm1f+0x2e>
 800b498:	2800      	cmp	r0, #0
 800b49a:	eeff 7a00 	vmov.f32	s15, #240	@ 0xbf800000 -1.0
 800b49e:	bf18      	it	ne
 800b4a0:	eeb0 0a67 	vmovne.f32	s0, s15
 800b4a4:	4770      	bx	lr
 800b4a6:	b920      	cbnz	r0, 800b4b2 <expm1f+0x3a>
 800b4a8:	4a79      	ldr	r2, [pc, #484]	@ (800b690 <expm1f+0x218>)
 800b4aa:	4293      	cmp	r3, r2
 800b4ac:	d963      	bls.n	800b576 <expm1f+0xfe>
 800b4ae:	f000 b92b 	b.w	800b708 <__math_oflowf>
 800b4b2:	eddf 7a78 	vldr	s15, [pc, #480]	@ 800b694 <expm1f+0x21c>
 800b4b6:	ee70 7a27 	vadd.f32	s15, s0, s15
 800b4ba:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b4be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b4c2:	d551      	bpl.n	800b568 <expm1f+0xf0>
 800b4c4:	eebf 0a00 	vmov.f32	s0, #240	@ 0xbf800000 -1.0
 800b4c8:	4770      	bx	lr
 800b4ca:	4a73      	ldr	r2, [pc, #460]	@ (800b698 <expm1f+0x220>)
 800b4cc:	4293      	cmp	r3, r2
 800b4ce:	d972      	bls.n	800b5b6 <expm1f+0x13e>
 800b4d0:	4a72      	ldr	r2, [pc, #456]	@ (800b69c <expm1f+0x224>)
 800b4d2:	4293      	cmp	r3, r2
 800b4d4:	d868      	bhi.n	800b5a8 <expm1f+0x130>
 800b4d6:	ed9f 7a72 	vldr	s14, [pc, #456]	@ 800b6a0 <expm1f+0x228>
 800b4da:	2800      	cmp	r0, #0
 800b4dc:	d13d      	bne.n	800b55a <expm1f+0xe2>
 800b4de:	ee30 7a47 	vsub.f32	s14, s0, s14
 800b4e2:	eddf 6a70 	vldr	s13, [pc, #448]	@ 800b6a4 <expm1f+0x22c>
 800b4e6:	2301      	movs	r3, #1
 800b4e8:	ee37 0a66 	vsub.f32	s0, s14, s13
 800b4ec:	ee77 7a40 	vsub.f32	s15, s14, s0
 800b4f0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800b4f4:	eef6 5a00 	vmov.f32	s11, #96	@ 0x3f000000  0.5
 800b4f8:	ee20 4a25 	vmul.f32	s8, s0, s11
 800b4fc:	ed9f 6a6a 	vldr	s12, [pc, #424]	@ 800b6a8 <expm1f+0x230>
 800b500:	eddf 6a6a 	vldr	s13, [pc, #424]	@ 800b6ac <expm1f+0x234>
 800b504:	ed9f 5a6a 	vldr	s10, [pc, #424]	@ 800b6b0 <expm1f+0x238>
 800b508:	ee20 7a04 	vmul.f32	s14, s0, s8
 800b50c:	eef0 4a08 	vmov.f32	s9, #8	@ 0x40400000  3.0
 800b510:	eee7 6a06 	vfma.f32	s13, s14, s12
 800b514:	ed9f 6a67 	vldr	s12, [pc, #412]	@ 800b6b4 <expm1f+0x23c>
 800b518:	eea6 6a87 	vfma.f32	s12, s13, s14
 800b51c:	eddf 6a66 	vldr	s13, [pc, #408]	@ 800b6b8 <expm1f+0x240>
 800b520:	eee6 6a07 	vfma.f32	s13, s12, s14
 800b524:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 800b528:	eea6 5a87 	vfma.f32	s10, s13, s14
 800b52c:	eef0 6a46 	vmov.f32	s13, s12
 800b530:	eee5 6a07 	vfma.f32	s13, s10, s14
 800b534:	eee4 4a66 	vfms.f32	s9, s8, s13
 800b538:	eeb1 4a08 	vmov.f32	s8, #24	@ 0x40c00000  6.0
 800b53c:	eea0 4a64 	vfms.f32	s8, s0, s9
 800b540:	ee36 5ae4 	vsub.f32	s10, s13, s9
 800b544:	eec5 6a04 	vdiv.f32	s13, s10, s8
 800b548:	ee66 6a87 	vmul.f32	s13, s13, s14
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	d140      	bne.n	800b5d2 <expm1f+0x15a>
 800b550:	ee90 7a26 	vfnms.f32	s14, s0, s13
 800b554:	ee30 0a47 	vsub.f32	s0, s0, s14
 800b558:	4770      	bx	lr
 800b55a:	ee30 7a07 	vadd.f32	s14, s0, s14
 800b55e:	eddf 6a57 	vldr	s13, [pc, #348]	@ 800b6bc <expm1f+0x244>
 800b562:	f04f 33ff 	mov.w	r3, #4294967295
 800b566:	e7bf      	b.n	800b4e8 <expm1f+0x70>
 800b568:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 800b6c0 <expm1f+0x248>
 800b56c:	ee20 7a07 	vmul.f32	s14, s0, s14
 800b570:	eefe 7a00 	vmov.f32	s15, #224	@ 0xbf000000 -0.5
 800b574:	e005      	b.n	800b582 <expm1f+0x10a>
 800b576:	ed9f 7a52 	vldr	s14, [pc, #328]	@ 800b6c0 <expm1f+0x248>
 800b57a:	ee20 7a07 	vmul.f32	s14, s0, s14
 800b57e:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800b582:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b586:	eeb0 7a40 	vmov.f32	s14, s0
 800b58a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b58e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800b592:	ee17 3a90 	vmov	r3, s15
 800b596:	eddf 7a42 	vldr	s15, [pc, #264]	@ 800b6a0 <expm1f+0x228>
 800b59a:	eea6 7ae7 	vfms.f32	s14, s13, s15
 800b59e:	eddf 7a41 	vldr	s15, [pc, #260]	@ 800b6a4 <expm1f+0x22c>
 800b5a2:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800b5a6:	e79f      	b.n	800b4e8 <expm1f+0x70>
 800b5a8:	ed9f 7a45 	vldr	s14, [pc, #276]	@ 800b6c0 <expm1f+0x248>
 800b5ac:	ee20 7a07 	vmul.f32	s14, s0, s14
 800b5b0:	2800      	cmp	r0, #0
 800b5b2:	d0e4      	beq.n	800b57e <expm1f+0x106>
 800b5b4:	e7dc      	b.n	800b570 <expm1f+0xf8>
 800b5b6:	f1b3 5f4c 	cmp.w	r3, #855638016	@ 0x33000000
 800b5ba:	d208      	bcs.n	800b5ce <expm1f+0x156>
 800b5bc:	eddf 7a41 	vldr	s15, [pc, #260]	@ 800b6c4 <expm1f+0x24c>
 800b5c0:	ee70 7a27 	vadd.f32	s15, s0, s15
 800b5c4:	ee77 7ae7 	vsub.f32	s15, s15, s15
 800b5c8:	ee30 0a67 	vsub.f32	s0, s0, s15
 800b5cc:	4770      	bx	lr
 800b5ce:	2300      	movs	r3, #0
 800b5d0:	e790      	b.n	800b4f4 <expm1f+0x7c>
 800b5d2:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800b5d6:	1c5a      	adds	r2, r3, #1
 800b5d8:	eed6 7a80 	vfnms.f32	s15, s13, s0
 800b5dc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b5e0:	d106      	bne.n	800b5f0 <expm1f+0x178>
 800b5e2:	ee70 7a67 	vsub.f32	s15, s0, s15
 800b5e6:	eebe 0a00 	vmov.f32	s0, #224	@ 0xbf000000 -0.5
 800b5ea:	eea7 0aa5 	vfma.f32	s0, s15, s11
 800b5ee:	4770      	bx	lr
 800b5f0:	2b01      	cmp	r3, #1
 800b5f2:	d118      	bne.n	800b626 <expm1f+0x1ae>
 800b5f4:	eebd 7a00 	vmov.f32	s14, #208	@ 0xbe800000 -0.250
 800b5f8:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800b5fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b600:	bf5b      	ittet	pl
 800b602:	ee70 7a67 	vsubpl.f32	s15, s0, s15
 800b606:	eeb0 7a00 	vmovpl.f32	s14, #0	@ 0x40000000  2.0
 800b60a:	ee70 5a25 	vaddmi.f32	s11, s0, s11
 800b60e:	eea7 6a87 	vfmapl.f32	s12, s15, s14
 800b612:	bf43      	ittte	mi
 800b614:	ee77 7ae5 	vsubmi.f32	s15, s15, s11
 800b618:	eeb8 0a00 	vmovmi.f32	s0, #128	@ 0xc0000000 -2.0
 800b61c:	ee27 0a80 	vmulmi.f32	s0, s15, s0
 800b620:	eeb0 0a46 	vmovpl.f32	s0, s12
 800b624:	4770      	bx	lr
 800b626:	1c5a      	adds	r2, r3, #1
 800b628:	2a39      	cmp	r2, #57	@ 0x39
 800b62a:	ea4f 51c3 	mov.w	r1, r3, lsl #23
 800b62e:	d90b      	bls.n	800b648 <expm1f+0x1d0>
 800b630:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800b634:	ee76 7a67 	vsub.f32	s15, s12, s15
 800b638:	ee17 3a90 	vmov	r3, s15
 800b63c:	4419      	add	r1, r3
 800b63e:	ee07 1a90 	vmov	s15, r1
 800b642:	ee37 0ac6 	vsub.f32	s0, s15, s12
 800b646:	4770      	bx	lr
 800b648:	2b16      	cmp	r3, #22
 800b64a:	dc11      	bgt.n	800b670 <expm1f+0x1f8>
 800b64c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800b650:	fa42 f303 	asr.w	r3, r2, r3
 800b654:	f1c3 537e 	rsb	r3, r3, #1065353216	@ 0x3f800000
 800b658:	ee07 3a10 	vmov	s14, r3
 800b65c:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800b660:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b664:	ee17 3a90 	vmov	r3, s15
 800b668:	440b      	add	r3, r1
 800b66a:	ee00 3a10 	vmov	s0, r3
 800b66e:	4770      	bx	lr
 800b670:	f1c3 037f 	rsb	r3, r3, #127	@ 0x7f
 800b674:	05db      	lsls	r3, r3, #23
 800b676:	ee07 3a10 	vmov	s14, r3
 800b67a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b67e:	ee70 7a67 	vsub.f32	s15, s0, s15
 800b682:	ee77 7a86 	vadd.f32	s15, s15, s12
 800b686:	ee17 3a90 	vmov	r3, s15
 800b68a:	e7ed      	b.n	800b668 <expm1f+0x1f0>
 800b68c:	4195b843 	.word	0x4195b843
 800b690:	42b17217 	.word	0x42b17217
 800b694:	0da24260 	.word	0x0da24260
 800b698:	3eb17218 	.word	0x3eb17218
 800b69c:	3f851591 	.word	0x3f851591
 800b6a0:	3f317180 	.word	0x3f317180
 800b6a4:	3717f7d1 	.word	0x3717f7d1
 800b6a8:	b457edbb 	.word	0xb457edbb
 800b6ac:	36867e54 	.word	0x36867e54
 800b6b0:	bd088889 	.word	0xbd088889
 800b6b4:	b8a670cd 	.word	0xb8a670cd
 800b6b8:	3ad00d01 	.word	0x3ad00d01
 800b6bc:	b717f7d1 	.word	0xb717f7d1
 800b6c0:	3fb8aa3b 	.word	0x3fb8aa3b
 800b6c4:	7149f2ca 	.word	0x7149f2ca

0800b6c8 <with_errnof>:
 800b6c8:	b510      	push	{r4, lr}
 800b6ca:	ed2d 8b02 	vpush	{d8}
 800b6ce:	eeb0 8a40 	vmov.f32	s16, s0
 800b6d2:	4604      	mov	r4, r0
 800b6d4:	f7fe f8c0 	bl	8009858 <__errno>
 800b6d8:	eeb0 0a48 	vmov.f32	s0, s16
 800b6dc:	ecbd 8b02 	vpop	{d8}
 800b6e0:	6004      	str	r4, [r0, #0]
 800b6e2:	bd10      	pop	{r4, pc}

0800b6e4 <xflowf>:
 800b6e4:	b130      	cbz	r0, 800b6f4 <xflowf+0x10>
 800b6e6:	eef1 7a40 	vneg.f32	s15, s0
 800b6ea:	ee27 0a80 	vmul.f32	s0, s15, s0
 800b6ee:	2022      	movs	r0, #34	@ 0x22
 800b6f0:	f7ff bfea 	b.w	800b6c8 <with_errnof>
 800b6f4:	eef0 7a40 	vmov.f32	s15, s0
 800b6f8:	e7f7      	b.n	800b6ea <xflowf+0x6>
	...

0800b6fc <__math_uflowf>:
 800b6fc:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800b704 <__math_uflowf+0x8>
 800b700:	f7ff bff0 	b.w	800b6e4 <xflowf>
 800b704:	10000000 	.word	0x10000000

0800b708 <__math_oflowf>:
 800b708:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800b710 <__math_oflowf+0x8>
 800b70c:	f7ff bfea 	b.w	800b6e4 <xflowf>
 800b710:	70000000 	.word	0x70000000

0800b714 <__ieee754_expf>:
 800b714:	ee10 2a10 	vmov	r2, s0
 800b718:	f022 4300 	bic.w	r3, r2, #2147483648	@ 0x80000000
 800b71c:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800b720:	d902      	bls.n	800b728 <__ieee754_expf+0x14>
 800b722:	ee30 0a00 	vadd.f32	s0, s0, s0
 800b726:	4770      	bx	lr
 800b728:	ea4f 71d2 	mov.w	r1, r2, lsr #31
 800b72c:	d106      	bne.n	800b73c <__ieee754_expf+0x28>
 800b72e:	eddf 7a4e 	vldr	s15, [pc, #312]	@ 800b868 <__ieee754_expf+0x154>
 800b732:	2900      	cmp	r1, #0
 800b734:	bf18      	it	ne
 800b736:	eeb0 0a67 	vmovne.f32	s0, s15
 800b73a:	4770      	bx	lr
 800b73c:	484b      	ldr	r0, [pc, #300]	@ (800b86c <__ieee754_expf+0x158>)
 800b73e:	4282      	cmp	r2, r0
 800b740:	dd02      	ble.n	800b748 <__ieee754_expf+0x34>
 800b742:	2000      	movs	r0, #0
 800b744:	f7ff bfe0 	b.w	800b708 <__math_oflowf>
 800b748:	2a00      	cmp	r2, #0
 800b74a:	da05      	bge.n	800b758 <__ieee754_expf+0x44>
 800b74c:	4a48      	ldr	r2, [pc, #288]	@ (800b870 <__ieee754_expf+0x15c>)
 800b74e:	4293      	cmp	r3, r2
 800b750:	d902      	bls.n	800b758 <__ieee754_expf+0x44>
 800b752:	2000      	movs	r0, #0
 800b754:	f7ff bfd2 	b.w	800b6fc <__math_uflowf>
 800b758:	4a46      	ldr	r2, [pc, #280]	@ (800b874 <__ieee754_expf+0x160>)
 800b75a:	4293      	cmp	r3, r2
 800b75c:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 800b760:	d952      	bls.n	800b808 <__ieee754_expf+0xf4>
 800b762:	4a45      	ldr	r2, [pc, #276]	@ (800b878 <__ieee754_expf+0x164>)
 800b764:	4293      	cmp	r3, r2
 800b766:	ea4f 0281 	mov.w	r2, r1, lsl #2
 800b76a:	d834      	bhi.n	800b7d6 <__ieee754_expf+0xc2>
 800b76c:	4b43      	ldr	r3, [pc, #268]	@ (800b87c <__ieee754_expf+0x168>)
 800b76e:	4413      	add	r3, r2
 800b770:	ed93 7a00 	vldr	s14, [r3]
 800b774:	4b42      	ldr	r3, [pc, #264]	@ (800b880 <__ieee754_expf+0x16c>)
 800b776:	4413      	add	r3, r2
 800b778:	ee30 7a47 	vsub.f32	s14, s0, s14
 800b77c:	f1c1 0201 	rsb	r2, r1, #1
 800b780:	edd3 7a00 	vldr	s15, [r3]
 800b784:	1a52      	subs	r2, r2, r1
 800b786:	ee37 0a67 	vsub.f32	s0, s14, s15
 800b78a:	ee20 6a00 	vmul.f32	s12, s0, s0
 800b78e:	ed9f 5a3d 	vldr	s10, [pc, #244]	@ 800b884 <__ieee754_expf+0x170>
 800b792:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800b888 <__ieee754_expf+0x174>
 800b796:	eee6 6a05 	vfma.f32	s13, s12, s10
 800b79a:	ed9f 5a3c 	vldr	s10, [pc, #240]	@ 800b88c <__ieee754_expf+0x178>
 800b79e:	eea6 5a86 	vfma.f32	s10, s13, s12
 800b7a2:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800b890 <__ieee754_expf+0x17c>
 800b7a6:	eee5 6a06 	vfma.f32	s13, s10, s12
 800b7aa:	ed9f 5a3a 	vldr	s10, [pc, #232]	@ 800b894 <__ieee754_expf+0x180>
 800b7ae:	eea6 5a86 	vfma.f32	s10, s13, s12
 800b7b2:	eef0 6a40 	vmov.f32	s13, s0
 800b7b6:	eee5 6a46 	vfms.f32	s13, s10, s12
 800b7ba:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 800b7be:	ee20 5a26 	vmul.f32	s10, s0, s13
 800b7c2:	bb92      	cbnz	r2, 800b82a <__ieee754_expf+0x116>
 800b7c4:	ee76 6ac6 	vsub.f32	s13, s13, s12
 800b7c8:	eec5 7a26 	vdiv.f32	s15, s10, s13
 800b7cc:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800b7d0:	ee35 0ac0 	vsub.f32	s0, s11, s0
 800b7d4:	4770      	bx	lr
 800b7d6:	4b30      	ldr	r3, [pc, #192]	@ (800b898 <__ieee754_expf+0x184>)
 800b7d8:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 800b89c <__ieee754_expf+0x188>
 800b7dc:	eddf 6a30 	vldr	s13, [pc, #192]	@ 800b8a0 <__ieee754_expf+0x18c>
 800b7e0:	4413      	add	r3, r2
 800b7e2:	edd3 7a00 	vldr	s15, [r3]
 800b7e6:	eee0 7a07 	vfma.f32	s15, s0, s14
 800b7ea:	eeb0 7a40 	vmov.f32	s14, s0
 800b7ee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b7f2:	ee17 2a90 	vmov	r2, s15
 800b7f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b7fa:	eea7 7ae6 	vfms.f32	s14, s15, s13
 800b7fe:	eddf 6a29 	vldr	s13, [pc, #164]	@ 800b8a4 <__ieee754_expf+0x190>
 800b802:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800b806:	e7be      	b.n	800b786 <__ieee754_expf+0x72>
 800b808:	f1b3 5f50 	cmp.w	r3, #872415232	@ 0x34000000
 800b80c:	d20b      	bcs.n	800b826 <__ieee754_expf+0x112>
 800b80e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800b8a8 <__ieee754_expf+0x194>
 800b812:	ee70 6a26 	vadd.f32	s13, s0, s13
 800b816:	eef4 6ae5 	vcmpe.f32	s13, s11
 800b81a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b81e:	dd02      	ble.n	800b826 <__ieee754_expf+0x112>
 800b820:	ee30 0a25 	vadd.f32	s0, s0, s11
 800b824:	4770      	bx	lr
 800b826:	2200      	movs	r2, #0
 800b828:	e7af      	b.n	800b78a <__ieee754_expf+0x76>
 800b82a:	ee36 6a66 	vsub.f32	s12, s12, s13
 800b82e:	f112 0f7d 	cmn.w	r2, #125	@ 0x7d
 800b832:	eec5 6a06 	vdiv.f32	s13, s10, s12
 800b836:	bfb8      	it	lt
 800b838:	3264      	addlt	r2, #100	@ 0x64
 800b83a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800b83e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b842:	ee75 7ae7 	vsub.f32	s15, s11, s15
 800b846:	ee17 3a90 	vmov	r3, s15
 800b84a:	bfab      	itete	ge
 800b84c:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 800b850:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 800b854:	ee00 3a10 	vmovge	s0, r3
 800b858:	eddf 7a14 	vldrlt	s15, [pc, #80]	@ 800b8ac <__ieee754_expf+0x198>
 800b85c:	bfbc      	itt	lt
 800b85e:	ee00 3a10 	vmovlt	s0, r3
 800b862:	ee20 0a27 	vmullt.f32	s0, s0, s15
 800b866:	4770      	bx	lr
 800b868:	00000000 	.word	0x00000000
 800b86c:	42b17217 	.word	0x42b17217
 800b870:	42cff1b5 	.word	0x42cff1b5
 800b874:	3eb17218 	.word	0x3eb17218
 800b878:	3f851591 	.word	0x3f851591
 800b87c:	080127dc 	.word	0x080127dc
 800b880:	080127d4 	.word	0x080127d4
 800b884:	3331bb4c 	.word	0x3331bb4c
 800b888:	b5ddea0e 	.word	0xb5ddea0e
 800b88c:	388ab355 	.word	0x388ab355
 800b890:	bb360b61 	.word	0xbb360b61
 800b894:	3e2aaaab 	.word	0x3e2aaaab
 800b898:	080127e4 	.word	0x080127e4
 800b89c:	3fb8aa3b 	.word	0x3fb8aa3b
 800b8a0:	3f317180 	.word	0x3f317180
 800b8a4:	3717f7d1 	.word	0x3717f7d1
 800b8a8:	7149f2ca 	.word	0x7149f2ca
 800b8ac:	0d800000 	.word	0x0d800000

0800b8b0 <_init>:
 800b8b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8b2:	bf00      	nop
 800b8b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b8b6:	bc08      	pop	{r3}
 800b8b8:	469e      	mov	lr, r3
 800b8ba:	4770      	bx	lr

0800b8bc <_fini>:
 800b8bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8be:	bf00      	nop
 800b8c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b8c2:	bc08      	pop	{r3}
 800b8c4:	469e      	mov	lr, r3
 800b8c6:	4770      	bx	lr
